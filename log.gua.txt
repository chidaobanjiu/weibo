20:22:07 完整请求
20:22:07 请求结束
20:22:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:22:07 path and query /api/todo/add {} {"title":"吃饭"}
20:22:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975727,
  "id": 5,
  "completed": false,
  "title": "吃饭",
  "ut": 1488975727
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /todo/index {} 
20:24:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'gua.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'todo.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:24:01 完整请求
20:24:01 请求结束
20:24:02 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:02 path and query /api/todo/all {} 
20:24:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  }
]
20:24:15 完整请求
20:24:15 请求结束
20:24:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:15 path and query /api/todo/add {} {"title":"hello"}
20:24:15 响应
HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975855,
  "id": 6,
  "completed": false,
  "title": "hello",
  "ut": 1488975855
}
20:26:52 完整请求
20:26:52 请求结束
20:26:52 完整请求
20:26:52 请求结束
20:26:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:26:52 path and query /api/todo/add {} {"title":"hello瓜"}
20:26:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976012,
  "id": 7,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976012
}
20:29:00 完整请求
20:29:00 请求结束
20:31:03 完整请求
20:31:03 请求结束
20:31:03 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:31:03 path and query /api/todo/add {} {"title":"hello瓜"}
20:31:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:31:22 完整请求
20:31:22 请求结束
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /static {'file': 'gua.js'} 
20:33:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /static {'file': 'todo.js'} 
20:33:08 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:08 完整请求
20:33:08 请求结束
20:33:08 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /api/todo/all {} 
20:33:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:33:14 完整请求
20:33:14 请求结束
20:33:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:14 path and query /todo/index {} 
20:33:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:15 完整请求
20:33:15 完整请求
20:33:15 请求结束
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /static {'file': 'gua.js'} 
20:33:15 path and query /static {'file': 'todo.js'} 
20:33:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:15 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:15 完整请求
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /api/todo/all {} 
20:33:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:22 完整请求
20:39:22 请求结束
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /todo/index {} 
20:39:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'gua.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'todo.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:23 完整请求
20:39:23 请求结束
20:39:23 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:23 path and query /api/todo/all {} 
20:39:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /todo/index {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'gua.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'todo.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /api/todo/all {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:58 完整请求
20:39:58 请求结束
20:39:58 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:58 path and query /api/todo/delete {'id': '3'} 
20:39:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975133,
  "id": 3,
  "completed": false,
  "title": "吃瓜",
  "ut": 1488975133
}
20:41:06 完整请求
20:41:06 请求结束
20:41:06 完整请求
20:41:06 请求结束
20:41:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:41:06 path and query /api/todo/delete {'id': '8'} 
20:41:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:43:55 完整请求
20:43:55 请求结束
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /todo/index {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'gua.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'todo.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /api/todo/all {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  }
]
20:44:43 完整请求
20:44:43 请求结束
20:44:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:44:43 path and query /api/todo/add {} {"title":"123"}
20:44:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977083,
  "id": 5,
  "completed": false,
  "title": "123",
  "ut": 1488977083
}
20:45:10 完整请求
20:45:10 请求结束
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /todo/index {} 
20:46:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /static {'file': 'gua.js'} 
20:46:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:46:12 完整请求
20:46:12 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /static {'file': 'todo.js'} 
20:46:13 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:46:13 完整请求
20:46:13 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /api/todo/all {} 
20:46:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:19 完整请求
20:47:19 请求结束
20:47:19 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:19 path and query /todo/index {} 
20:47:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:19 完整请求
20:47:19 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'gua.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'todo.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var t = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /api/todo/all {} 
20:47:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /todo/index {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'gua.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'todo.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /api/todo/all {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:42 完整请求
20:47:42 请求结束
20:47:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:42 path and query /api/todo/delete {'id': '2'} 
20:47:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488959077,
  "id": 2,
  "completed": false,
  "title": "瓜",
  "ut": 1488959077
}
20:47:44 完整请求
20:47:44 请求结束
20:47:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:44 path and query /api/todo/add {} 
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 6,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 7,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:53 完整请求
20:47:53 请求结束
20:47:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:53 path and query /api/todo/add {} {"title":"123asd"}
20:47:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977273,
  "id": 8,
  "completed": false,
  "title": "123asd",
  "ut": 1488977273
}
20:48:51 完整请求
20:48:51 请求结束
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /todo/index {} 
20:48:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /static {'file': 'gua.js'} 
20:48:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /static {'file': 'todo.js'} 
20:48:52 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /api/todo/all {} 
20:48:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:34 完整请求
20:51:34 请求结束
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /todo/index {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'gua.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'todo.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /api/todo/all {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:49 完整请求
20:51:49 请求结束
20:51:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:49 path and query /todo/index {} 
20:51:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:49 完整请求
20:51:49 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'gua.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'todo.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /api/todo/all {} 
20:51:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:53 path and query /todo/index {} 
20:56:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'gua.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:56:54 完整请求
20:56:54 请求结束
20:56:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'todo.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:06 完整请求
20:57:06 请求结束
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /todo/index {} 
20:57:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /static {'file': 'gua.js'} 
20:57:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /static {'file': 'todo.js'} 
20:57:07 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /api/todo/all {} 
20:57:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /todo/index {} 
20:59:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /static {'file': 'gua.js'} 
20:59:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /static {'file': 'todo.js'} 
20:59:39 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:59:39 完整请求
20:59:39 请求结束
20:59:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /api/todo/all {} 
20:59:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488975265,
    "id": 4,
    "ct": 1488975265,
    "title": "吃饭",
    "completed": false
  },
  {
    "ut": 1488977083,
    "id": 5,
    "ct": 1488977083,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 6,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 7,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977273,
    "id": 8,
    "ct": 1488977273,
    "title": "123asd",
    "completed": false
  }
]
20:59:41 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '5'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977083,
  "id": 5,
  "ct": 1488977083,
  "title": "123",
  "completed": false
}
20:59:42 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '6'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 6,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '8'} 
20:59:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977273,
  "id": 8,
  "ct": 1488977273,
  "title": "123asd",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '7'} 
20:59:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 7,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:53 完整请求
20:59:54 请求结束
20:59:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:54 path and query /api/todo/update {} {"id":"4","title":"吃瓜"}
20:59:54 kwargs,  {'id': 4} <class 'dict'>
20:59:54 debug 0
20:59:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977994,
  "id": 4,
  "ct": 1488975265,
  "title": "吃瓜",
  "completed": false
}
21:05:10 完整请求
21:05:10 请求结束
21:05:10 完整请求
21:05:10 请求结束
21:05:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:10 path and query /todo/index {} 
21:05:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'gua.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'todo.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /api/todo/all {} 
21:05:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488977994,
    "id": 4,
    "ct": 1488975265,
    "title": "吃瓜",
    "completed": false
  }
]
21:05:18 完整请求
21:05:18 请求结束
21:05:18 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:18 path and query /api/todo/update {} {"id":"4","title":"hello"}
21:05:18 kwargs,  {'id': 4} <class 'dict'>
21:05:18 debug 0
21:05:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978318,
  "id": 4,
  "ct": 1488975265,
  "title": "hello",
  "completed": false
}
21:05:20 完整请求
21:05:20 请求结束
21:05:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /todo/index {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:21 完整请求
21:05:21 完整请求
21:05:21 请求结束
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /static {'file': 'todo.js'} 
21:05:21 path and query /static {'file': 'gua.js'} 
21:05:21 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:21 完整请求
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /api/todo/all {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:07:45 完整请求
21:07:45 请求结束
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /todo/index {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'gua.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'todo.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /api/todo/all {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:33 完整请求
21:10:33 请求结束
21:10:33 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:33 path and query /todo/index {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'gua.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'todo.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /api/todo/all {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:39 完整请求
21:10:39 请求结束
21:10:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:39 path and query /api/todo/update {} {"id":"4","title":"gua"}
21:10:39 kwargs,  {'id': 4} <class 'dict'>
21:10:39 debug 0
21:10:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978639,
  "id": 4,
  "ct": 1488975265,
  "title": "gua",
  "completed": false
}
21:10:44 完整请求
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /todo/index {} 
21:10:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:44 完整请求
21:10:44 完整请求
21:10:44 请求结束
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /static {'file': 'todo.js'} 
21:10:44 path and query /static {'file': 'gua.js'} 
21:10:45 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:45 完整请求
21:10:45 请求结束
21:10:45 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:45 path and query /api/todo/all {} 
21:10:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978639,
    "id": 4,
    "ct": 1488975265,
    "title": "gua",
    "completed": false
  }
]
21:10:50 完整请求
21:10:50 请求结束
21:10:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:50 path and query /api/todo/update {} 
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /todo/index {} 
21:17:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /static {'file': 'gua.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /static {'file': 'todo.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /api/todo/all {} 
21:17:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "id": 4,
    "ct": 1488975265,
    "title": "瓜",
    "completed": false
  }
]
21:17:34 完整请求
21:17:34 请求结束
21:17:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /weibo/index {} 
21:17:35 kwargs,  {'id': -1} <class 'dict'>
21:17:35 响应
 HTTP/1.1 302 OK
Location: /login
Content-Type: text/html


21:17:35 完整请求
21:17:35 请求结束
21:17:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /login {} 
21:17:35 login, cookies {'Pycharm-df207d35': '600adc10-1f5d-46ff-b99f-861b091847e7'}
21:17:35 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /todo/index {} 
21:18:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'gua.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'todo.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:07 完整请求
21:18:07 请求结束
21:18:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:07 path and query /api/todo/all {} 
21:18:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ct": 1488975265,
    "ut": 1488978669
  }
]
21:18:09 完整请求
21:18:09 完整请求
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 path and query /weibo/index {} 
21:18:09 path and query /weibo/index {} 
21:18:29 完整请求
21:18:29 请求结束
21:18:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:29 path and query /weibo/index {} 
21:18:50 完整请求
21:18:50 请求结束
21:18:50 完整请求
21:18:50 请求结束
21:18:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:50 path and query /todo/index {} 
21:18:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'gua.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'todo.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /api/todo/all {} 
21:18:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "ct": 1488975265,
    "id": 4,
    "title": "瓜",
    "completed": false
  }
]
21:18:54 完整请求
21:18:54 请求结束
21:18:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:54 path and query /weibo/index {} 
21:18:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:18:54 完整请求
21:18:54 完整请求
21:18:54 请求结束
21:18:54 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'gua.js'} 
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:40:12 完整请求
21:40:12 请求结束
21:40:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:12 path and query /weibo/index {} 
21:40:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:12 完整请求
21:40:12 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'gua.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'weibo.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /weibo/index {} 
21:40:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:14 完整请求
21:40:14 完整请求
21:40:14 请求结束
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /static {'file': 'weibo.js'} 
21:40:14 path and query /static {'file': 'gua.js'} 
21:40:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:14 完整请求
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /api/weibo/all {} 
21:40:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:40:28 完整请求
21:40:28 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /weibo/index {} 
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'gua.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'weibo.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /api/weibo/all {} 
21:40:29 kwargs,  {'weibo_id': 1} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 2} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 3} <class 'dict'>
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /weibo/index {} 
21:41:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /static {'file': 'gua.js'} 
21:41:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /static {'file': 'weibo.js'} 
21:41:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:41:10 完整请求
21:41:10 请求结束
21:41:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /api/weibo/all {} 
21:41:10 kwargs,  {'weibo_id': 1} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 2} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 3} <class 'dict'>
21:41:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /weibo/index {} 
21:42:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'gua.js'} 
21:42:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'weibo.js'} 
21:42:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:42:07 完整请求
21:42:07 请求结束
21:42:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:07 path and query /api/weibo/all {} 
21:42:07 kwargs,  {'weibo_id': 1} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 2} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 3} <class 'dict'>
21:42:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:44:32 完整请求
21:44:32 请求结束
23:04:53 完整请求
23:04:53 请求结束
23:04:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:04:53 path and query /todo/index {} 
23:04:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
23:04:53 完整请求
23:04:53 完整请求
23:04:53 请求结束
23:04:53 请求结束
23:04:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:04:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:04:53 path and query /static {'file': 'todo.js'} 
23:04:53 path and query /static {'file': 'gua.js'} 
23:04:53 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
23:04:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:04:53 完整请求
23:04:53 请求结束
23:04:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:04:53 path and query /api/todo/all {} 
23:04:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "title": "瓜",
    "completed": false,
    "ut": 1488978669,
    "ct": 1488975265,
    "id": 4
  }
]
23:05:11 完整请求
23:05:11 请求结束
23:05:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:05:11 path and query /weibo/index {} 
23:05:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:05:11 完整请求
23:05:11 完整请求
23:05:11 请求结束
23:05:11 请求结束
23:05:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:05:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:05:11 path and query /static {'file': 'gua.js'} 
23:05:11 path and query /static {'file': 'weibo.js'} 
23:05:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:05:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:05:11 完整请求
23:05:11 请求结束
23:05:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:05:11 path and query /api/weibo/all {} 
23:05:11 kwargs,  {'weibo_id': 1} <class 'dict'>
23:05:11 kwargs,  {'weibo_id': 2} <class 'dict'>
23:05:11 kwargs,  {'weibo_id': 3} <class 'dict'>
23:05:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1,
        "id": 2
      }
    ],
    "content": "hello tweet",
    "user_id": 1,
    "id": 1
  },
  {
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  }
]
23:06:45 完整请求
23:06:45 请求结束
23:06:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:06:45 path and query /weibo/index {} 
23:06:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:06:45 完整请求
23:06:45 完整请求
23:06:45 请求结束
23:06:45 请求结束
23:06:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:06:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:06:45 path and query /static {'file': 'weibo.js'} 
23:06:45 path and query /static {'file': 'gua.js'} 
23:06:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:06:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:06:45 完整请求
23:06:45 请求结束
23:06:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:06:45 path and query /api/weibo/all {} 
23:06:45 kwargs,  {'weibo_id': 1} <class 'dict'>
23:06:45 kwargs,  {'weibo_id': 2} <class 'dict'>
23:06:45 kwargs,  {'weibo_id': 3} <class 'dict'>
23:06:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1,
        "id": 2
      }
    ],
    "content": "hello tweet",
    "user_id": 1,
    "id": 1
  },
  {
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  }
]
23:07:00 完整请求
23:07:00 请求结束
23:07:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:00 path and query /weibo/index {} 
23:07:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:07:00 完整请求
23:07:00 完整请求
23:07:00 请求结束
23:07:00 请求结束
23:07:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:00 path and query /static {'file': 'weibo.js'} 
23:07:00 path and query /static {'file': 'gua.js'} 
23:07:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:07:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:07:00 完整请求
23:07:00 请求结束
23:07:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:00 path and query /api/weibo/all {} 
23:07:00 kwargs,  {'weibo_id': 1} <class 'dict'>
23:07:01 kwargs,  {'weibo_id': 2} <class 'dict'>
23:07:01 kwargs,  {'weibo_id': 3} <class 'dict'>
23:07:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  }
]
23:07:25 完整请求
23:07:25 请求结束
23:07:33 完整请求
23:07:33 请求结束
23:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:33 path and query /weibo/index {} 
23:07:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:07:33 完整请求
23:07:33 完整请求
23:07:33 请求结束
23:07:33 请求结束
23:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:33 path and query /static {'file': 'gua.js'} 
23:07:33 path and query /static {'file': 'weibo.js'} 
23:07:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:07:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:07:33 完整请求
23:07:33 请求结束
23:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:07:33 path and query /api/weibo/all {} 
23:07:33 kwargs,  {'weibo_id': 1} <class 'dict'>
23:07:33 kwargs,  {'weibo_id': 2} <class 'dict'>
23:07:33 kwargs,  {'weibo_id': 3} <class 'dict'>
23:07:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  }
]
23:08:22 完整请求
23:08:22 请求结束
23:08:42 完整请求
23:08:42 请求结束
23:08:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:08:42 path and query /weibo/index {} 
23:08:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:08:42 完整请求
23:08:42 完整请求
23:08:42 请求结束
23:08:42 请求结束
23:08:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:08:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:08:42 path and query /static {'file': 'gua.js'} 
23:08:42 path and query /static {'file': 'weibo.js'} 
23:08:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:08:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:08:42 完整请求
23:08:42 请求结束
23:08:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:08:42 path and query /api/weibo/all {} 
23:08:42 kwargs,  {'weibo_id': 1} <class 'dict'>
23:08:42 kwargs,  {'weibo_id': 2} <class 'dict'>
23:08:42 kwargs,  {'weibo_id': 3} <class 'dict'>
23:08:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  }
]
23:09:04 完整请求
23:09:04 请求结束
23:17:15 完整请求
23:17:15 请求结束
23:17:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:17:15 path and query /weibo/index {} 
23:17:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:17:15 完整请求
23:17:15 完整请求
23:17:15 请求结束
23:17:15 请求结束
23:17:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:17:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:17:16 path and query /static {'file': 'gua.js'} 
23:17:16 path and query /static {'file': 'weibo.js'} 
23:17:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:17:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:17:16 完整请求
23:17:16 请求结束
23:17:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:17:16 path and query /api/weibo/all {} 
23:17:16 kwargs,  {'weibo_id': 1} <class 'dict'>
23:17:16 kwargs,  {'weibo_id': 2} <class 'dict'>
23:17:16 kwargs,  {'weibo_id': 3} <class 'dict'>
23:17:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  }
]
23:17:36 完整请求
23:17:36 请求结束
23:20:18 完整请求
23:20:18 请求结束
23:20:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:20:18 path and query /weibo/index {} 
23:20:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:20:18 完整请求
23:20:18 请求结束
23:20:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:20:18 path and query /static {'file': 'gua.js'} 
23:20:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:20:18 完整请求
23:20:18 请求结束
23:20:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:20:18 path and query /static {'file': 'weibo.js'} 
23:20:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:20:18 完整请求
23:20:18 请求结束
23:20:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:20:18 path and query /api/weibo/all {} 
23:20:18 kwargs,  {'weibo_id': 1} <class 'dict'>
23:20:18 kwargs,  {'weibo_id': 2} <class 'dict'>
23:20:18 kwargs,  {'weibo_id': 3} <class 'dict'>
23:20:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  }
]
23:21:00 完整请求
23:21:00 请求结束
23:21:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:00 path and query /weibo/index {} 
23:21:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:21:00 完整请求
23:21:00 请求结束
23:21:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:00 path and query /static {'file': 'gua.js'} 
23:21:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:21:00 完整请求
23:21:00 请求结束
23:21:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:00 path and query /static {'file': 'weibo.js'} 
23:21:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:21:13 完整请求
23:21:13 请求结束
23:21:31 完整请求
23:21:31 请求结束
23:21:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:31 path and query /weibo/index {} 
23:21:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:21:31 完整请求
23:21:31 请求结束
23:21:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:31 path and query /static {'file': 'gua.js'} 
23:21:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:21:31 完整请求
23:21:31 请求结束
23:21:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:31 path and query /static {'file': 'weibo.js'} 
23:21:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:21:31 完整请求
23:21:31 请求结束
23:21:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:21:31 path and query /api/weibo/all {} 
23:21:31 kwargs,  {'weibo_id': 1} <class 'dict'>
23:21:31 kwargs,  {'weibo_id': 2} <class 'dict'>
23:21:31 kwargs,  {'weibo_id': 3} <class 'dict'>
23:21:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  }
]
23:22:17 完整请求
23:22:18 请求结束
23:22:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:22:18 path and query /weibo/index {} 
23:22:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:22:18 完整请求
23:22:18 请求结束
23:22:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:22:18 path and query /static {'file': 'gua.js'} 
23:22:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:22:18 完整请求
23:22:18 请求结束
23:22:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:22:18 path and query /static {'file': 'weibo.js'} 
23:22:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:22:18 完整请求
23:22:18 请求结束
23:22:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:22:18 path and query /api/weibo/all {} 
23:22:18 kwargs,  {'weibo_id': 1} <class 'dict'>
23:22:18 kwargs,  {'weibo_id': 2} <class 'dict'>
23:22:18 kwargs,  {'weibo_id': 3} <class 'dict'>
23:22:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  }
]
23:22:20 完整请求
23:22:20 请求结束
23:22:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:22:20 path and query /api/weibo/add {} 
23:22:51 完整请求
23:22:51 请求结束
23:23:30 完整请求
23:23:30 请求结束
23:23:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:23:30 path and query /api/weibo/add {} 
23:23:59 完整请求
23:23:59 请求结束
23:25:52 完整请求
23:25:52 请求结束
23:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:25:52 path and query /weibo/index {} 
23:25:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:25:52 完整请求
23:25:52 请求结束
23:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:25:52 path and query /static {'file': 'gua.js'} 
23:25:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:25:53 完整请求
23:25:53 请求结束
23:25:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:25:53 path and query /static {'file': 'weibo.js'} 
23:25:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:25:53 完整请求
23:25:53 请求结束
23:25:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:25:53 path and query /api/weibo/all {} 
23:25:53 kwargs,  {'weibo_id': 1} <class 'dict'>
23:25:53 kwargs,  {'weibo_id': 2} <class 'dict'>
23:25:53 kwargs,  {'weibo_id': 3} <class 'dict'>
23:25:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "id": 1,
    "user_id": 1
  },
  {
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "123",
        "id": 4,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "asdf",
        "id": 5,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "id": 7,
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "id": 2,
    "user_id": 1
  },
  {
    "comments": [
      {
        "content": "123",
        "id": 6,
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "id": 3,
    "user_id": 1
  }
]
23:25:57 完整请求
23:25:57 请求结束
23:25:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:25:57 path and query /api/weibo/add {} 
23:26:24 完整请求
23:26:24 请求结束
23:27:41 完整请求
23:27:41 请求结束
23:27:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:27:41 path and query /api/weibo/add {} 
23:28:42 完整请求
23:28:42 请求结束
23:28:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:28:42 path and query /weibo/index {} 
23:28:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:28:42 完整请求
23:28:42 请求结束
23:28:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:28:42 path and query /static {'file': 'gua.js'} 
23:28:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

23:28:42 完整请求
23:28:42 请求结束
23:28:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:28:43 path and query /static {'file': 'weibo.js'} 
23:28:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:28:43 完整请求
23:28:43 请求结束
23:28:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:28:43 path and query /api/weibo/all {} 
23:28:43 kwargs,  {'weibo_id': 1} <class 'dict'>
23:28:43 kwargs,  {'weibo_id': 2} <class 'dict'>
23:28:43 kwargs,  {'weibo_id': 3} <class 'dict'>
23:28:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ]
  }
]
23:28:49 完整请求
23:28:49 请求结束
23:28:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:28:49 path and query /api/weibo/add {} 
23:29:11 完整请求
23:29:11 请求结束
23:33:53 完整请求
23:33:53 请求结束
23:33:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:33:53 path and query /weibo/index {} 
23:33:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:33:53 完整请求
23:33:53 请求结束
23:33:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:33:53 path and query /static {'file': 'gua.js'} 
23:33:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:33:53 完整请求
23:33:53 请求结束
23:33:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:33:53 path and query /static {'file': 'weibo.js'} 
23:33:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:33:54 完整请求
23:33:54 请求结束
23:33:54 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:33:54 path and query /api/weibo/all {} 
23:33:54 kwargs,  {'weibo_id': 1} <class 'dict'>
23:33:54 kwargs,  {'weibo_id': 2} <class 'dict'>
23:33:54 kwargs,  {'weibo_id': 3} <class 'dict'>
23:33:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "content": "hello tweet",
    "comments": [
      {
        "user_id": 2,
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1
      }
    ]
  },
  {
    "user_id": 1,
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "content": "hello",
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "id": 4,
        "content": "123",
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "id": 5,
        "content": "asdf",
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "id": 7,
        "content": "说得好",
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "id": 8,
        "content": "说得好",
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "content": "123",
        "weibo_id": 3
      }
    ]
  }
]
23:34:05 完整请求
23:34:05 请求结束
23:34:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:34:05 path and query /api/weibo/add {} 
23:34:24 完整请求
23:34:24 请求结束
23:35:17 完整请求
23:35:17 请求结束
23:35:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:35:17 path and query /weibo/index {} 
23:35:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:35:17 完整请求
23:35:17 请求结束
23:35:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:35:17 path and query /static {'file': 'gua.js'} 
23:35:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:35:17 完整请求
23:35:17 请求结束
23:35:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:35:18 path and query /static {'file': 'weibo.js'} 
23:35:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:35:18 完整请求
23:35:18 请求结束
23:35:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:35:18 path and query /api/weibo/all {} 
23:35:18 kwargs,  {'weibo_id': 1} <class 'dict'>
23:35:18 kwargs,  {'weibo_id': 2} <class 'dict'>
23:35:18 kwargs,  {'weibo_id': 3} <class 'dict'>
23:35:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "user_id": 1,
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "user_id": 1,
        "id": 5,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "user_id": 2,
        "id": 7,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "user_id": 2,
        "id": 8,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  }
]
23:35:20 完整请求
23:35:20 请求结束
23:35:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:35:20 path and query /api/weibo/add {} 
23:35:30 完整请求
23:35:30 请求结束
23:36:42 完整请求
23:36:42 请求结束
23:36:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:42 path and query /todo/index {} 
23:36:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
23:36:42 完整请求
23:36:42 完整请求
23:36:42 请求结束
23:36:42 请求结束
23:36:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:42 path and query /static {'file': 'gua.js'} 
23:36:42 path and query /static {'file': 'todo.js'} 
23:36:42 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
23:36:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:36:42 完整请求
23:36:42 请求结束
23:36:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:42 path and query /api/todo/all {} 
23:36:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "ut": 1488978669,
    "id": 4,
    "ct": 1488975265,
    "title": "瓜"
  }
]
23:36:44 完整请求
23:36:44 请求结束
23:36:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:44 path and query /api/todo/add {} 
23:36:44 完整请求
23:36:44 请求结束
23:36:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:44 path and query /api/todo/add {} 
23:36:47 完整请求
23:36:47 请求结束
23:36:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:47 path and query /api/todo/add {} {"title":"fdsffsd"}
23:36:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "ut": 1489419407,
  "id": 5,
  "ct": 1489419407,
  "title": "fdsffsd"
}
23:36:47 完整请求
23:36:47 请求结束
23:36:47 完整请求
23:36:48 请求结束
23:36:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:48 path and query /api/todo/add {} 
23:36:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:36:48 path and query /api/todo/add {} 
23:37:36 完整请求
23:37:36 请求结束
23:37:36 cookie ['']
23:37:36 path and query /todo {} 
23:37:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
23:37:36 完整请求
23:37:36 请求结束
23:37:36 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:36 path and query /favicon.ico {} 
23:37:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
23:37:39 完整请求
23:37:39 请求结束
23:37:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:39 path and query / {} 
23:37:39 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


23:37:39 完整请求
23:37:39 请求结束
23:37:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:39 path and query /todo/index {} 
23:37:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
23:37:39 完整请求
23:37:39 完整请求
23:37:39 请求结束
23:37:39 请求结束
23:37:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:40 path and query /static {'file': 'todo.js'} 
23:37:40 path and query /static {'file': 'gua.js'} 
23:37:40 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
23:37:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:37:40 完整请求
23:37:40 请求结束
23:37:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:40 path and query /api/todo/all {} 
23:37:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ut": 1488978669,
    "ct": 1488975265
  },
  {
    "completed": false,
    "id": 5,
    "title": "fdsffsd",
    "ut": 1489419407,
    "ct": 1489419407
  }
]
23:37:42 完整请求
23:37:43 请求结束
23:37:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:43 path and query /api/todo/add {} {"title":"fd"}
23:37:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 6,
  "title": "fd",
  "ut": 1489419463,
  "ct": 1489419463
}
23:37:45 完整请求
23:37:45 请求结束
23:37:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:37:45 path and query /api/todo/add {} {"title":"fddfdsf"}
23:37:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 7,
  "title": "fddfdsf",
  "ut": 1489419465,
  "ct": 1489419465
}
23:38:04 完整请求
23:38:04 请求结束
23:38:04 完整请求
23:38:04 请求结束
23:38:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:04 path and query /weibo/index {} 
23:38:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:38:04 完整请求
23:38:04 完整请求
23:38:04 请求结束
23:38:04 请求结束
23:38:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:04 path and query /static {'file': 'gua.js'} 
23:38:04 path and query /static {'file': 'weibo.js'} 
23:38:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:38:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:38:05 完整请求
23:38:05 请求结束
23:38:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:05 path and query /api/weibo/all {} 
23:38:05 kwargs,  {'weibo_id': 1} <class 'dict'>
23:38:05 kwargs,  {'weibo_id': 2} <class 'dict'>
23:38:05 kwargs,  {'weibo_id': 3} <class 'dict'>
23:38:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "user_id": 1,
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "user_id": 1,
        "id": 5,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "user_id": 2,
        "id": 7,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "user_id": 2,
        "id": 8,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  }
]
23:38:06 完整请求
23:38:06 请求结束
23:38:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:06 path and query /api/weibo/add {} 
23:38:06 完整请求
23:38:06 请求结束
23:38:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:07 path and query /api/weibo/add {} 
23:38:19 完整请求
23:38:19 请求结束
23:38:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:19 path and query /api/weibo/add {} {"title":"sdfsd"}
23:38:20 kwargs,  {'weibo_id': 4} <class 'dict'>
23:38:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "",
  "id": 4,
  "comments": []
}
23:38:20 完整请求
23:38:20 请求结束
23:38:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:20 path and query /api/weibo/add {} 
23:38:30 完整请求
23:38:30 请求结束
23:38:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:38:30 path and query /api/weibo/add {} {"title":"dfwefwfwe"}
23:38:30 kwargs,  {'weibo_id': 5} <class 'dict'>
23:38:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "",
  "id": 5,
  "comments": []
}
23:39:02 完整请求
23:39:02 请求结束
23:39:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:39:02 path and query /api/weibo/add {} 
23:39:08 完整请求
23:39:08 请求结束
23:39:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:39:08 path and query /weibo/index {} 
23:39:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:39:09 完整请求
23:39:09 完整请求
23:39:09 请求结束
23:39:09 请求结束
23:39:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:39:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:39:09 path and query /static {'file': 'weibo.js'} 
23:39:09 path and query /static {'file': 'gua.js'} 
23:39:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:39:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:39:09 完整请求
23:39:09 请求结束
23:39:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:39:09 path and query /api/weibo/all {} 
23:39:09 kwargs,  {'weibo_id': 1} <class 'dict'>
23:39:09 kwargs,  {'weibo_id': 2} <class 'dict'>
23:39:09 kwargs,  {'weibo_id': 3} <class 'dict'>
23:39:09 kwargs,  {'weibo_id': 4} <class 'dict'>
23:39:10 kwargs,  {'weibo_id': 5} <class 'dict'>
23:39:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "user_id": 1,
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "user_id": 1,
        "id": 5,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "user_id": 2,
        "id": 7,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "user_id": 2,
        "id": 8,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  }
]
23:39:21 完整请求
23:39:21 请求结束
23:42:08 完整请求
23:42:08 请求结束
23:42:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:42:08 path and query /weibo/index {} 
23:42:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:42:08 完整请求
23:42:08 请求结束
23:42:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:42:09 path and query /static {'file': 'gua.js'} 
23:42:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

23:42:09 完整请求
23:42:09 请求结束
23:42:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:42:09 path and query /static {'file': 'weibo.js'} 
23:42:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:42:09 完整请求
23:42:09 请求结束
23:42:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:42:09 path and query /api/weibo/all {} 
23:42:09 kwargs,  {'weibo_id': 1} <class 'dict'>
23:42:09 kwargs,  {'weibo_id': 2} <class 'dict'>
23:42:09 kwargs,  {'weibo_id': 3} <class 'dict'>
23:42:09 kwargs,  {'weibo_id': 4} <class 'dict'>
23:42:09 kwargs,  {'weibo_id': 5} <class 'dict'>
23:42:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "user_id": 1,
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right"
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "user_id": 1,
        "id": 5,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "user_id": 2,
        "id": 7,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "user_id": 2,
        "id": 8,
        "weibo_id": 2,
        "content": "说得好"
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      }
    ],
    "content": "hahaha"
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  }
]
23:42:12 完整请求
23:42:12 请求结束
23:42:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
23:42:12 path and query /api/weibo/add {} 
23:42:38 完整请求
23:42:39 请求结束
10:56:33 完整请求
10:56:34 请求结束
10:56:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:34 path and query /todo {} 
10:56:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
10:56:34 完整请求
10:56:34 请求结束
10:56:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:34 path and query /favicon.ico {} 
10:56:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
10:56:41 完整请求
10:56:41 请求结束
10:56:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:41 path and query /t {} 
10:56:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
10:56:46 完整请求
10:56:46 完整请求
10:56:46 完整请求
10:56:46 请求结束
10:56:46 请求结束
10:56:46 请求结束
10:56:46 请求结束
10:56:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:46 path and query / {} 
10:56:46 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


10:56:46 完整请求
10:56:46 请求结束
10:56:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:46 path and query /todo/index {} 
10:56:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
10:56:46 完整请求
10:56:46 完整请求
10:56:46 请求结束
10:56:46 请求结束
10:56:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:46 path and query /static {'file': 'todo.js'} 
10:56:46 path and query /static {'file': 'gua.js'} 
10:56:46 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
10:56:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

10:56:46 完整请求
10:56:46 请求结束
10:56:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:47 path and query /api/todo/all {} 
10:56:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ut": 1488978669
  },
  {
    "ct": 1489419407,
    "completed": false,
    "id": 5,
    "title": "fdsffsd",
    "ut": 1489419407
  },
  {
    "ct": 1489419463,
    "completed": false,
    "id": 6,
    "title": "fd",
    "ut": 1489419463
  },
  {
    "ct": 1489419465,
    "completed": false,
    "id": 7,
    "title": "fddfdsf",
    "ut": 1489419465
  }
]
10:56:53 完整请求
10:56:53 请求结束
10:56:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:56:53 path and query /api/todo/add {} {"title":"fdf"}
10:56:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489460213,
  "completed": false,
  "id": 8,
  "title": "fdf",
  "ut": 1489460213
}
10:57:08 完整请求
10:57:08 请求结束
10:57:08 完整请求
10:57:08 请求结束
10:57:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:57:08 path and query /api/todo/add {} 
10:57:36 完整请求
10:57:36 请求结束
10:59:39 完整请求
10:59:39 请求结束
10:59:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:39 path and query /api/todo/add {} {"title":"fdf"}
10:59:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489460379,
  "completed": false,
  "id": 9,
  "title": "fdf",
  "ut": 1489460379
}
10:59:48 完整请求
10:59:48 请求结束
10:59:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:48 path and query /weibo/index {} 
10:59:48 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:59:48 完整请求
10:59:48 完整请求
10:59:48 请求结束
10:59:48 请求结束
10:59:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:48 path and query /static {'file': 'weibo.js'} 
10:59:48 path and query /static {'file': 'gua.js'} 
10:59:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:59:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

10:59:48 完整请求
10:59:49 请求结束
10:59:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:49 path and query /api/weibo/all {} 
10:59:49 kwargs,  {'weibo_id': 1} <class 'dict'>
10:59:49 kwargs,  {'weibo_id': 2} <class 'dict'>
10:59:49 kwargs,  {'weibo_id': 3} <class 'dict'>
10:59:49 kwargs,  {'weibo_id': 4} <class 'dict'>
10:59:49 kwargs,  {'weibo_id': 5} <class 'dict'>
10:59:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  }
]
10:59:51 完整请求
10:59:51 请求结束
10:59:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
10:59:51 path and query /api/weibo/add {} 
11:00:13 完整请求
11:00:13 请求结束
11:00:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:00:13 path and query /api/weibo/add {} {"title":"fdsfs"}
11:00:13 kwargs,  {'weibo_id': 6} <class 'dict'>
11:00:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "",
  "id": 6
}
11:00:13 完整请求
11:00:13 请求结束
11:00:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:00:14 path and query /api/weibo/add {} 
11:10:55 完整请求
11:10:55 请求结束
11:10:55 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:10:55 path and query /weibo/index {} 
11:10:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:10:56 完整请求
11:10:56 完整请求
11:10:56 请求结束
11:10:56 请求结束
11:10:56 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:10:56 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:10:56 path and query /static {'file': 'gua.js'} 
11:10:56 path and query /static {'file': 'weibo.js'} 
11:10:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:10:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:10:56 完整请求
11:10:56 请求结束
11:10:56 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:10:56 path and query /api/weibo/all {} 
11:10:57 kwargs,  {'weibo_id': 1} <class 'dict'>
11:10:57 kwargs,  {'weibo_id': 2} <class 'dict'>
11:10:57 kwargs,  {'weibo_id': 3} <class 'dict'>
11:10:57 kwargs,  {'weibo_id': 4} <class 'dict'>
11:10:57 kwargs,  {'weibo_id': 5} <class 'dict'>
11:10:57 kwargs,  {'weibo_id': 6} <class 'dict'>
11:10:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  },
  {
    "comments": [],
    "content": "",
    "id": 6
  }
]
11:11:07 完整请求
11:11:07 请求结束
11:11:16 完整请求
11:11:16 请求结束
11:11:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:16 path and query /weibo/index {} 
11:11:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:11:16 完整请求
11:11:16 请求结束
11:11:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:16 path and query /static {'file': 'gua.js'} 
11:11:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:11:16 完整请求
11:11:16 请求结束
11:11:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:16 path and query /static {'file': 'weibo.js'} 
11:11:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:11:16 完整请求
11:11:16 请求结束
11:11:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:17 path and query /api/weibo/all {} 
11:11:17 kwargs,  {'weibo_id': 1} <class 'dict'>
11:11:17 kwargs,  {'weibo_id': 2} <class 'dict'>
11:11:17 kwargs,  {'weibo_id': 3} <class 'dict'>
11:11:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  }
]
11:11:32 完整请求
11:11:32 请求结束
11:11:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:33 path and query /api/weibo/add {} 
11:11:47 完整请求
11:11:47 请求结束
11:11:48 完整请求
11:11:48 请求结束
11:11:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:11:48 path and query /api/weibo/add {} 
11:12:06 完整请求
11:12:06 请求结束
11:25:49 完整请求
11:25:49 请求结束
11:25:49 cookie ['']
11:25:50 path and query /weibo/index {} 
11:25:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:25:50 完整请求
11:25:50 完整请求
11:25:50 请求结束
11:25:50 请求结束
11:25:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:50 path and query /static {'file': 'weibo.js'} 
11:25:50 path and query /static {'file': 'gua.js'} 
11:25:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:25:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:25:50 完整请求
11:25:50 完整请求
11:25:50 请求结束
11:25:50 请求结束
11:25:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:50 path and query /api/weibo/all {} 
11:25:50 path and query /favicon.ico {} 
11:25:50 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
11:25:50 kwargs,  {'weibo_id': 1} <class 'dict'>
11:25:50 kwargs,  {'weibo_id': 2} <class 'dict'>
11:25:50 kwargs,  {'weibo_id': 3} <class 'dict'>
11:25:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  }
]
11:25:52 完整请求
11:25:52 请求结束
11:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:52 path and query /weibo/index {} 
11:25:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:25:52 完整请求
11:25:52 完整请求
11:25:52 请求结束
11:25:52 请求结束
11:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:52 path and query /static {'file': 'gua.js'} 
11:25:52 path and query /static {'file': 'weibo.js'} 
11:25:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:25:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:25:52 完整请求
11:25:52 请求结束
11:25:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:25:52 path and query /api/weibo/all {} 
11:25:52 kwargs,  {'weibo_id': 1} <class 'dict'>
11:25:52 kwargs,  {'weibo_id': 2} <class 'dict'>
11:25:52 kwargs,  {'weibo_id': 3} <class 'dict'>
11:25:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  }
]
11:26:02 完整请求
11:26:02 请求结束
11:26:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:26:02 path and query /api/weibo/add {} 
11:26:02 完整请求
11:26:02 请求结束
11:26:02 完整请求
11:26:02 请求结束
11:26:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:26:03 path and query /api/weibo/add {} 
11:26:17 完整请求
11:26:18 请求结束
11:27:45 完整请求
11:27:46 请求结束
11:27:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:46 path and query /todo/index {} 
11:27:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
11:27:46 完整请求
11:27:46 完整请求
11:27:46 请求结束
11:27:46 请求结束
11:27:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:46 path and query /static {'file': 'todo.js'} 
11:27:46 path and query /static {'file': 'gua.js'} 
11:27:46 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
11:27:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:27:46 完整请求
11:27:46 请求结束
11:27:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:46 path and query /api/todo/all {} 
11:27:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ut": 1488978669
  },
  {
    "ct": 1489419407,
    "completed": false,
    "id": 5,
    "title": "fdsffsd",
    "ut": 1489419407
  },
  {
    "ct": 1489419463,
    "completed": false,
    "id": 6,
    "title": "fd",
    "ut": 1489419463
  },
  {
    "ct": 1489419465,
    "completed": false,
    "id": 7,
    "title": "fddfdsf",
    "ut": 1489419465
  },
  {
    "ct": 1489460213,
    "completed": false,
    "id": 8,
    "title": "fdf",
    "ut": 1489460213
  },
  {
    "ct": 1489460379,
    "completed": false,
    "id": 9,
    "title": "fdf",
    "ut": 1489460379
  }
]
11:27:49 完整请求
11:27:49 请求结束
11:27:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:49 path and query /api/todo/add {} 
11:27:49 完整请求
11:27:49 请求结束
11:27:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:49 path and query /api/todo/add {} 
11:27:59 完整请求
11:27:59 请求结束
11:27:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:59 path and query /api/todo/add {} {"title":"aaaaa"}
11:27:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462079,
  "completed": false,
  "id": 10,
  "title": "aaaaa",
  "ut": 1489462079
}
11:27:59 完整请求
11:27:59 请求结束
11:27:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:27:59 path and query /api/todo/add {} 
11:35:49 完整请求
11:35:50 请求结束
11:35:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:35:50 path and query /api/todo/add {} {"title":"aaaaa"}
11:35:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462550,
  "completed": false,
  "id": 11,
  "title": "aaaaa",
  "ut": 1489462550
}
11:36:38 完整请求
11:36:39 请求结束
11:36:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:36:39 path and query /api/todo/add {} 
11:36:40 完整请求
11:36:40 请求结束
11:36:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:36:40 path and query /api/todo/add {} 
11:36:41 完整请求
11:36:41 请求结束
11:36:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:36:41 path and query /api/todo/add {} {"title":"aaaaa"}
11:36:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462601,
  "completed": false,
  "id": 12,
  "title": "aaaaa",
  "ut": 1489462601
}
11:36:41 完整请求
11:36:41 请求结束
11:36:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:36:42 path and query /api/todo/add {} 
11:37:56 完整请求
11:37:57 请求结束
11:37:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:37:57 path and query /api/todo/delete {'id': '12'} 
11:37:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462601,
  "completed": false,
  "id": 12,
  "title": "aaaaa",
  "ut": 1489462601
}
11:37:59 完整请求
11:37:59 请求结束
11:37:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:37:59 path and query /api/todo/delete {'id': '11'} 
11:37:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462550,
  "completed": false,
  "id": 11,
  "title": "aaaaa",
  "ut": 1489462550
}
11:38:11 完整请求
11:38:11 请求结束
11:38:11 完整请求
11:38:11 请求结束
11:38:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:11 path and query /api/todo/update {} 
11:38:13 完整请求
11:38:13 请求结束
11:38:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:13 path and query /api/todo/update {} 
11:38:14 完整请求
11:38:14 请求结束
11:38:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:14 path and query /api/todo/update {} {"id":"10","title":"bbbbb"}
11:38:14 kwargs,  {'id': 10} <class 'dict'>
11:38:14 debug 6
11:38:14 完整请求
11:38:14 请求结束
11:38:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462079,
  "completed": false,
  "id": 10,
  "title": "bbbbb",
  "ut": 1489462694
}
11:38:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:14 path and query /api/todo/update {} {"id":"10","title":"bbbbb"}
11:38:14 kwargs,  {'id': 10} <class 'dict'>
11:38:14 debug 6
11:38:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1489462079,
  "completed": false,
  "id": 10,
  "title": "bbbbb",
  "ut": 1489462694
}
11:38:27 完整请求
11:38:27 请求结束
11:38:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:27 path and query /weibo/index {} 
11:38:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:38:28 完整请求
11:38:28 完整请求
11:38:28 请求结束
11:38:28 请求结束
11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 path and query /static {'file': 'gua.js'} 
11:38:28 path and query /static {'file': 'weibo.js'} 
11:38:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:38:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:38:28 完整请求
11:38:28 请求结束
11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 path and query /api/weibo/all {} 
11:38:28 kwargs,  {'weibo_id': 1} <class 'dict'>
11:38:28 kwargs,  {'weibo_id': 2} <class 'dict'>
11:38:28 kwargs,  {'weibo_id': 3} <class 'dict'>
11:38:28 完整请求
11:38:28 请求结束
11:38:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  }
]
11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 path and query /weibo/index {} 
11:38:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:38:28 完整请求
11:38:28 请求结束
11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 path and query /static {'file': 'gua.js'} 
11:38:28 完整请求
11:38:28 请求结束
11:38:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:38:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:28 path and query /static {'file': 'weibo.js'} 
11:38:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:38:29 完整请求
11:38:29 请求结束
11:38:29 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:29 path and query /api/weibo/all {} 
11:38:29 kwargs,  {'weibo_id': 1} <class 'dict'>
11:38:29 kwargs,  {'weibo_id': 2} <class 'dict'>
11:38:29 kwargs,  {'weibo_id': 3} <class 'dict'>
11:38:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  }
]
11:38:33 完整请求
11:38:33 请求结束
11:38:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:34 path and query /api/weibo/add {} 
11:38:35 完整请求
11:38:35 请求结束
11:38:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:38:35 path and query /api/weibo/add {} 
11:39:01 完整请求
11:39:02 请求结束
11:39:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:39:02 path and query /api/weibo/add {} {"title":"fdsfsdf"}
11:39:02 kwargs,  {'weibo_id': 4} <class 'dict'>
11:39:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "",
  "id": 4
}
11:39:02 完整请求
11:39:02 请求结束
11:39:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:39:02 path and query /api/weibo/add {} {"title":"fdsfsdf"}
11:39:02 kwargs,  {'weibo_id': 5} <class 'dict'>
11:39:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "",
  "id": 5
}
11:40:07 完整请求
11:40:07 请求结束
11:40:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:07 path and query /api/weibo/add {} 
11:40:08 完整请求
11:40:08 请求结束
11:40:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:09 path and query /api/weibo/add {} 
11:40:11 完整请求
11:40:12 请求结束
11:40:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:12 path and query /weibo/index {} 
11:40:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:40:12 完整请求
11:40:12 请求结束
11:40:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:12 path and query /static {'file': 'gua.js'} 
11:40:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:40:12 完整请求
11:40:12 请求结束
11:40:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:12 path and query /static {'file': 'weibo.js'} 
11:40:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    // bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:40:12 完整请求
11:40:12 请求结束
11:40:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:12 path and query /api/weibo/all {} 
11:40:12 kwargs,  {'weibo_id': 1} <class 'dict'>
11:40:12 kwargs,  {'weibo_id': 2} <class 'dict'>
11:40:13 kwargs,  {'weibo_id': 3} <class 'dict'>
11:40:13 kwargs,  {'weibo_id': 4} <class 'dict'>
11:40:13 kwargs,  {'weibo_id': 5} <class 'dict'>
11:40:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  }
]
11:40:16 完整请求
11:40:16 请求结束
11:40:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:17 path and query /api/weibo/add {} 
11:40:21 完整请求
11:40:21 请求结束
11:40:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:21 path and query /api/weibo/add {} 
11:40:35 完整请求
11:40:35 请求结束
11:40:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:35 path and query /api/weibo/add {} {"content":"fsdfdsa"}
11:40:35 kwargs,  {'weibo_id': 6} <class 'dict'>
11:40:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "fsdfdsa",
  "id": 6
}
11:40:36 完整请求
11:40:36 请求结束
11:40:36 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:36 path and query /api/weibo/add {} 
11:40:37 完整请求
11:40:37 请求结束
11:40:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:40:37 path and query /api/weibo/add {} {"content":"fsdfdsa"}
11:40:37 kwargs,  {'weibo_id': 7} <class 'dict'>
11:40:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "fsdfdsa",
  "id": 7
}
11:54:30 完整请求
11:54:30 请求结束
11:54:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:54:30 path and query /weibo/index {} 
11:54:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:54:30 完整请求
11:54:30 请求结束
11:54:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:54:30 path and query /static {'file': 'gua.js'} 
11:54:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:54:30 完整请求
11:54:30 请求结束
11:54:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:54:30 path and query /static {'file': 'weibo.js'} 
11:54:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:54:30 完整请求
11:54:31 请求结束
11:54:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:54:31 path and query /api/weibo/all {} 
11:54:31 kwargs,  {'weibo_id': 1} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 2} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 3} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 4} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 5} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 6} <class 'dict'>
11:54:31 kwargs,  {'weibo_id': 7} <class 'dict'>
11:54:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 7
  }
]
11:55:11 完整请求
11:55:12 请求结束
11:55:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:12 path and query /weibo/index {} 
11:55:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:55:12 完整请求
11:55:12 请求结束
11:55:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:12 path and query /static {'file': 'gua.js'} 
11:55:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:55:12 完整请求
11:55:12 请求结束
11:55:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:12 path and query /static {'file': 'weibo.js'} 
11:55:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:55:12 完整请求
11:55:12 请求结束
11:55:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:12 path and query /api/weibo/all {} 
11:55:12 kwargs,  {'weibo_id': 1} <class 'dict'>
11:55:12 kwargs,  {'weibo_id': 2} <class 'dict'>
11:55:12 kwargs,  {'weibo_id': 3} <class 'dict'>
11:55:13 kwargs,  {'weibo_id': 4} <class 'dict'>
11:55:13 kwargs,  {'weibo_id': 5} <class 'dict'>
11:55:13 kwargs,  {'weibo_id': 6} <class 'dict'>
11:55:13 kwargs,  {'weibo_id': 7} <class 'dict'>
11:55:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 7
  }
]
11:55:33 完整请求
11:55:33 请求结束
11:55:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:34 path and query /weibo/index {} 
11:55:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:55:34 完整请求
11:55:34 请求结束
11:55:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:34 path and query /static {'file': 'gua.js'} 
11:55:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

11:55:34 完整请求
11:55:34 请求结束
11:55:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:34 path and query /static {'file': 'weibo.js'} 
11:55:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:55:34 完整请求
11:55:34 请求结束
11:55:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:55:34 path and query /api/weibo/all {} 
11:55:34 kwargs,  {'weibo_id': 1} <class 'dict'>
11:55:34 kwargs,  {'weibo_id': 2} <class 'dict'>
11:55:34 kwargs,  {'weibo_id': 3} <class 'dict'>
11:55:34 kwargs,  {'weibo_id': 4} <class 'dict'>
11:55:35 kwargs,  {'weibo_id': 5} <class 'dict'>
11:55:35 kwargs,  {'weibo_id': 6} <class 'dict'>
11:55:35 kwargs,  {'weibo_id': 7} <class 'dict'>
11:55:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "comments": [],
    "content": "",
    "id": 4
  },
  {
    "comments": [],
    "content": "",
    "id": 5
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 7
  }
]
11:58:50 完整请求
11:58:50 请求结束
11:58:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:58:51 path and query /weibo/index {} 
11:58:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:58:51 完整请求
11:58:51 请求结束
11:58:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:58:51 path and query /static {'file': 'gua.js'} 
11:58:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
11:58:51 完整请求
11:58:51 请求结束
11:58:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:58:51 path and query /static {'file': 'weibo.js'} 
11:58:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

11:59:45 完整请求
11:59:45 请求结束
11:59:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:59:45 path and query /weibo/index {} 
11:59:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
11:59:45 完整请求
11:59:45 请求结束
11:59:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:59:45 path and query /static {'file': 'gua.js'} 
11:59:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
11:59:46 完整请求
11:59:46 请求结束
11:59:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
11:59:46 path and query /static {'file': 'weibo.js'} 
11:59:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:01:19 完整请求
12:01:19 请求结束
12:01:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:01:20 path and query /weibo/index {} 
12:01:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:01:20 完整请求
12:01:20 请求结束
12:01:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:01:20 path and query /static {'file': 'gua.js'} 
12:01:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
12:01:20 完整请求
12:01:20 请求结束
12:01:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:01:20 path and query /static {'file': 'weibo.js'} 
12:01:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:01:37 完整请求
12:01:37 请求结束
12:02:14 完整请求
12:02:14 请求结束
12:02:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:02:14 path and query /todo/index {} 
12:02:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:02:14 完整请求
12:02:14 完整请求
12:02:14 请求结束
12:02:14 请求结束
12:02:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:02:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:02:14 path and query /static {'file': 'gua.js'} 
12:02:14 path and query /static {'file': 'todo.js'} 
12:02:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
12:02:14 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:03:20 完整请求
12:03:20 完整请求
12:03:20 完整请求
12:03:20 请求结束
12:03:20 请求结束
12:03:20 请求结束
12:03:20 完整请求
12:03:20 请求结束
12:03:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:20 path and query /weibo/index {} 
12:03:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:03:21 完整请求
12:03:21 完整请求
12:03:21 请求结束
12:03:21 请求结束
12:03:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:21 path and query /static {'file': 'gua.js'} 
12:03:21 path and query /static {'file': 'weibo.js'} 
12:03:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:03:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:03:21 完整请求
12:03:21 请求结束
12:03:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:21 path and query /api/weibo/all {} 
12:03:21 kwargs,  {'weibo_id': 1} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 2} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 3} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 4} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 5} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 6} <class 'dict'>
12:03:21 kwargs,  {'weibo_id': 7} <class 'dict'>
12:03:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "id": 3,
        "user_id": 1
      },
      {
        "content": "123",
        "weibo_id": 2,
        "id": 4,
        "user_id": 1
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "id": 5,
        "user_id": 1
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 7,
        "user_id": 2
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:03:24 完整请求
12:03:24 请求结束
12:03:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:24 path and query /weibo/index {} 
12:03:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list"
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:03:24 完整请求
12:03:24 请求结束
12:03:25 完整请求
12:03:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:25 请求结束
12:03:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:25 path and query /static {'file': 'gua.js'} 
12:03:25 path and query /static {'file': 'weibo.js'} 
12:03:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:03:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:03:25 完整请求
12:03:25 请求结束
12:03:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:25 path and query /api/weibo/all {} 
12:03:25 kwargs,  {'weibo_id': 1} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 2} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 3} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 4} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 5} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 6} <class 'dict'>
12:03:25 kwargs,  {'weibo_id': 7} <class 'dict'>
12:03:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "id": 3,
        "user_id": 1
      },
      {
        "content": "123",
        "weibo_id": 2,
        "id": 4,
        "user_id": 1
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "id": 5,
        "user_id": 1
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 7,
        "user_id": 2
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:03:28 完整请求
12:03:28 请求结束
12:03:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:29 path and query /api/weibo/delete {'id': 'undefined'} 
12:03:29 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:03:30 完整请求
12:03:30 请求结束
12:03:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:03:30 path and query /api/weibo/delete {'id': 'undefined'} 
12:03:30 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:05:07 完整请求
12:05:07 请求结束
12:05:08 完整请求
12:05:08 请求结束
12:05:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:08 path and query /weibo/index {} 
12:05:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:05:08 完整请求
12:05:08 请求结束
12:05:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:08 path and query /static {'file': 'gua.js'} 
12:05:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:05:08 完整请求
12:05:08 请求结束
12:05:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:08 path and query /static {'file': 'weibo.js'} 
12:05:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
                <button class="Weibo-edit">编辑</button>
                <button class="Weibo-delete">删除</button>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:05:08 完整请求
12:05:08 请求结束
12:05:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:09 path and query /api/weibo/all {} 
12:05:09 kwargs,  {'weibo_id': 1} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 2} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 3} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 4} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 5} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 6} <class 'dict'>
12:05:09 kwargs,  {'weibo_id': 7} <class 'dict'>
12:05:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "id": 3,
        "user_id": 1
      },
      {
        "content": "123",
        "weibo_id": 2,
        "id": 4,
        "user_id": 1
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "id": 5,
        "user_id": 1
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 7,
        "user_id": 2
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:05:19 完整请求
12:05:19 请求结束
12:05:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:19 path and query /api/weibo/delete {'id': 'undefined'} 
12:05:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:05:20 完整请求
12:05:21 请求结束
12:05:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:05:21 path and query /api/weibo/delete {'id': 'undefined'} 
12:05:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:07:23 完整请求
12:07:23 请求结束
12:07:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:23 path and query /weibo/index {} 
12:07:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:07:23 完整请求
12:07:23 请求结束
12:07:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:23 path and query /static {'file': 'gua.js'} 
12:07:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:07:24 完整请求
12:07:24 请求结束
12:07:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:24 path and query /static {'file': 'weibo.js'} 
12:07:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:07:24 完整请求
12:07:24 请求结束
12:07:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:24 path and query /api/weibo/all {} 
12:07:24 kwargs,  {'weibo_id': 1} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 2} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 3} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 4} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 5} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 6} <class 'dict'>
12:07:24 kwargs,  {'weibo_id': 7} <class 'dict'>
12:07:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "id": 3,
        "user_id": 1
      },
      {
        "content": "123",
        "weibo_id": 2,
        "id": 4,
        "user_id": 1
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "id": 5,
        "user_id": 1
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 7,
        "user_id": 2
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:07:30 完整请求
12:07:30 请求结束
12:07:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:30 path and query /api/weibo/delete {'id': '5'} 
12:07:30 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:07:33 完整请求
12:07:33 请求结束
12:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:33 path and query /api/weibo/delete {'id': '4'} 
12:07:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:07:47 完整请求
12:07:47 请求结束
12:07:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:07:47 path and query /api/weibo/delete {'id': '3'} 
12:07:47 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:09:35 完整请求
12:09:35 请求结束
12:10:12 完整请求
12:10:12 请求结束
12:10:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:12 path and query /weibo/index {} 
12:10:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:10:12 完整请求
12:10:12 请求结束
12:10:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:12 path and query /static {'file': 'gua.js'} 
12:10:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:10:12 完整请求
12:10:12 请求结束
12:10:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:13 path and query /static {'file': 'weibo.js'} 
12:10:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:10:13 完整请求
12:10:13 请求结束
12:10:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:13 path and query /api/weibo/all {} 
12:10:13 kwargs,  {'weibo_id': 1} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 2} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 3} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 4} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 5} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 6} <class 'dict'>
12:10:13 kwargs,  {'weibo_id': 7} <class 'dict'>
12:10:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "id": 3,
        "user_id": 1
      },
      {
        "content": "123",
        "weibo_id": 2,
        "id": 4,
        "user_id": 1
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "id": 5,
        "user_id": 1
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 7,
        "user_id": 2
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:10:16 完整请求
12:10:16 请求结束
12:10:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:16 path and query /api/weibo/delete {'id': '4'} 
12:10:16 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:10:39 完整请求
12:10:39 请求结束
12:10:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:39 path and query /weibo/index {} 
12:10:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:10:39 完整请求
12:10:39 请求结束
12:10:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:39 path and query /static {'file': 'gua.js'} 
12:10:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:10:39 完整请求
12:10:39 请求结束
12:10:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:39 path and query /static {'file': 'weibo.js'} 
12:10:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:10:40 完整请求
12:10:40 请求结束
12:10:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:40 path and query /api/weibo/all {} 
12:10:40 kwargs,  {'weibo_id': 1} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 2} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 3} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 4} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 5} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 6} <class 'dict'>
12:10:40 kwargs,  {'weibo_id': 7} <class 'dict'>
12:10:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "weibo_id": 1
      },
      {
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right",
        "weibo_id": 1
      }
    ],
    "content": "hello tweet"
  },
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "content": "hello",
        "weibo_id": 2
      },
      {
        "id": 4,
        "user_id": 1,
        "content": "123",
        "weibo_id": 2
      },
      {
        "id": 5,
        "user_id": 1,
        "content": "asdf",
        "weibo_id": 2
      },
      {
        "id": 7,
        "user_id": 2,
        "content": "说得好",
        "weibo_id": 2
      },
      {
        "id": 8,
        "user_id": 2,
        "content": "说得好",
        "weibo_id": 2
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "content": "123",
        "weibo_id": 3
      }
    ],
    "content": "hahaha"
  },
  {
    "id": 4,
    "content": "",
    "comments": []
  },
  {
    "id": 5,
    "content": "",
    "comments": []
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "fsdfdsa",
    "comments": []
  }
]
12:10:42 完整请求
12:10:42 请求结束
12:10:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:42 path and query /api/weibo/delete {'id': '4'} 
12:10:42 kwargs,  {'weibo_id': 4} <class 'dict'>
12:10:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "",
  "comments": []
}
12:10:45 完整请求
12:10:45 请求结束
12:10:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:10:45 path and query /api/weibo/delete {'id': '5'} 
12:10:45 kwargs,  {'weibo_id': 5} <class 'dict'>
12:10:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "",
  "comments": []
}
12:26:48 完整请求
12:26:48 请求结束
12:33:51 完整请求
12:33:51 完整请求
12:33:51 完整请求
12:33:51 完整请求
12:33:51 完整请求
12:33:51 完整请求
12:33:51 请求结束
12:33:51 请求结束
12:33:51 请求结束
12:33:51 请求结束
12:33:51 请求结束
12:33:51 请求结束
12:37:43 完整请求
12:37:43 请求结束
12:37:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:37:43 path and query /weibo/index {} 
12:37:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:37:43 完整请求
12:37:43 请求结束
12:37:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:37:43 path and query /static {'file': 'gua.js'} 
12:37:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
12:37:43 完整请求
12:37:43 请求结束
12:37:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:37:43 path and query /static {'file': 'weibo.js'} 
12:37:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = '[WEIBO]:' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:38:08 完整请求
12:38:08 请求结束
12:38:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:38:08 path and query /weibo/index {} 
12:38:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:38:08 完整请求
12:38:08 请求结束
12:38:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:38:08 path and query /static {'file': 'gua.js'} 
12:38:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:38:08 完整请求
12:38:08 请求结束
12:38:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:38:08 path and query /static {'file': 'weibo.js'} 
12:38:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = '[WEIBO]:' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    // bindEventWeiboEdit()
    // dbindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:38:09 完整请求
12:38:09 请求结束
12:38:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:38:09 path and query /api/weibo/all {} 
12:38:09 kwargs,  {'weibo_id': 1} <class 'dict'>
12:38:09 kwargs,  {'weibo_id': 2} <class 'dict'>
12:38:09 kwargs,  {'weibo_id': 3} <class 'dict'>
12:38:09 kwargs,  {'weibo_id': 6} <class 'dict'>
12:38:09 kwargs,  {'weibo_id': 7} <class 'dict'>
12:38:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "id": 1,
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "content": "fsdfdsa"
  }
]
12:39:14 完整请求
12:39:14 请求结束
12:39:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:39:14 path and query /weibo/index {} 
12:39:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:39:14 完整请求
12:39:15 请求结束
12:39:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:39:15 path and query /static {'file': 'gua.js'} 
12:39:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:39:15 完整请求
12:39:15 请求结束
12:39:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:39:15 path and query /static {'file': 'weibo.js'} 
12:39:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = '[WEIBO]:' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:39:15 完整请求
12:39:15 请求结束
12:39:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:39:15 path and query /api/weibo/all {} 
12:39:15 kwargs,  {'weibo_id': 1} <class 'dict'>
12:39:15 kwargs,  {'weibo_id': 2} <class 'dict'>
12:39:15 kwargs,  {'weibo_id': 3} <class 'dict'>
12:39:15 kwargs,  {'weibo_id': 6} <class 'dict'>
12:39:15 kwargs,  {'weibo_id': 7} <class 'dict'>
12:39:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha"
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:39:28 完整请求
12:39:28 请求结束
12:39:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:39:28 path and query /api/weibo/update {} 
12:40:16 完整请求
12:40:16 请求结束
12:40:16 完整请求
12:40:16 请求结束
12:40:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:16 path and query /api/weibo/update {} 
12:40:39 完整请求
12:40:39 请求结束
12:40:40 完整请求
12:40:40 请求结束
12:40:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:40 path and query /weibo/index {} 
12:40:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:40:40 完整请求
12:40:40 请求结束
12:40:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:40 path and query /static {'file': 'gua.js'} 
12:40:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:40:40 完整请求
12:40:40 请求结束
12:40:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:40 path and query /static {'file': 'weibo.js'} 
12:40:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = '[WEIBO]:' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:40:40 完整请求
12:40:40 请求结束
12:40:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:41 path and query /api/weibo/all {} 
12:40:41 kwargs,  {'weibo_id': 1} <class 'dict'>
12:40:41 kwargs,  {'weibo_id': 2} <class 'dict'>
12:40:41 kwargs,  {'weibo_id': 3} <class 'dict'>
12:40:41 kwargs,  {'weibo_id': 6} <class 'dict'>
12:40:41 kwargs,  {'weibo_id': 7} <class 'dict'>
12:40:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha"
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "fsdfdsa",
    "id": 7,
    "comments": []
  }
]
12:40:56 完整请求
12:40:56 请求结束
12:40:56 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:56 path and query /api/weibo/update {} 
12:40:57 完整请求
12:40:57 请求结束
12:40:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:40:57 path and query /api/weibo/update {} 
12:41:01 完整请求
12:41:01 请求结束
12:41:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:41:01 path and query /api/weibo/update {} {"id":"7","content":"alalallalala"}
12:41:01 kwargs,  {'id': 7} <class 'dict'>
12:41:01 完整请求
12:41:01 请求结束
12:41:01 debug 4
12:41:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:41:01 kwargs,  {'weibo_id': 7} <class 'dict'>
12:41:01 path and query /api/weibo/update {} 
12:41:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "alalallalala",
  "id": 7,
  "comments": [],
  "ut": 1489466461
}
12:42:15 完整请求
12:42:15 请求结束
12:42:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:15 path and query /weibo/index {} 
12:42:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:42:15 完整请求
12:42:15 请求结束
12:42:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:15 path and query /static {'file': 'gua.js'} 
12:42:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:42:16 完整请求
12:42:16 请求结束
12:42:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:16 path and query /static {'file': 'weibo.js'} 
12:42:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                var new_content = '[WEIBO]:' + Weibo.content
                contentSpan.innerHTML = new_content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:42:16 完整请求
12:42:16 请求结束
12:42:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:16 path and query /api/weibo/all {} 
12:42:16 kwargs,  {'weibo_id': 1} <class 'dict'>
12:42:16 kwargs,  {'weibo_id': 2} <class 'dict'>
12:42:16 kwargs,  {'weibo_id': 3} <class 'dict'>
12:42:17 kwargs,  {'weibo_id': 6} <class 'dict'>
12:42:17 kwargs,  {'weibo_id': 7} <class 'dict'>
12:42:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "user_id": 1,
    "content": "hello tweet",
    "id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "user_id": 1,
    "content": "你好",
    "id": 2
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "user_id": 1,
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "id": 7,
    "comments": [],
    "content": "alalallalala",
    "ut": 1489466461
  }
]
12:42:22 完整请求
12:42:22 请求结束
12:42:22 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:22 path and query /api/weibo/update {} 
12:42:27 完整请求
12:42:27 请求结束
12:42:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:27 path and query /api/weibo/update {} {"id":"7","content":"发送扥三扥"}
12:42:27 kwargs,  {'id': 7} <class 'dict'>
12:42:27 完整请求
12:42:27 请求结束
12:42:27 debug 4
12:42:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:42:27 kwargs,  {'weibo_id': 7} <class 'dict'>
12:42:27 path and query /api/weibo/update {} {"id":"7","content":"发送扥三扥"}
12:42:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "发送扥三扥",
  "ut": 1489466547
}
12:42:27 kwargs,  {'id': 7} <class 'dict'>
12:42:27 debug 4
12:42:27 kwargs,  {'weibo_id': 7} <class 'dict'>
12:42:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "发送扥三扥",
  "ut": 1489466547
}
12:44:12 完整请求
12:44:12 请求结束
12:44:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:13 path and query /weibo/index {} 
12:44:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:44:13 完整请求
12:44:13 请求结束
12:44:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:13 path and query /static {'file': 'gua.js'} 
12:44:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:44:13 完整请求
12:44:13 请求结束
12:44:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:13 path and query /static {'file': 'weibo.js'} 
12:44:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:44:14 完整请求
12:44:14 请求结束
12:44:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:14 path and query /api/weibo/all {} 
12:44:14 kwargs,  {'weibo_id': 1} <class 'dict'>
12:44:14 kwargs,  {'weibo_id': 2} <class 'dict'>
12:44:14 kwargs,  {'weibo_id': 3} <class 'dict'>
12:44:14 kwargs,  {'weibo_id': 6} <class 'dict'>
12:44:14 kwargs,  {'weibo_id': 7} <class 'dict'>
12:44:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "id": 1,
        "weibo_id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "id": 3,
        "weibo_id": 2
      },
      {
        "content": "123",
        "user_id": 1,
        "id": 4,
        "weibo_id": 2
      },
      {
        "content": "asdf",
        "user_id": 1,
        "id": 5,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "user_id": 2,
        "id": 7,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "user_id": 2,
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "id": 6,
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "comments": [],
    "content": "发送扥三扥",
    "ut": 1489466547
  }
]
12:44:19 完整请求
12:44:19 请求结束
12:44:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:19 path and query /api/weibo/update {} 
12:44:19 完整请求
12:44:19 请求结束
12:44:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:20 path and query /api/weibo/update {} {"id":"7","content":"方森森"}
12:44:20 完整请求
12:44:20 请求结束
12:44:20 kwargs,  {'id': 7} <class 'dict'>
12:44:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:20 debug 4
12:44:20 path and query /api/weibo/update {} 
12:44:20 kwargs,  {'weibo_id': 7} <class 'dict'>
12:44:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "方森森",
  "ut": 1489466660
}
12:44:37 完整请求
12:44:37 请求结束
12:44:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:37 path and query /api/weibo/update {} {"id":"7","content":"方森森"}
12:44:37 kwargs,  {'id': 7} <class 'dict'>
12:44:37 debug 4
12:44:37 kwargs,  {'weibo_id': 7} <class 'dict'>
12:44:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "方森森",
  "ut": 1489466677
}
12:44:38 完整请求
12:44:39 请求结束
12:44:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:39 path and query /api/weibo/update {} 
12:44:40 完整请求
12:44:40 请求结束
12:44:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:40 path and query /api/weibo/update {} 
12:44:42 完整请求
12:44:42 请求结束
12:44:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:42 path and query /api/weibo/update {} {"id":"7","content":"方森森"}
12:44:42 kwargs,  {'id': 7} <class 'dict'>
12:44:42 debug 4
12:44:43 完整请求
12:44:43 请求结束
12:44:43 kwargs,  {'weibo_id': 7} <class 'dict'>
12:44:43 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:44:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "方森森",
  "ut": 1489466682
}
12:44:43 path and query /api/weibo/update {} 
12:45:30 完整请求
12:45:30 请求结束
12:45:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:30 path and query /weibo/index {} 
12:45:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:45:30 完整请求
12:45:30 请求结束
12:45:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:30 path and query /static {'file': 'gua.js'} 
12:45:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:45:30 完整请求
12:45:31 请求结束
12:45:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:31 path and query /static {'file': 'weibo.js'} 
12:45:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:45:31 完整请求
12:45:31 请求结束
12:45:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:31 path and query /api/weibo/all {} 
12:45:31 kwargs,  {'weibo_id': 1} <class 'dict'>
12:45:31 kwargs,  {'weibo_id': 2} <class 'dict'>
12:45:31 kwargs,  {'weibo_id': 3} <class 'dict'>
12:45:31 kwargs,  {'weibo_id': 6} <class 'dict'>
12:45:31 kwargs,  {'weibo_id': 7} <class 'dict'>
12:45:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "id": 1,
    "content": "hello tweet"
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好"
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha"
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "方森森",
    "comments": [],
    "ut": 1489466682
  }
]
12:45:37 完整请求
12:45:37 请求结束
12:45:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:37 path and query /api/weibo/update {} 
12:45:44 完整请求
12:45:44 请求结束
12:45:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:44 path and query /api/weibo/update {} 
12:45:47 完整请求
12:45:47 请求结束
12:45:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:48 path and query /api/weibo/update {} {"id":"7","content":"发送扥三扥"}
12:45:48 kwargs,  {'id': 7} <class 'dict'>
12:45:48 debug 4
12:45:48 完整请求
12:45:48 请求结束
12:45:48 kwargs,  {'weibo_id': 7} <class 'dict'>
12:45:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:45:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "发送扥三扥",
  "comments": [],
  "ut": 1489466748
}
12:45:48 path and query /api/weibo/update {} {"id":"7","content":"发送扥三扥"}
12:45:48 kwargs,  {'id': 7} <class 'dict'>
12:45:48 debug 4
12:45:48 kwargs,  {'weibo_id': 7} <class 'dict'>
12:45:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "发送扥三扥",
  "comments": [],
  "ut": 1489466748
}
12:46:15 完整请求
12:46:15 请求结束
12:46:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:15 path and query /weibo/index {} 
12:46:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:46:16 完整请求
12:46:16 请求结束
12:46:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:16 path and query /static {'file': 'gua.js'} 
12:46:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
12:46:16 完整请求
12:46:16 请求结束
12:46:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:16 path and query /static {'file': 'weibo.js'} 
12:46:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:46:16 完整请求
12:46:16 请求结束
12:46:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:17 path and query /api/weibo/all {} 
12:46:17 kwargs,  {'weibo_id': 1} <class 'dict'>
12:46:17 kwargs,  {'weibo_id': 2} <class 'dict'>
12:46:17 kwargs,  {'weibo_id': 3} <class 'dict'>
12:46:17 kwargs,  {'weibo_id': 6} <class 'dict'>
12:46:17 kwargs,  {'weibo_id': 7} <class 'dict'>
12:46:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "comments": [],
    "ut": 1489466748,
    "content": "发送扥三扥"
  }
]
12:46:30 完整请求
12:46:30 请求结束
12:46:30 完整请求
12:46:30 请求结束
12:46:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:30 path and query /api/weibo/update {} 
12:46:36 完整请求
12:46:36 请求结束
12:46:36 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:36 path and query /api/weibo/update {} 
12:46:39 完整请求
12:46:39 请求结束
12:46:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:39 path and query /api/weibo/update {} {"id":"7","content":"粉丝扥东"}
12:46:39 kwargs,  {'id': 7} <class 'dict'>
12:46:39 debug 4
12:46:39 完整请求
12:46:39 请求结束
12:46:39 kwargs,  {'weibo_id': 7} <class 'dict'>
12:46:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
12:46:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "ut": 1489466799,
  "content": "粉丝扥东"
}
12:46:39 path and query /api/weibo/update {} {"id":"7","content":"粉丝扥东"}
12:46:39 kwargs,  {'id': 7} <class 'dict'>
12:46:39 debug 4
12:46:39 kwargs,  {'weibo_id': 7} <class 'dict'>
12:46:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "ut": 1489466799,
  "content": "粉丝扥东"
}
14:52:12 完整请求
14:52:12 请求结束
14:52:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:12 path and query /weibo/index {} 
14:52:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:52:12 完整请求
14:52:12 请求结束
14:52:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:12 path and query /static {'file': 'gua.js'} 
14:52:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:52:12 完整请求
14:52:12 请求结束
14:52:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:12 path and query /static {'file': 'weibo.js'} 
14:52:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:52:13 完整请求
14:52:13 请求结束
14:52:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:13 path and query /api/weibo/all {} 
14:52:13 kwargs,  {'weibo_id': 1} <class 'dict'>
14:52:13 kwargs,  {'weibo_id': 2} <class 'dict'>
14:52:13 kwargs,  {'weibo_id': 3} <class 'dict'>
14:52:13 kwargs,  {'weibo_id': 6} <class 'dict'>
14:52:13 kwargs,  {'weibo_id': 7} <class 'dict'>
14:52:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "comments": [],
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
14:52:27 完整请求
14:52:27 请求结束
14:52:34 完整请求
14:52:34 请求结束
14:52:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:34 path and query /weibo/index {} 
14:52:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:52:34 完整请求
14:52:34 请求结束
14:52:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:35 path and query /static {'file': 'gua.js'} 
14:52:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:52:35 完整请求
14:52:35 请求结束
14:52:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:35 path and query /static {'file': 'weibo.js'} 
14:52:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:52:35 完整请求
14:52:35 请求结束
14:52:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:52:35 path and query /api/weibo/all {} 
14:52:36 kwargs,  {'weibo_id': 1} <class 'dict'>
14:52:36 kwargs,  {'weibo_id': 2} <class 'dict'>
14:52:36 kwargs,  {'weibo_id': 3} <class 'dict'>
14:52:36 kwargs,  {'weibo_id': 6} <class 'dict'>
14:52:36 kwargs,  {'weibo_id': 7} <class 'dict'>
14:52:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
14:52:47 完整请求
14:52:47 请求结束
14:54:16 完整请求
14:54:16 请求结束
14:54:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:16 path and query /weibo/index {} 
14:54:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:54:16 完整请求
14:54:16 请求结束
14:54:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:16 path and query /static {'file': 'gua.js'} 
14:54:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:54:16 完整请求
14:54:16 请求结束
14:54:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:16 path and query /static {'file': 'weibo.js'} 
14:54:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            WeiboCell.remove
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:54:17 完整请求
14:54:17 请求结束
14:54:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:17 path and query /api/weibo/all {} 
14:54:17 kwargs,  {'weibo_id': 1} <class 'dict'>
14:54:17 kwargs,  {'weibo_id': 2} <class 'dict'>
14:54:17 kwargs,  {'weibo_id': 3} <class 'dict'>
14:54:17 kwargs,  {'weibo_id': 6} <class 'dict'>
14:54:17 kwargs,  {'weibo_id': 7} <class 'dict'>
14:54:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
14:54:25 完整请求
14:54:25 请求结束
14:54:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:25 path and query /api/weibo/update {} 
14:54:28 完整请求
14:54:28 请求结束
14:54:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:28 path and query /api/weibo/update {} {"id":"1","content":"发动反思"}
14:54:28 kwargs,  {'id': 1} <class 'dict'>
14:54:28 完整请求
14:54:28 请求结束
14:54:28 debug 0
14:54:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:54:28 kwargs,  {'weibo_id': 1} <class 'dict'>
14:54:28 path and query /api/weibo/update {} {"id":"1","content":"发动反思"}
14:54:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "发动反思",
  "ut": 1489474468,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2
    },
    {
      "id": 2,
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1
    }
  ],
  "user_id": 1
}
14:54:28 kwargs,  {'id': 1} <class 'dict'>
14:54:28 debug 0
14:54:28 kwargs,  {'weibo_id': 1} <class 'dict'>
14:54:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "发动反思",
  "ut": 1489474468,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2
    },
    {
      "id": 2,
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1
    }
  ],
  "user_id": 1
}
14:56:17 完整请求
14:56:17 请求结束
14:56:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:56:17 path and query /weibo/index {} 
14:56:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:56:17 完整请求
14:56:17 请求结束
14:56:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:56:17 path and query /static {'file': 'gua.js'} 
14:56:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:56:17 完整请求
14:56:17 请求结束
14:56:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:56:18 path and query /static {'file': 'weibo.js'} 
14:56:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:56:18 完整请求
14:56:18 请求结束
14:56:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:56:18 path and query /api/weibo/all {} 
14:56:18 kwargs,  {'weibo_id': 1} <class 'dict'>
14:56:18 kwargs,  {'weibo_id': 2} <class 'dict'>
14:56:18 kwargs,  {'weibo_id': 3} <class 'dict'>
14:56:18 kwargs,  {'weibo_id': 6} <class 'dict'>
14:56:19 kwargs,  {'weibo_id': 7} <class 'dict'>
14:56:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "发动反思",
    "ut": 1489474468,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
14:56:32 完整请求
14:56:32 请求结束
14:58:09 完整请求
14:58:09 请求结束
14:58:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:10 path and query /weibo/index {} 
14:58:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:58:10 完整请求
14:58:10 请求结束
14:58:10 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:10 path and query /static {'file': 'gua.js'} 
14:58:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:58:10 完整请求
14:58:10 请求结束
14:58:10 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:10 path and query /static {'file': 'weibo.js'} 
14:58:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class=`Weibo-content`>
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:58:37 完整请求
14:58:37 请求结束
14:58:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:37 path and query /weibo/index {} 
14:58:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:58:37 完整请求
14:58:37 请求结束
14:58:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:37 path and query /static {'file': 'gua.js'} 
14:58:37 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:58:37 完整请求
14:58:37 请求结束
14:58:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:38 path and query /static {'file': 'weibo.js'} 
14:58:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">更新</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:58:38 完整请求
14:58:38 请求结束
14:58:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:58:38 path and query /api/weibo/all {} 
14:58:38 kwargs,  {'weibo_id': 1} <class 'dict'>
14:58:38 kwargs,  {'weibo_id': 2} <class 'dict'>
14:58:38 kwargs,  {'weibo_id': 3} <class 'dict'>
14:58:38 kwargs,  {'weibo_id': 6} <class 'dict'>
14:58:38 kwargs,  {'weibo_id': 7} <class 'dict'>
14:58:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "发动反思",
    "ut": 1489474468,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
14:59:02 完整请求
14:59:02 请求结束
14:59:02 完整请求
14:59:03 请求结束
14:59:03 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:03 path and query /weibo/index {} 
14:59:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:59:03 完整请求
14:59:03 请求结束
14:59:03 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:03 path and query /static {'file': 'gua.js'} 
14:59:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:59:03 完整请求
14:59:03 请求结束
14:59:03 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:03 path and query /static {'file': 'weibo.js'} 
14:59:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:59:04 完整请求
14:59:04 请求结束
14:59:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:04 path and query /api/weibo/all {} 
14:59:04 kwargs,  {'weibo_id': 1} <class 'dict'>
14:59:04 kwargs,  {'weibo_id': 2} <class 'dict'>
14:59:04 kwargs,  {'weibo_id': 3} <class 'dict'>
14:59:04 kwargs,  {'weibo_id': 6} <class 'dict'>
14:59:04 kwargs,  {'weibo_id': 7} <class 'dict'>
14:59:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "发动反思",
    "ut": 1489474468,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
14:59:39 完整请求
14:59:39 请求结束
14:59:39 完整请求
14:59:39 请求结束
14:59:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:39 path and query /weibo/index {} 
14:59:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:59:39 完整请求
14:59:39 请求结束
14:59:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:39 path and query /static {'file': 'gua.js'} 
14:59:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
14:59:40 完整请求
14:59:40 请求结束
14:59:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:40 path and query /static {'file': 'weibo.js'} 
14:59:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:59:40 完整请求
14:59:40 请求结束
14:59:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
14:59:40 path and query /api/weibo/all {} 
14:59:40 kwargs,  {'weibo_id': 1} <class 'dict'>
14:59:41 kwargs,  {'weibo_id': 2} <class 'dict'>
14:59:41 kwargs,  {'weibo_id': 3} <class 'dict'>
14:59:41 kwargs,  {'weibo_id': 6} <class 'dict'>
14:59:41 kwargs,  {'weibo_id': 7} <class 'dict'>
14:59:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "发动反思",
    "ut": 1489474468,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
15:00:22 完整请求
15:00:22 请求结束
15:00:22 完整请求
15:00:22 请求结束
15:00:22 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:22 path and query /weibo/index {} 
15:00:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:00:23 完整请求
15:00:23 请求结束
15:00:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:23 path and query /static {'file': 'gua.js'} 
15:00:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:00:23 完整请求
15:00:23 请求结束
15:00:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:23 path and query /static {'file': 'weibo.js'} 
15:00:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="Weibo-content">
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:00:23 完整请求
15:00:23 请求结束
15:00:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:24 path and query /api/weibo/all {} 
15:00:24 kwargs,  {'weibo_id': 1} <class 'dict'>
15:00:24 kwargs,  {'weibo_id': 2} <class 'dict'>
15:00:24 kwargs,  {'weibo_id': 3} <class 'dict'>
15:00:24 kwargs,  {'weibo_id': 6} <class 'dict'>
15:00:24 kwargs,  {'weibo_id': 7} <class 'dict'>
15:00:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "发动反思",
    "ut": 1489474468,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
15:00:30 完整请求
15:00:30 请求结束
15:00:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:30 path and query /api/weibo/update {} 
15:00:32 完整请求
15:00:32 请求结束
15:00:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:32 path and query /api/weibo/update {} {"id":"1","content":"扥森as"}
15:00:32 kwargs,  {'id': 1} <class 'dict'>
15:00:32 完整请求
15:00:32 请求结束
15:00:32 debug 0
15:00:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:32 kwargs,  {'weibo_id': 1} <class 'dict'>
15:00:32 path and query /api/weibo/update {} 
15:00:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "扥森as",
  "ut": 1489474832,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2
    },
    {
      "id": 2,
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1
    }
  ],
  "user_id": 1
}
15:00:33 完整请求
15:00:33 请求结束
15:00:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:33 path and query /api/weibo/update {} {"id":"1","content":"扥森as"}
15:00:33 kwargs,  {'id': 1} <class 'dict'>
15:00:33 debug 0
15:00:33 kwargs,  {'weibo_id': 1} <class 'dict'>
15:00:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "扥森as",
  "ut": 1489474833,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2
    },
    {
      "id": 2,
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1
    }
  ],
  "user_id": 1
}
15:00:34 完整请求
15:00:34 请求结束
15:00:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:34 path and query /api/weibo/update {} 
15:00:38 完整请求
15:00:38 请求结束
15:00:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:00:39 path and query /api/weibo/update {} 
15:03:07 完整请求
15:03:07 请求结束
15:03:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:07 path and query /weibo/index {} 
15:03:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:03:07 完整请求
15:03:07 请求结束
15:03:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:08 path and query /static {'file': 'gua.js'} 
15:03:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:03:08 完整请求
15:03:08 请求结束
15:03:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:08 path and query /static {'file': 'weibo.js'} 
15:03:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: <span class="Weibo-content">${content}</span>
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                log('cell', WeiboCell)
                log('content', Weibo.content)
                var contentSpan = WeiboCell.querySelector('.Weibo-content')
                contentSpan.innerHTML = Weibo.content

//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:03:08 完整请求
15:03:08 请求结束
15:03:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:08 path and query /api/weibo/all {} 
15:03:09 kwargs,  {'weibo_id': 1} <class 'dict'>
15:03:09 kwargs,  {'weibo_id': 2} <class 'dict'>
15:03:09 kwargs,  {'weibo_id': 3} <class 'dict'>
15:03:09 kwargs,  {'weibo_id': 6} <class 'dict'>
15:03:09 kwargs,  {'weibo_id': 7} <class 'dict'>
15:03:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "扥森as",
    "ut": 1489474833,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "id": 2,
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1
      },
      {
        "id": 4,
        "weibo_id": 2,
        "content": "123",
        "user_id": 1
      },
      {
        "id": 5,
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1
      },
      {
        "id": 7,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      },
      {
        "id": 8,
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "content": "123",
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "content": "粉丝扥东",
    "ut": 1489466799,
    "comments": []
  }
]
15:03:16 完整请求
15:03:16 请求结束
15:03:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:16 path and query /api/weibo/update {} 
15:03:19 完整请求
15:03:19 请求结束
15:03:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:19 path and query /api/weibo/update {} {"id":"1","content":"发动反思的"}
15:03:19 kwargs,  {'id': 1} <class 'dict'>
15:03:19 完整请求
15:03:19 请求结束
15:03:19 debug 0
15:03:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:03:19 kwargs,  {'weibo_id': 1} <class 'dict'>
15:03:19 path and query /api/weibo/update {} 
15:03:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "发动反思的",
  "ut": 1489474999,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2
    },
    {
      "id": 2,
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1
    }
  ],
  "user_id": 1
}
15:08:34 完整请求
15:08:35 请求结束
15:08:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:08:35 path and query /weibo/index {} 
15:08:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:08:35 完整请求
15:08:35 请求结束
15:08:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:08:35 path and query /static {'file': 'gua.js'} 
15:08:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:08:35 完整请求
15:08:35 请求结束
15:08:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:08:35 path and query /static {'file': 'weibo.js'} 
15:08:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var edit-form = e.('.Weibo-edit-form')
                edit-form.remove()
                form = '
                    <div class="Weibo-content">
                        [WEIBO]: ${Weibo.content}
                    </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:09:12 完整请求
15:09:12 请求结束
15:09:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:12 path and query /weibo/index {} 
15:09:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:09:13 完整请求
15:09:13 请求结束
15:09:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:13 path and query /static {'file': 'gua.js'} 
15:09:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:09:13 完整请求
15:09:13 请求结束
15:09:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:13 path and query /static {'file': 'weibo.js'} 
15:09:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e.('.Weibo-edit-form')
                editForm.remove()
                form = '
                    <div class="Weibo-content">
                        [WEIBO]: ${Weibo.content}
                    </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:09:47 完整请求
15:09:47 请求结束
15:09:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:47 path and query /weibo/index {} 
15:09:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:09:47 完整请求
15:09:47 请求结束
15:09:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:47 path and query /static {'file': 'gua.js'} 
15:09:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:09:48 完整请求
15:09:48 请求结束
15:09:48 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:09:48 path and query /static {'file': 'weibo.js'} 
15:09:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e.(.Weibo-edit-form')
                editForm.remove()
                form = '
                    <div class="Weibo-content">
                        [WEIBO]: ${Weibo.content}
                    </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:10:04 完整请求
15:10:04 请求结束
15:10:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:05 path and query /weibo/index {} 
15:10:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:10:05 完整请求
15:10:05 请求结束
15:10:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:05 path and query /static {'file': 'gua.js'} 
15:10:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:10:05 完整请求
15:10:05 请求结束
15:10:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:05 path and query /static {'file': 'weibo.js'} 
15:10:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e.('.Weibo-edit-form')
                editForm.remove()
                form = '
                    <div class="Weibo-content">
                        [WEIBO]: ${Weibo.content}
                    </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:10:52 完整请求
15:10:52 请求结束
15:10:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:52 path and query /weibo/index {} 
15:10:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:10:52 完整请求
15:10:52 请求结束
15:10:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:52 path and query /static {'file': 'gua.js'} 
15:10:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:10:52 完整请求
15:10:52 请求结束
15:10:52 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:10:53 path and query /static {'file': 'weibo.js'} 
15:10:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                form = '
                    <div class="Weibo-content">
                        [WEIBO]: ${Weibo.content}
                    </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:11:17 完整请求
15:11:18 请求结束
15:11:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:18 path and query /weibo/index {} 
15:11:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:11:18 完整请求
15:11:18 请求结束
15:11:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:18 path and query /static {'file': 'gua.js'} 
15:11:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:11:18 完整请求
15:11:18 请求结束
15:11:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:18 path and query /static {'file': 'weibo.js'} 
15:11:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var form = '
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', form)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:53 path and query /weibo/index {} 
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:53 path and query /static {'file': 'gua.js'} 
15:11:53 完整请求
15:11:53 请求结束
15:11:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:11:54 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:11:54 path and query /static {'file': 'weibo.js'} 
15:11:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = '
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                '
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:12:37 完整请求
15:12:38 请求结束
15:12:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:38 path and query /weibo/index {} 
15:12:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:12:38 完整请求
15:12:38 请求结束
15:12:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:38 path and query /static {'file': 'gua.js'} 
15:12:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
15:12:38 完整请求
15:12:38 请求结束
15:12:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:38 path and query /static {'file': 'weibo.js'} 
15:12:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:12:39 完整请求
15:12:39 请求结束
15:12:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:39 path and query /api/weibo/all {} 
15:12:39 kwargs,  {'weibo_id': 1} <class 'dict'>
15:12:39 kwargs,  {'weibo_id': 2} <class 'dict'>
15:12:39 kwargs,  {'weibo_id': 3} <class 'dict'>
15:12:39 kwargs,  {'weibo_id': 6} <class 'dict'>
15:12:39 kwargs,  {'weibo_id': 7} <class 'dict'>
15:12:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489474999,
    "content": "发动反思的",
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "id": 1
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "user_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "id": 1
  },
  {
    "content": "你好",
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1,
        "id": 3
      },
      {
        "weibo_id": 2,
        "content": "123",
        "user_id": 1,
        "id": 4
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1,
        "id": 5
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 7
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "user_id": 1,
        "id": 6
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "content": "fsdfdsa",
    "comments": [],
    "id": 6
  },
  {
    "ut": 1489466799,
    "content": "粉丝扥东",
    "comments": [],
    "id": 7
  }
]
15:12:44 完整请求
15:12:44 请求结束
15:12:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:44 path and query /api/weibo/update {} 
15:12:46 完整请求
15:12:46 请求结束
15:12:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:46 path and query /api/weibo/update {} {"id":"1","content":"发送扥东发动"}
15:12:47 kwargs,  {'id': 1} <class 'dict'>
15:12:47 完整请求
15:12:47 请求结束
15:12:47 debug 0
15:12:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:12:47 kwargs,  {'weibo_id': 1} <class 'dict'>
15:12:47 path and query /api/weibo/update {} 
15:12:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1489475567,
  "content": "发送扥东发动",
  "comments": [
    {
      "weibo_id": 1,
      "content": "楼主说得对",
      "user_id": 2,
      "id": 1
    },
    {
      "weibo_id": 1,
      "content": "lbvu is right",
      "user_id": 1,
      "id": 2
    }
  ],
  "user_id": 1,
  "id": 1
}
15:23:15 完整请求
15:23:15 请求结束
15:23:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:23:15 path and query /weibo/index {} 
15:23:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:23:16 完整请求
15:23:16 完整请求
15:23:16 请求结束
15:23:16 请求结束
15:23:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:23:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
15:23:16 path and query /static {'file': 'gua.js'} 
15:23:16 path and query /static {'file': 'weibo.js'} 
15:23:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(cell) {
    // 插入 comment
    var comment = `
            <div>
                ${c.content}
            </div>
        `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-i')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:23:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}
16:14:05 完整请求
16:14:06 请求结束
16:14:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:14:06 path and query /weibo/index {} 
16:14:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:14:06 完整请求
16:14:06 请求结束
16:14:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:14:06 path and query /static {'file': 'gua.js'} 
16:14:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:14:06 完整请求
16:14:06 请求结束
16:14:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:14:06 path and query /static {'file': 'weibo.js'} 
16:14:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${c.content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:14:07 完整请求
16:14:07 请求结束
16:14:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:14:07 path and query /api/weibo/all {} 
16:14:07 kwargs,  {'weibo_id': 1} <class 'dict'>
16:14:07 kwargs,  {'weibo_id': 2} <class 'dict'>
16:14:07 kwargs,  {'weibo_id': 3} <class 'dict'>
16:14:07 kwargs,  {'weibo_id': 6} <class 'dict'>
16:14:07 kwargs,  {'weibo_id': 7} <class 'dict'>
16:14:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ]
  },
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello"
      },
      {
        "id": 4,
        "weibo_id": 2,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 5,
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "id": 7,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "user_id": 1,
        "content": "123"
      }
    ]
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东",
    "comments": []
  }
]
16:14:12 完整请求
16:14:12 请求结束
16:14:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:14:12 path and query /api/comment/add {} 
16:14:12 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:16:41 完整请求
16:16:41 请求结束
16:16:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:16:41 path and query /weibo/index {} 
16:16:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:16:41 完整请求
16:16:41 请求结束
16:16:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:16:41 path and query /static {'file': 'gua.js'} 
16:16:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:16:41 完整请求
16:16:41 请求结束
16:16:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:16:41 path and query /static {'file': 'weibo.js'} 
16:16:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${c.content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:16:42 完整请求
16:16:42 请求结束
16:16:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:16:42 path and query /api/weibo/all {} 
16:16:42 kwargs,  {'weibo_id': 1} <class 'dict'>
16:16:42 kwargs,  {'weibo_id': 2} <class 'dict'>
16:16:42 kwargs,  {'weibo_id': 3} <class 'dict'>
16:16:43 kwargs,  {'weibo_id': 6} <class 'dict'>
16:16:43 kwargs,  {'weibo_id': 7} <class 'dict'>
16:16:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "user_id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ]
  },
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello"
      },
      {
        "id": 4,
        "weibo_id": 2,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 5,
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "id": 7,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "user_id": 1,
        "content": "123"
      }
    ]
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东",
    "comments": []
  }
]
16:16:59 完整请求
16:16:59 请求结束
16:16:59 完整请求
16:16:59 请求结束
16:16:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:16:59 path and query /api/comment/add {} 
16:16:59 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:17:03 完整请求
16:17:03 请求结束
16:17:03 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:17:03 path and query /api/comment/add {} 
16:17:03 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:05 path and query /weibo/index {} 
16:20:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:05 path and query /static {'file': 'gua.js'} 
16:20:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:20:05 完整请求
16:20:05 请求结束
16:20:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:05 path and query /static {'file': 'weibo.js'} 
16:20:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${c.content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:20:06 完整请求
16:20:06 请求结束
16:20:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:06 path and query /api/weibo/all {} 
16:20:06 kwargs,  {'weibo_id': 1} <class 'dict'>
16:20:06 kwargs,  {'weibo_id': 2} <class 'dict'>
16:20:06 kwargs,  {'weibo_id': 3} <class 'dict'>
16:20:06 kwargs,  {'weibo_id': 6} <class 'dict'>
16:20:06 kwargs,  {'weibo_id': 7} <class 'dict'>
16:20:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489475567,
    "id": 1,
    "content": "发送扥东发动",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "ut": 1489466799,
    "id": 7,
    "content": "粉丝扥东",
    "comments": []
  }
]
16:20:08 完整请求
16:20:08 请求结束
16:20:08 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:08 path and query /api/comment/add {} 
16:20:08 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:10 完整请求
16:20:10 请求结束
16:20:10 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:20:10 path and query /api/comment/add {} 
16:20:10 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:20:35 完整请求
16:20:35 请求结束
16:21:19 完整请求
16:21:19 请求结束
16:21:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:19 path and query /api/comment/add {} 
16:21:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:19 完整请求
16:21:19 请求结束
16:21:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:19 path and query /api/comment/add {} 
16:21:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:20 完整请求
16:21:20 请求结束
16:21:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:20 path and query /api/comment/add {} 
16:21:20 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:24 完整请求
16:21:24 请求结束
16:21:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:24 path and query /api/comment/add {} 
16:21:24 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:28 完整请求
16:21:28 请求结束
16:21:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:28 path and query /api/comment/add {} 
16:21:28 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:29 完整请求
16:21:29 请求结束
16:21:29 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:29 path and query /api/comment/add {} 
16:21:29 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:21:30 完整请求
16:21:30 请求结束
16:21:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:21:31 path and query /api/comment/add {} 
16:21:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:22:23 完整请求
16:22:23 请求结束
16:22:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:22:23 path and query /api/comment/add {} 
16:22:38 完整请求
16:22:38 请求结束
16:22:38 完整请求
16:22:38 请求结束
16:22:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:22:38 path and query /api/comment/add {} {"content":"方森森","weibo_id":"1"}
16:22:38 return weibo: {'id': 9, 'content': '方森森', 'weibo_id': 1}
16:22:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "方森森",
  "weibo_id": 1
}
16:23:15 完整请求
16:23:15 请求结束
16:23:15 完整请求
16:23:15 请求结束
16:23:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:15 path and query /api/comment/add {} 
16:23:16 完整请求
16:23:16 请求结束
16:23:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:16 path and query /weibo/index {} 
16:23:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:23:16 完整请求
16:23:16 完整请求
16:23:16 请求结束
16:23:16 请求结束
16:23:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:16 path and query /static {'file': 'gua.js'} 
16:23:16 path and query /static {'file': 'weibo.js'} 
16:23:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:23:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:23:17 完整请求
16:23:17 请求结束
16:23:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:17 path and query /api/weibo/all {} 
16:23:17 kwargs,  {'weibo_id': 1} <class 'dict'>
16:23:17 kwargs,  {'weibo_id': 2} <class 'dict'>
16:23:17 kwargs,  {'weibo_id': 3} <class 'dict'>
16:23:17 kwargs,  {'weibo_id': 6} <class 'dict'>
16:23:17 kwargs,  {'weibo_id': 7} <class 'dict'>
16:23:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489475567,
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1
      },
      {
        "content": "方森森",
        "id": 9,
        "weibo_id": 1
      }
    ],
    "content": "发送扥东发动"
  },
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      }
    ],
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "ut": 1489466799,
    "id": 7,
    "comments": [],
    "content": "粉丝扥东"
  }
]
16:23:18 完整请求
16:23:18 请求结束
16:23:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:18 path and query /api/comment/add {} 
16:23:23 完整请求
16:23:23 请求结束
16:23:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:23 path and query /api/comment/add {} {"content":"其他店的","weibo_id":"1"}
16:23:23 return weibo: {'content': '其他店的', 'id': 10, 'weibo_id': 1}
16:23:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "其他店的",
  "id": 10,
  "weibo_id": 1
}
16:23:24 完整请求
16:23:24 请求结束
16:23:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:24 path and query /api/comment/add {} 
16:23:35 完整请求
16:23:35 请求结束
16:23:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:35 path and query /api/comment/add {} {"content":"其他店的","weibo_id":"1"}
16:23:35 return weibo: {'content': '其他店的', 'id': 11, 'weibo_id': 1}
16:23:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "其他店的",
  "id": 11,
  "weibo_id": 1
}
16:23:37 完整请求
16:23:37 请求结束
16:23:37 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:23:37 path and query /api/comment/add {} 
16:24:14 完整请求
16:24:14 请求结束
16:24:38 完整请求
16:24:38 请求结束
16:24:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:38 path and query /api/comment/add {} 
16:24:39 完整请求
16:24:39 请求结束
16:24:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:39 path and query /api/comment/add {} 
16:24:40 完整请求
16:24:40 请求结束
16:24:40 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:40 path and query /api/comment/add {} 
16:24:41 完整请求
16:24:41 请求结束
16:24:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:41 path and query /api/comment/add {} 
16:24:50 完整请求
16:24:50 请求结束
16:24:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:50 path and query /weibo/index {} 
16:24:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:24:50 完整请求
16:24:50 请求结束
16:24:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:51 path and query /static {'file': 'gua.js'} 
16:24:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:24:51 完整请求
16:24:51 请求结束
16:24:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:51 path and query /static {'file': 'weibo.js'} 
16:24:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:24:51 完整请求
16:24:51 请求结束
16:24:51 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:51 path and query /api/weibo/all {} 
16:24:51 kwargs,  {'weibo_id': 1} <class 'dict'>
16:24:51 kwargs,  {'weibo_id': 2} <class 'dict'>
16:24:51 kwargs,  {'weibo_id': 3} <class 'dict'>
16:24:51 kwargs,  {'weibo_id': 6} <class 'dict'>
16:24:51 kwargs,  {'weibo_id': 7} <class 'dict'>
16:24:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "发送扥东发动",
    "ut": 1489475567,
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 10
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      }
    ]
  },
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ]
  },
  {
    "content": "fsdfdsa",
    "id": 6,
    "comments": []
  },
  {
    "content": "粉丝扥东",
    "ut": 1489466799,
    "id": 7,
    "comments": []
  }
]
16:24:53 完整请求
16:24:53 请求结束
16:24:53 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:24:53 path and query /api/comment/add {} 
16:25:52 完整请求
16:25:52 请求结束
16:26:05 完整请求
16:26:05 请求结束
16:26:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:05 path and query /weibo/index {} 
16:26:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:26:05 完整请求
16:26:06 请求结束
16:26:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:06 path and query /static {'file': 'gua.js'} 
16:26:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:26:06 完整请求
16:26:06 请求结束
16:26:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:06 path and query /static {'file': 'weibo.js'} 
16:26:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:26:06 完整请求
16:26:06 请求结束
16:26:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:06 path and query /api/weibo/all {} 
16:26:06 kwargs,  {'weibo_id': 1} <class 'dict'>
16:26:06 kwargs,  {'weibo_id': 2} <class 'dict'>
16:26:06 kwargs,  {'weibo_id': 3} <class 'dict'>
16:26:06 kwargs,  {'weibo_id': 6} <class 'dict'>
16:26:06 kwargs,  {'weibo_id': 7} <class 'dict'>
16:26:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      },
      {
        "weibo_id": 1,
        "id": 9,
        "content": "方森森"
      },
      {
        "weibo_id": 1,
        "id": 10,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 11,
        "content": "其他店的"
      }
    ],
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
16:26:07 完整请求
16:26:07 完整请求
16:26:07 请求结束
16:26:07 请求结束
16:26:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:07 path and query /api/comment/delete {'id': '1'} 
16:26:07 path and query /api/comment/add {} 
16:26:15 完整请求
16:26:15 请求结束
16:26:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:15 path and query /api/comment/add {} 
16:26:20 完整请求
16:26:20 完整请求
16:26:20 请求结束
16:26:20 请求结束
16:26:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:20 path and query /api/comment/delete {'id': '3'} 
16:26:20 path and query /api/comment/add {} 
16:26:20 完整请求
16:26:20 请求结束
16:26:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:20 path and query /api/comment/add {} 
16:26:30 完整请求
16:26:30 完整请求
16:26:30 请求结束
16:26:30 请求结束
16:26:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:31 path and query /api/comment/add {} 
16:26:31 path and query /api/comment/delete {'id': '6'} 
16:26:32 完整请求
16:26:32 请求结束
16:26:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:32 path and query /api/comment/add {} 
16:26:32 完整请求
16:26:32 请求结束
16:26:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:32 path and query /api/comment/delete {'id': '6'} 
16:26:42 完整请求
16:26:42 请求结束
16:26:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:42 path and query /api/comment/add {} 
16:26:44 完整请求
16:26:44 请求结束
16:26:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:44 path and query /api/comment/add {} {"content":"范东方","weibo_id":"1"}
16:26:44 return weibo: {'weibo_id': 1, 'id': 12, 'content': '范东方'}
16:26:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 1,
  "id": 12,
  "content": "范东方"
}
16:26:45 完整请求
16:26:45 请求结束
16:26:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:45 path and query /api/comment/add {} 
16:26:46 完整请求
16:26:46 请求结束
16:26:46 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:46 path and query /api/comment/add {} 
16:26:49 完整请求
16:26:49 请求结束
16:26:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:49 path and query /api/comment/add {} 
16:26:49 完整请求
16:26:49 请求结束
16:26:49 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:49 path and query /api/comment/add {} {"content":"范东方","weibo_id":"1"}
16:26:49 return weibo: {'weibo_id': 1, 'id': 13, 'content': '范东方'}
16:26:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 1,
  "id": 13,
  "content": "范东方"
}
16:26:50 完整请求
16:26:50 请求结束
16:26:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:50 path and query /weibo/index {} 
16:26:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:26:50 完整请求
16:26:50 请求结束
16:26:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:50 path and query /static {'file': 'gua.js'} 
16:26:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:26:50 完整请求
16:26:50 请求结束
16:26:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:50 path and query /static {'file': 'weibo.js'} 
16:26:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:26:50 完整请求
16:26:50 请求结束
16:26:50 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:26:50 path and query /api/weibo/all {} 
16:26:50 kwargs,  {'weibo_id': 1} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 2} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 3} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 6} <class 'dict'>
16:26:50 kwargs,  {'weibo_id': 7} <class 'dict'>
16:26:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      },
      {
        "weibo_id": 1,
        "id": 9,
        "content": "方森森"
      },
      {
        "weibo_id": 1,
        "id": 10,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 11,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 12,
        "content": "范东方"
      },
      {
        "weibo_id": 1,
        "id": 13,
        "content": "范东方"
      }
    ],
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
16:27:04 完整请求
16:27:04 完整请求
16:27:04 请求结束
16:27:04 请求结束
16:27:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:04 path and query /api/comment/add {} 
16:27:04 path and query /api/comment/delete {'id': '1'} 
16:27:56 完整请求
16:27:56 请求结束
16:27:57 完整请求
16:27:57 请求结束
16:27:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:57 path and query /weibo/index {} 
16:27:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:27:57 完整请求
16:27:57 请求结束
16:27:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:57 path and query /static {'file': 'gua.js'} 
16:27:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:27:57 完整请求
16:27:57 请求结束
16:27:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:57 path and query /static {'file': 'weibo.js'} 
16:27:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                ${c.content}
            </div>
            <button class='comment-delete'>删除</button>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment_with_id.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:27:57 完整请求
16:27:57 请求结束
16:27:57 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:57 path and query /api/weibo/all {} 
16:27:57 kwargs,  {'weibo_id': 1} <class 'dict'>
16:27:57 kwargs,  {'weibo_id': 2} <class 'dict'>
16:27:57 kwargs,  {'weibo_id': 3} <class 'dict'>
16:27:57 kwargs,  {'weibo_id': 6} <class 'dict'>
16:27:57 kwargs,  {'weibo_id': 7} <class 'dict'>
16:27:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      },
      {
        "weibo_id": 1,
        "id": 9,
        "content": "方森森"
      },
      {
        "weibo_id": 1,
        "id": 10,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 11,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 12,
        "content": "范东方"
      },
      {
        "weibo_id": 1,
        "id": 13,
        "content": "范东方"
      }
    ],
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
16:27:59 完整请求
16:27:59 完整请求
16:27:59 请求结束
16:27:59 请求结束
16:27:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:27:59 path and query /api/comment/add {} 
16:27:59 path and query /api/comment/delete {'id': '1'} 
16:28:02 完整请求
16:28:02 请求结束
16:28:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:28:02 path and query /api/comment/add {} 
16:28:02 完整请求
16:28:02 请求结束
16:28:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:28:02 path and query /api/comment/delete {'id': '2'} 
16:28:02 完整请求
16:28:02 请求结束
16:28:02 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:28:02 path and query /api/comment/add {} 
16:28:05 完整请求
16:28:05 完整请求
16:28:05 请求结束
16:28:05 请求结束
16:28:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:28:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:28:05 path and query /api/comment/delete {'id': '9'} 
16:28:05 path and query /api/comment/add {} 
16:29:44 完整请求
16:29:44 请求结束
16:29:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:29:44 path and query /weibo/index {} 
16:29:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:29:44 完整请求
16:29:44 完整请求
16:29:44 请求结束
16:29:44 请求结束
16:29:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:29:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:29:44 path and query /static {'file': 'weibo.js'} 
16:29:44 path and query /static {'file': 'gua.js'} 
16:29:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
        </div>
        <button class='comment-delete'>删除</button>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment_with_id.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:29:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:29:45 完整请求
16:29:45 请求结束
16:29:45 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:29:45 path and query /api/weibo/all {} 
16:29:45 kwargs,  {'weibo_id': 1} <class 'dict'>
16:29:45 kwargs,  {'weibo_id': 2} <class 'dict'>
16:29:45 kwargs,  {'weibo_id': 3} <class 'dict'>
16:29:45 kwargs,  {'weibo_id': 6} <class 'dict'>
16:29:45 kwargs,  {'weibo_id': 7} <class 'dict'>
16:29:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      },
      {
        "weibo_id": 1,
        "id": 9,
        "content": "方森森"
      },
      {
        "weibo_id": 1,
        "id": 10,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 11,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 12,
        "content": "范东方"
      },
      {
        "weibo_id": 1,
        "id": 13,
        "content": "范东方"
      }
    ],
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
16:29:47 完整请求
16:29:47 请求结束
16:29:47 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:29:47 path and query /api/comment/add {} 
16:30:30 完整请求
16:30:30 请求结束
16:30:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:30:30 path and query /weibo/index {} 
16:30:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:30:31 完整请求
16:30:31 请求结束
16:30:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:30:31 path and query /static {'file': 'gua.js'} 
16:30:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:30:31 完整请求
16:30:31 请求结束
16:30:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:30:31 path and query /static {'file': 'weibo.js'} 
16:30:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_with_id = comment.querySelector('.comment-cell')
            var comment_id = comment_with_id.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment_with_id.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:30:31 完整请求
16:30:31 请求结束
16:30:31 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:30:31 path and query /api/weibo/all {} 
16:30:31 kwargs,  {'weibo_id': 1} <class 'dict'>
16:30:31 kwargs,  {'weibo_id': 2} <class 'dict'>
16:30:31 kwargs,  {'weibo_id': 3} <class 'dict'>
16:30:31 kwargs,  {'weibo_id': 6} <class 'dict'>
16:30:31 kwargs,  {'weibo_id': 7} <class 'dict'>
16:30:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1
      },
      {
        "weibo_id": 1,
        "id": 9,
        "content": "方森森"
      },
      {
        "weibo_id": 1,
        "id": 10,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 11,
        "content": "其他店的"
      },
      {
        "weibo_id": 1,
        "id": 12,
        "content": "范东方"
      },
      {
        "weibo_id": 1,
        "id": 13,
        "content": "范东方"
      }
    ],
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "content": "hello",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 4,
        "content": "123",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 5,
        "content": "asdf",
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "id": 7,
        "content": "说得好",
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "id": 8,
        "content": "说得好",
        "user_id": 2
      }
    ],
    "id": 2,
    "content": "你好",
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "content": "123",
        "user_id": 1
      }
    ],
    "id": 3,
    "content": "hahaha",
    "user_id": 1
  },
  {
    "comments": [],
    "id": 6,
    "content": "fsdfdsa"
  },
  {
    "comments": [],
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
16:31:06 完整请求
16:31:06 请求结束
16:31:06 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:07 path and query /weibo/index {} 
16:31:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:31:07 完整请求
16:31:07 请求结束
16:31:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:07 path and query /static {'file': 'gua.js'} 
16:31:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:31:07 完整请求
16:31:07 请求结束
16:31:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:07 path and query /static {'file': 'weibo.js'} 
16:31:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:31:07 完整请求
16:31:07 请求结束
16:31:07 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:07 path and query /api/weibo/all {} 
16:31:07 kwargs,  {'weibo_id': 1} <class 'dict'>
16:31:07 kwargs,  {'weibo_id': 2} <class 'dict'>
16:31:07 kwargs,  {'weibo_id': 3} <class 'dict'>
16:31:07 kwargs,  {'weibo_id': 6} <class 'dict'>
16:31:07 kwargs,  {'weibo_id': 7} <class 'dict'>
16:31:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "方森森",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "其他店的",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "其他店的",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "范东方",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "范东方",
        "weibo_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东",
    "comments": []
  }
]
16:31:11 完整请求
16:31:11 完整请求
16:31:11 请求结束
16:31:11 请求结束
16:31:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:11 path and query /api/comment/add {} 
16:31:11 path and query /api/comment/delete {'id': '2'} 
16:31:14 完整请求
16:31:14 请求结束
16:31:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:14 path and query /api/comment/add {} 
16:31:14 完整请求
16:31:14 请求结束
16:31:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:14 path and query /api/comment/delete {'id': '9'} 
16:31:14 完整请求
16:31:14 请求结束
16:31:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:14 path and query /api/comment/add {} 
16:31:16 完整请求
16:31:16 完整请求
16:31:16 请求结束
16:31:16 请求结束
16:31:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:16 path and query /api/comment/add {} 
16:31:16 path and query /api/comment/delete {'id': '10'} 
16:31:17 完整请求
16:31:17 请求结束
16:31:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:17 path and query /api/comment/add {} 
16:31:18 完整请求
16:31:18 请求结束
16:31:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:18 path and query /api/comment/delete {'id': '10'} 
16:31:18 完整请求
16:31:18 完整请求
16:31:18 请求结束
16:31:18 请求结束
16:31:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:18 path and query /api/comment/add {} 
16:31:18 path and query /api/comment/delete {'id': '12'} 
16:31:19 完整请求
16:31:19 请求结束
16:31:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:20 path and query /api/comment/add {} 
16:31:20 完整请求
16:31:20 请求结束
16:31:20 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:20 path and query /api/comment/delete {'id': '12'} 
16:31:21 完整请求
16:31:21 请求结束
16:31:21 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:21 path and query /weibo/index {} 
16:31:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:31:22 完整请求
16:31:22 完整请求
16:31:22 请求结束
16:31:22 请求结束
16:31:22 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:22 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:22 path and query /static {'file': 'gua.js'} 
16:31:22 path and query /static {'file': 'weibo.js'} 
16:31:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:31:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:31:22 完整请求
16:31:22 请求结束
16:31:22 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:31:22 path and query /api/weibo/all {} 
16:31:22 kwargs,  {'weibo_id': 1} <class 'dict'>
16:31:22 kwargs,  {'weibo_id': 2} <class 'dict'>
16:31:22 kwargs,  {'weibo_id': 3} <class 'dict'>
16:31:22 kwargs,  {'weibo_id': 6} <class 'dict'>
16:31:22 kwargs,  {'weibo_id': 7} <class 'dict'>
16:31:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 9,
        "content": "方森森",
        "weibo_id": 1
      },
      {
        "id": 10,
        "content": "其他店的",
        "weibo_id": 1
      },
      {
        "id": 11,
        "content": "其他店的",
        "weibo_id": 1
      },
      {
        "id": 12,
        "content": "范东方",
        "weibo_id": 1
      },
      {
        "id": 13,
        "content": "范东方",
        "weibo_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "id": 6,
    "content": "fsdfdsa",
    "comments": []
  },
  {
    "id": 7,
    "ut": 1489466799,
    "content": "粉丝扥东",
    "comments": []
  }
]
16:32:09 完整请求
16:32:09 请求结束
16:32:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:09 path and query /weibo/index {} 
16:32:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:32:09 完整请求
16:32:09 请求结束
16:32:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:09 path and query /static {'file': 'gua.js'} 
16:32:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:32:09 完整请求
16:32:09 请求结束
16:32:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:09 path and query /static {'file': 'weibo.js'} 
16:32:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:32:09 完整请求
16:32:09 请求结束
16:32:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:09 path and query /api/weibo/all {} 
16:32:09 kwargs,  {'weibo_id': 1} <class 'dict'>
16:32:09 kwargs,  {'weibo_id': 2} <class 'dict'>
16:32:09 kwargs,  {'weibo_id': 3} <class 'dict'>
16:32:09 kwargs,  {'weibo_id': 6} <class 'dict'>
16:32:09 kwargs,  {'weibo_id': 7} <class 'dict'>
16:32:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 10
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 12
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
16:32:12 完整请求
16:32:12 完整请求
16:32:12 请求结束
16:32:12 请求结束
16:32:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:12 path and query /api/comment/delete {'id': '10'} 
16:32:12 path and query /api/comment/add {} 
16:32:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 1,
  "content": "其他店的",
  "id": 10
}
16:32:14 完整请求
16:32:14 请求结束
16:32:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:14 path and query /weibo/index {} 
16:32:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:32:14 完整请求
16:32:14 完整请求
16:32:14 请求结束
16:32:14 请求结束
16:32:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:14 path and query /static {'file': 'gua.js'} 
16:32:14 path and query /static {'file': 'weibo.js'} 
16:32:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:32:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:32:14 完整请求
16:32:14 请求结束
16:32:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:14 path and query /api/weibo/all {} 
16:32:14 kwargs,  {'weibo_id': 1} <class 'dict'>
16:32:14 kwargs,  {'weibo_id': 2} <class 'dict'>
16:32:14 kwargs,  {'weibo_id': 3} <class 'dict'>
16:32:15 kwargs,  {'weibo_id': 6} <class 'dict'>
16:32:15 kwargs,  {'weibo_id': 7} <class 'dict'>
16:32:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 12
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
16:32:16 完整请求
16:32:16 请求结束
16:32:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:16 path and query /api/comment/add {} 
16:32:16 完整请求
16:32:16 请求结束
16:32:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:16 path and query /api/comment/delete {'id': '12'} 
16:32:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 1,
  "content": "范东方",
  "id": 12
}
16:32:16 完整请求
16:32:16 请求结束
16:32:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:16 path and query /api/comment/add {} 
16:32:17 完整请求
16:32:17 请求结束
16:32:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:17 path and query /weibo/index {} 
16:32:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:32:18 完整请求
16:32:18 完整请求
16:32:18 请求结束
16:32:18 请求结束
16:32:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:18 path and query /static {'file': 'gua.js'} 
16:32:18 path and query /static {'file': 'weibo.js'} 
16:32:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:32:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:32:18 完整请求
16:32:18 请求结束
16:32:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:32:18 path and query /api/weibo/all {} 
16:32:18 kwargs,  {'weibo_id': 1} <class 'dict'>
16:32:18 kwargs,  {'weibo_id': 2} <class 'dict'>
16:32:18 kwargs,  {'weibo_id': 3} <class 'dict'>
16:32:18 kwargs,  {'weibo_id': 6} <class 'dict'>
16:32:18 kwargs,  {'weibo_id': 7} <class 'dict'>
16:32:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
16:40:52 完整请求
16:40:52 请求结束
16:55:26 完整请求
16:55:26 请求结束
16:55:26 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:55:26 path and query /weibo/index {} 
16:55:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:55:26 完整请求
16:55:26 请求结束
16:55:26 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:55:26 path and query /static {'file': 'gua.js'} 
16:55:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:55:26 完整请求
16:55:26 请求结束
16:55:26 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:55:26 path and query /static {'file': 'weibo.js'} 
16:55:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:55:26 完整请求
16:55:26 请求结束
16:55:26 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
16:55:26 path and query /api/weibo/all {} 
16:55:26 kwargs,  {'weibo_id': 1} <class 'dict'>
16:55:26 kwargs,  {'weibo_id': 2} <class 'dict'>
16:55:26 kwargs,  {'weibo_id': 3} <class 'dict'>
16:55:26 kwargs,  {'weibo_id': 6} <class 'dict'>
16:55:26 kwargs,  {'weibo_id': 7} <class 'dict'>
16:55:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:02:00 完整请求
17:02:00 请求结束
17:02:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:02:00 path and query /weibo/index {} 
17:02:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <script src='?file=weibo.css'></script>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:02:00 完整请求
17:02:00 请求结束
17:02:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:02:00 path and query /weibo/index {'file': 'weibo.css'} 
17:02:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <script src='?file=weibo.css'></script>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:02:00 完整请求
17:02:00 完整请求
17:02:00 请求结束
17:02:00 请求结束
17:02:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:02:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:02:00 path and query /static {'file': 'weibo.js'} 
17:02:00 path and query /static {'file': 'gua.js'} 
17:02:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:02:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:02:00 完整请求
17:02:00 请求结束
17:02:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:02:00 path and query /api/weibo/all {} 
17:02:00 kwargs,  {'weibo_id': 1} <class 'dict'>
17:02:00 kwargs,  {'weibo_id': 2} <class 'dict'>
17:02:00 kwargs,  {'weibo_id': 3} <class 'dict'>
17:02:00 kwargs,  {'weibo_id': 6} <class 'dict'>
17:02:00 kwargs,  {'weibo_id': 7} <class 'dict'>
17:02:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:04:04 完整请求
17:04:04 请求结束
17:04:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:04:04 path and query /weibo/index {} 
17:04:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:04:04 完整请求
17:04:04 请求结束
17:04:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:04:04 path and query /weibo/weibo.css {} 
17:04:04 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:04:04 完整请求
17:04:04 完整请求
17:04:04 请求结束
17:04:04 请求结束
17:04:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:04:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:04:04 path and query /static {'file': 'gua.js'} 
17:04:04 path and query /static {'file': 'weibo.js'} 
17:04:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:04:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:04:04 完整请求
17:04:04 请求结束
17:04:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:04:04 path and query /api/weibo/all {} 
17:04:05 kwargs,  {'weibo_id': 1} <class 'dict'>
17:04:05 kwargs,  {'weibo_id': 2} <class 'dict'>
17:04:05 kwargs,  {'weibo_id': 3} <class 'dict'>
17:04:05 kwargs,  {'weibo_id': 6} <class 'dict'>
17:04:05 kwargs,  {'weibo_id': 7} <class 'dict'>
17:04:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:05:04 完整请求
17:05:04 请求结束
17:05:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:04 path and query /weibo/index {} 
17:05:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            text-align: center;
            height: 50px;
            width: 400px;
            margin: 0 auto;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:04 完整请求
17:05:04 请求结束
17:05:04 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:04 path and query /weibo/weibo.css {} 
17:05:05 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:05:05 完整请求
17:05:05 完整请求
17:05:05 请求结束
17:05:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:05 path and query /static {'file': 'gua.js'} 
17:05:05 path and query /static {'file': 'weibo.js'} 
17:05:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:05:05 完整请求
17:05:05 请求结束
17:05:05 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:05 path and query /api/weibo/all {} 
17:05:05 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:05 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:05 kwargs,  {'weibo_id': 3} <class 'dict'>
17:05:05 kwargs,  {'weibo_id': 6} <class 'dict'>
17:05:05 kwargs,  {'weibo_id': 7} <class 'dict'>
17:05:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:05:39 完整请求
17:05:39 请求结束
17:05:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:39 path and query /weibo/index {} 
17:05:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            text-align: center;
            width: 400px;
            margin: 0 auto;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:05:39 完整请求
17:05:39 请求结束
17:05:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:39 path and query /weibo/weibo.css {} 
17:05:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:05:39 完整请求
17:05:39 完整请求
17:05:39 请求结束
17:05:39 请求结束
17:05:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:39 path and query /static {'file': 'gua.js'} 
17:05:39 path and query /static {'file': 'weibo.js'} 
17:05:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:05:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:05:39 完整请求
17:05:39 请求结束
17:05:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:05:39 path and query /api/weibo/all {} 
17:05:39 kwargs,  {'weibo_id': 1} <class 'dict'>
17:05:39 kwargs,  {'weibo_id': 2} <class 'dict'>
17:05:39 kwargs,  {'weibo_id': 3} <class 'dict'>
17:05:39 kwargs,  {'weibo_id': 6} <class 'dict'>
17:05:39 kwargs,  {'weibo_id': 7} <class 'dict'>
17:05:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:06:10 完整请求
17:06:10 请求结束
17:06:10 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:10 path and query /weibo/index {} 
17:06:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            text-align: center;
            width: 400px;
            margin: 0 auto;
        }
        .weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:06:11 完整请求
17:06:11 请求结束
17:06:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:11 path and query /weibo/weibo.css {} 
17:06:11 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:06:11 完整请求
17:06:11 完整请求
17:06:11 请求结束
17:06:11 请求结束
17:06:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:11 path and query /static {'file': 'gua.js'} 
17:06:11 path and query /static {'file': 'weibo.js'} 
17:06:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:06:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:06:11 完整请求
17:06:11 请求结束
17:06:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:11 path and query /api/weibo/all {} 
17:06:11 kwargs,  {'weibo_id': 1} <class 'dict'>
17:06:11 kwargs,  {'weibo_id': 2} <class 'dict'>
17:06:11 kwargs,  {'weibo_id': 3} <class 'dict'>
17:06:11 kwargs,  {'weibo_id': 6} <class 'dict'>
17:06:11 kwargs,  {'weibo_id': 7} <class 'dict'>
17:06:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:06:26 完整请求
17:06:26 请求结束
17:06:26 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:26 path and query /weibo/index {} 
17:06:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            text-align: center;
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:06:27 完整请求
17:06:27 请求结束
17:06:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:27 path and query /weibo/weibo.css {} 
17:06:27 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:06:27 完整请求
17:06:27 完整请求
17:06:27 请求结束
17:06:27 请求结束
17:06:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:27 path and query /static {'file': 'weibo.js'} 
17:06:27 path and query /static {'file': 'gua.js'} 
17:06:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:06:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:06:27 完整请求
17:06:27 请求结束
17:06:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:06:27 path and query /api/weibo/all {} 
17:06:27 kwargs,  {'weibo_id': 1} <class 'dict'>
17:06:27 kwargs,  {'weibo_id': 2} <class 'dict'>
17:06:27 kwargs,  {'weibo_id': 3} <class 'dict'>
17:06:27 kwargs,  {'weibo_id': 6} <class 'dict'>
17:06:27 kwargs,  {'weibo_id': 7} <class 'dict'>
17:06:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:07:09 完整请求
17:07:09 请求结束
17:07:09 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:09 path and query /api/comment/add {} 
17:07:11 完整请求
17:07:11 请求结束
17:07:11 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:11 path and query /api/comment/add {} 
17:07:12 完整请求
17:07:12 请求结束
17:07:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:13 path and query /api/comment/add {} {"content":"","weibo_id":"3"}
17:07:13 return weibo: {'weibo_id': 3, 'content': '', 'id': 14}
17:07:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "",
  "id": 14
}
17:07:13 完整请求
17:07:13 请求结束
17:07:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:13 path and query /api/comment/add {} {"content":"","weibo_id":"3"}
17:07:13 return weibo: {'weibo_id': 3, 'content': '', 'id': 15}
17:07:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "",
  "id": 15
}
17:07:16 完整请求
17:07:16 请求结束
17:07:16 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:16 path and query /api/comment/add {} 
17:07:17 完整请求
17:07:17 请求结束
17:07:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:17 path and query /weibo/index {} 
17:07:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            text-align: center;
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:07:17 完整请求
17:07:17 完整请求
17:07:17 完整请求
17:07:17 请求结束
17:07:17 请求结束
17:07:17 请求结束
17:07:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:17 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:17 path and query /weibo/weibo.css {} 
17:07:17 path and query /static {'file': 'gua.js'} 
17:07:17 path and query /static {'file': 'weibo.js'} 
17:07:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:07:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:07:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:07:17 完整请求
17:07:17 请求结束
17:07:18 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:18 path and query /api/weibo/all {} 
17:07:18 kwargs,  {'weibo_id': 1} <class 'dict'>
17:07:18 kwargs,  {'weibo_id': 2} <class 'dict'>
17:07:18 kwargs,  {'weibo_id': 3} <class 'dict'>
17:07:18 kwargs,  {'weibo_id': 6} <class 'dict'>
17:07:18 kwargs,  {'weibo_id': 7} <class 'dict'>
17:07:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "",
        "id": 14
      },
      {
        "weibo_id": 3,
        "content": "",
        "id": 15
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:07:19 完整请求
17:07:19 请求结束
17:07:19 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:19 path and query /api/comment/add {} 
17:07:24 完整请求
17:07:24 完整请求
17:07:24 请求结束
17:07:24 请求结束
17:07:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:24 path and query /api/comment/delete {'id': '15'} 
17:07:24 path and query /api/comment/add {} 
17:07:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "",
  "id": 15
}
17:07:24 完整请求
17:07:24 请求结束
17:07:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:24 path and query /api/comment/add {} 
17:07:25 完整请求
17:07:25 完整请求
17:07:25 请求结束
17:07:25 请求结束
17:07:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:25 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:25 path and query /api/comment/add {} 
17:07:25 path and query /api/comment/delete {'id': '14'} 
17:07:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "",
  "id": 14
}
17:07:27 完整请求
17:07:27 请求结束
17:07:27 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:27 path and query /api/comment/add {} 
17:07:28 完整请求
17:07:28 请求结束
17:07:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:28 path and query /api/comment/add {} 
17:07:30 完整请求
17:07:30 请求结束
17:07:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:30 path and query /api/comment/add {} {"content":"323232","weibo_id":"1"}
17:07:30 return weibo: {'weibo_id': 1, 'content': '323232', 'id': 14}
17:07:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 1,
  "content": "323232",
  "id": 14
}
17:07:30 完整请求
17:07:30 请求结束
17:07:30 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:30 path and query /api/comment/add {} 
17:07:32 完整请求
17:07:32 请求结束
17:07:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:32 path and query /api/comment/add {} 
17:07:33 完整请求
17:07:33 请求结束
17:07:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:33 path and query /api/comment/add {} 
17:07:35 完整请求
17:07:35 请求结束
17:07:35 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:35 path and query /api/comment/add {} {"content":"323232","weibo_id":"2"}
17:07:35 return weibo: {'weibo_id': 2, 'content': '323232', 'id': 15}
17:07:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 2,
  "content": "323232",
  "id": 15
}
17:07:39 完整请求
17:07:39 请求结束
17:07:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:39 path and query /api/comment/add {} 
17:07:40 完整请求
17:07:41 请求结束
17:07:41 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:41 path and query /api/comment/add {} 
17:07:42 完整请求
17:07:42 请求结束
17:07:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:42 path and query /api/comment/add {} {"content":"323232","weibo_id":"3"}
17:07:42 return weibo: {'weibo_id': 3, 'content': '323232', 'id': 16}
17:07:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "323232",
  "id": 16
}
17:07:42 完整请求
17:07:42 请求结束
17:07:42 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:07:42 path and query /api/comment/add {} {"content":"323232","weibo_id":"3"}
17:07:43 return weibo: {'weibo_id': 3, 'content': '323232', 'id': 17}
17:07:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 3,
  "content": "323232",
  "id": 17
}
17:08:12 完整请求
17:08:12 请求结束
17:08:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:08:12 path and query /weibo/index {} 
17:08:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:08:12 完整请求
17:08:12 请求结束
17:08:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:08:12 path and query /weibo/weibo.css {} 
17:08:13 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:08:13 完整请求
17:08:13 完整请求
17:08:13 请求结束
17:08:13 请求结束
17:08:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:08:13 path and query /static {'file': 'gua.js'} 
17:08:13 path and query /static {'file': 'weibo.js'} 
17:08:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}
                    <button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}
            <button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:08:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:08:13 完整请求
17:08:13 请求结束
17:08:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:08:13 path and query /api/weibo/all {} 
17:08:13 kwargs,  {'weibo_id': 1} <class 'dict'>
17:08:13 kwargs,  {'weibo_id': 2} <class 'dict'>
17:08:13 kwargs,  {'weibo_id': 3} <class 'dict'>
17:08:13 kwargs,  {'weibo_id': 6} <class 'dict'>
17:08:13 kwargs,  {'weibo_id': 7} <class 'dict'>
17:08:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:09:28 完整请求
17:09:28 请求结束
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 path and query /api/comment/add {} 
17:09:28 完整请求
17:09:28 请求结束
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 path and query /weibo/index {} 
17:09:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:09:28 完整请求
17:09:28 请求结束
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 path and query /weibo/weibo.css {} 
17:09:28 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:09:28 完整请求
17:09:28 完整请求
17:09:28 请求结束
17:09:28 请求结束
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 path and query /static {'file': 'gua.js'} 
17:09:28 path and query /static {'file': 'weibo.js'} 
17:09:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    ${c.content}<button class='comment-delete'>删除</button>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            ${content}<button class='comment-delete'>删除</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:09:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:09:28 完整请求
17:09:28 请求结束
17:09:28 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:09:28 path and query /api/weibo/all {} 
17:09:28 kwargs,  {'weibo_id': 1} <class 'dict'>
17:09:29 kwargs,  {'weibo_id': 2} <class 'dict'>
17:09:29 kwargs,  {'weibo_id': 3} <class 'dict'>
17:09:29 kwargs,  {'weibo_id': 6} <class 'dict'>
17:09:29 kwargs,  {'weibo_id': 7} <class 'dict'>
17:09:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:10:23 完整请求
17:10:23 请求结束
17:10:23 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:23 path and query /api/comment/add {} 
17:10:23 完整请求
17:10:23 请求结束
17:10:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:24 path and query /weibo/index {} 
17:10:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:10:24 完整请求
17:10:24 完整请求
17:10:24 完整请求
17:10:24 请求结束
17:10:24 请求结束
17:10:24 请求结束
17:10:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:24 path and query /static {'file': 'weibo.js'} 
17:10:24 path and query /weibo/weibo.css {} 
17:10:24 path and query /static {'file': 'gua.js'} 
17:10:24 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:10:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:10:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:10:24 完整请求
17:10:24 请求结束
17:10:24 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:24 path and query /api/weibo/all {} 
17:10:24 kwargs,  {'weibo_id': 1} <class 'dict'>
17:10:24 kwargs,  {'weibo_id': 2} <class 'dict'>
17:10:24 kwargs,  {'weibo_id': 3} <class 'dict'>
17:10:25 kwargs,  {'weibo_id': 6} <class 'dict'>
17:10:25 kwargs,  {'weibo_id': 7} <class 'dict'>
17:10:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:10:32 完整请求
17:10:32 请求结束
17:10:32 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:32 path and query /api/comment/add {} 
17:10:33 完整请求
17:10:33 请求结束
17:10:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:33 path and query /api/comment/add {} 
17:10:33 完整请求
17:10:33 请求结束
17:10:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:10:33 path and query /api/comment/add {} 
17:11:13 完整请求
17:11:13 请求结束
17:11:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:11:13 path and query /weibo/index {} 
17:11:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 0 auto;
        }
        .Weibo-content {
            height: 60px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:11:13 完整请求
17:11:13 完整请求
17:11:13 完整请求
17:11:13 请求结束
17:11:13 请求结束
17:11:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:11:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:11:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:11:13 path and query /static {'file': 'gua.js'} 
17:11:13 path and query /static {'file': 'weibo.js'} 
17:11:13 path and query /weibo/weibo.css {} 
17:11:13 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:11:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:11:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:11:14 完整请求
17:11:14 请求结束
17:11:14 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:11:14 path and query /api/weibo/all {} 
17:11:14 kwargs,  {'weibo_id': 1} <class 'dict'>
17:11:14 kwargs,  {'weibo_id': 2} <class 'dict'>
17:11:14 kwargs,  {'weibo_id': 3} <class 'dict'>
17:11:14 kwargs,  {'weibo_id': 6} <class 'dict'>
17:11:14 kwargs,  {'weibo_id': 7} <class 'dict'>
17:11:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:11:29 完整请求
17:11:29 请求结束
17:12:01 完整请求
17:12:01 请求结束
17:12:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:01 path and query /weibo/index {} 
17:12:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:12:01 完整请求
17:12:01 请求结束
17:12:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:01 path and query /weibo/weibo.css {} 
17:12:01 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:12:01 完整请求
17:12:01 完整请求
17:12:01 请求结束
17:12:01 请求结束
17:12:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:01 path and query /static {'file': 'gua.js'} 
17:12:01 path and query /static {'file': 'weibo.js'} 
17:12:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:12:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:12:01 完整请求
17:12:01 请求结束
17:12:01 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:01 path and query /api/weibo/all {} 
17:12:01 kwargs,  {'weibo_id': 1} <class 'dict'>
17:12:01 kwargs,  {'weibo_id': 2} <class 'dict'>
17:12:01 kwargs,  {'weibo_id': 3} <class 'dict'>
17:12:01 kwargs,  {'weibo_id': 6} <class 'dict'>
17:12:01 kwargs,  {'weibo_id': 7} <class 'dict'>
17:12:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:12:38 完整请求
17:12:38 请求结束
17:12:38 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:39 path and query /weibo/index {} 
17:12:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #234;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:12:39 完整请求
17:12:39 请求结束
17:12:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:39 path and query /weibo/weibo.css {} 
17:12:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:12:39 完整请求
17:12:39 完整请求
17:12:39 请求结束
17:12:39 请求结束
17:12:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:39 path and query /static {'file': 'gua.js'} 
17:12:39 path and query /static {'file': 'weibo.js'} 
17:12:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:12:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:12:39 完整请求
17:12:39 请求结束
17:12:39 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:12:39 path and query /api/weibo/all {} 
17:12:39 kwargs,  {'weibo_id': 1} <class 'dict'>
17:12:39 kwargs,  {'weibo_id': 2} <class 'dict'>
17:12:39 kwargs,  {'weibo_id': 3} <class 'dict'>
17:12:39 kwargs,  {'weibo_id': 6} <class 'dict'>
17:12:39 kwargs,  {'weibo_id': 7} <class 'dict'>
17:12:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:13:14 完整请求
17:13:15 请求结束
17:13:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:15 path and query /weibo/index {} 
17:13:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #789;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:13:15 完整请求
17:13:15 请求结束
17:13:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:15 path and query /weibo/weibo.css {} 
17:13:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:13:15 完整请求
17:13:15 完整请求
17:13:15 请求结束
17:13:15 请求结束
17:13:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:15 path and query /static {'file': 'weibo.js'} 
17:13:15 path and query /static {'file': 'gua.js'} 
17:13:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:13:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:13:15 完整请求
17:13:15 请求结束
17:13:15 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:15 path and query /api/weibo/all {} 
17:13:15 kwargs,  {'weibo_id': 1} <class 'dict'>
17:13:15 kwargs,  {'weibo_id': 2} <class 'dict'>
17:13:15 kwargs,  {'weibo_id': 3} <class 'dict'>
17:13:15 kwargs,  {'weibo_id': 6} <class 'dict'>
17:13:15 kwargs,  {'weibo_id': 7} <class 'dict'>
17:13:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:13:33 完整请求
17:13:33 请求结束
17:13:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:33 path and query /weibo/index {} 
17:13:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #789;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 30px;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:13:33 完整请求
17:13:33 请求结束
17:13:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:33 path and query /weibo/weibo.css {} 
17:13:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:13:33 完整请求
17:13:33 完整请求
17:13:33 请求结束
17:13:33 请求结束
17:13:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:33 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:33 path and query /static {'file': 'weibo.js'} 
17:13:33 path and query /static {'file': 'gua.js'} 
17:13:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:13:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:13:34 完整请求
17:13:34 请求结束
17:13:34 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:34 path and query /api/weibo/all {} 
17:13:34 kwargs,  {'weibo_id': 1} <class 'dict'>
17:13:34 kwargs,  {'weibo_id': 2} <class 'dict'>
17:13:34 kwargs,  {'weibo_id': 3} <class 'dict'>
17:13:34 kwargs,  {'weibo_id': 6} <class 'dict'>
17:13:34 kwargs,  {'weibo_id': 7} <class 'dict'>
17:13:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:13:44 完整请求
17:13:44 请求结束
17:13:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:44 path and query /weibo/index {} 
17:13:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #789;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:13:44 完整请求
17:13:44 请求结束
17:13:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:44 path and query /weibo/weibo.css {} 
17:13:44 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:13:44 完整请求
17:13:44 完整请求
17:13:44 请求结束
17:13:44 请求结束
17:13:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:44 path and query /static {'file': 'weibo.js'} 
17:13:44 path and query /static {'file': 'gua.js'} 
17:13:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:13:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:13:44 完整请求
17:13:44 请求结束
17:13:44 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:44 path and query /api/weibo/all {} 
17:13:44 kwargs,  {'weibo_id': 1} <class 'dict'>
17:13:44 kwargs,  {'weibo_id': 2} <class 'dict'>
17:13:44 kwargs,  {'weibo_id': 3} <class 'dict'>
17:13:44 kwargs,  {'weibo_id': 6} <class 'dict'>
17:13:44 kwargs,  {'weibo_id': 7} <class 'dict'>
17:13:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:13:59 完整请求
17:13:59 请求结束
17:13:59 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:13:59 path and query /weibo/index {} 
17:13:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #789;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:14:00 完整请求
17:14:00 请求结束
17:14:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:00 path and query /weibo/weibo.css {} 
17:14:00 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:14:00 完整请求
17:14:00 完整请求
17:14:00 请求结束
17:14:00 请求结束
17:14:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:00 path and query /static {'file': 'weibo.js'} 
17:14:00 path and query /static {'file': 'gua.js'} 
17:14:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:14:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:14:00 完整请求
17:14:00 请求结束
17:14:00 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:00 path and query /api/weibo/all {} 
17:14:00 kwargs,  {'weibo_id': 1} <class 'dict'>
17:14:00 kwargs,  {'weibo_id': 2} <class 'dict'>
17:14:00 kwargs,  {'weibo_id': 3} <class 'dict'>
17:14:00 kwargs,  {'weibo_id': 6} <class 'dict'>
17:14:00 kwargs,  {'weibo_id': 7} <class 'dict'>
17:14:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
17:14:12 完整请求
17:14:12 请求结束
17:14:12 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:12 path and query /weibo/index {} 
17:14:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:14:13 完整请求
17:14:13 请求结束
17:14:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:13 path and query /weibo/weibo.css {} 
17:14:13 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:14:13 完整请求
17:14:13 完整请求
17:14:13 请求结束
17:14:13 请求结束
17:14:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:13 path and query /static {'file': 'gua.js'} 
17:14:13 path and query /static {'file': 'weibo.js'} 
17:14:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

17:14:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
17:14:13 完整请求
17:14:13 请求结束
17:14:13 cookie ['Pycharm-71aa95fb=252a7948-647c-47fc-acae-b2550497db2e']
17:14:13 path and query /api/weibo/all {} 
17:14:13 kwargs,  {'weibo_id': 1} <class 'dict'>
17:14:13 kwargs,  {'weibo_id': 2} <class 'dict'>
17:14:13 kwargs,  {'weibo_id': 3} <class 'dict'>
17:14:13 kwargs,  {'weibo_id': 6} <class 'dict'>
17:14:13 kwargs,  {'weibo_id': 7} <class 'dict'>
17:14:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right",
        "id": 2
      },
      {
        "weibo_id": 1,
        "content": "方森森",
        "id": 9
      },
      {
        "weibo_id": 1,
        "content": "其他店的",
        "id": 11
      },
      {
        "weibo_id": 1,
        "content": "范东方",
        "id": 13
      },
      {
        "weibo_id": 1,
        "content": "323232",
        "id": 14
      }
    ],
    "content": "发送扥东发动",
    "id": 1,
    "ut": 1489475567
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello",
        "id": 3
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "123",
        "id": 4
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf",
        "id": 5
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好",
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "content": "123",
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3
  },
  {
    "comments": [],
    "content": "fsdfdsa",
    "id": 6
  },
  {
    "comments": [],
    "content": "粉丝扥东",
    "id": 7,
    "ut": 1489466799
  }
]
12:42:51 完整请求
12:42:51 请求结束
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query / {} 
12:42:51 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:42:51 完整请求
12:42:51 请求结束
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query /todo/index {} 
12:42:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:42:51 完整请求
12:42:51 完整请求
12:42:51 请求结束
12:42:51 请求结束
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query /static {'file': 'todo.js'} 
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query /static {'file': 'gua.js'} 
12:42:51 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:42:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:42:51 完整请求
12:42:51 请求结束
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query /api/todo/all {} 
12:42:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ut": 1488978669,
    "ct": 1488975265
  },
  {
    "completed": false,
    "id": 5,
    "title": "fdsffsd",
    "ut": 1489419407,
    "ct": 1489419407
  },
  {
    "completed": false,
    "id": 6,
    "title": "fd",
    "ut": 1489419463,
    "ct": 1489419463
  },
  {
    "completed": false,
    "id": 7,
    "title": "fddfdsf",
    "ut": 1489419465,
    "ct": 1489419465
  },
  {
    "completed": false,
    "id": 8,
    "title": "fdf",
    "ut": 1489460213,
    "ct": 1489460213
  },
  {
    "completed": false,
    "id": 9,
    "title": "fdf",
    "ut": 1489460379,
    "ct": 1489460379
  },
  {
    "completed": false,
    "id": 10,
    "title": "bbbbb",
    "ut": 1489462694,
    "ct": 1489462079
  }
]
12:42:51 完整请求
12:42:51 请求结束
12:42:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:51 path and query /favicon.ico {} 
12:42:51 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:42:53 完整请求
12:42:53 请求结束
12:42:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:53 path and query /api/todo/delete {'id': '4'} 
12:42:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 4,
  "title": "瓜",
  "ut": 1488978669,
  "ct": 1488975265
}
12:42:54 完整请求
12:42:54 请求结束
12:42:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:54 path and query /api/todo/delete {'id': '5'} 
12:42:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 5,
  "title": "fdsffsd",
  "ut": 1489419407,
  "ct": 1489419407
}
12:42:57 完整请求
12:42:57 请求结束
12:42:57 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:42:57 path and query /api/todo/add {} 
12:43:00 完整请求
12:43:00 请求结束
12:43:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:00 path and query /api/todo/add {} {"title":"大大"}
12:43:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "id": 11,
  "title": "大大",
  "ut": 1492663380,
  "ct": 1492663380
}
12:43:01 完整请求
12:43:01 请求结束
12:43:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:01 path and query /api/todo/add {} 
12:43:03 完整请求
12:43:03 请求结束
12:43:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:03 path and query /api/todo/add {} 
12:43:05 完整请求
12:43:05 请求结束
12:43:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:05 path and query /api/todo/add {} 
12:43:06 完整请求
12:43:06 请求结束
12:43:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:06 path and query /api/todo/add {} 
12:43:06 完整请求
12:43:06 请求结束
12:43:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:06 path and query /api/todo/add {} 
12:43:06 完整请求
12:43:06 请求结束
12:43:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:06 path and query /api/todo/add {} 
12:43:06 完整请求
12:43:06 请求结束
12:43:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:06 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:07 完整请求
12:43:07 请求结束
12:43:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:07 path and query /api/todo/add {} 
12:43:08 完整请求
12:43:08 请求结束
12:43:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:43:08 path and query /api/todo/add {} 
12:44:04 完整请求
12:44:04 请求结束
12:44:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:44:04 path and query /todo/index {} 
12:44:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:44:04 完整请求
12:44:04 完整请求
12:44:04 请求结束
12:44:04 请求结束
12:44:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:44:04 path and query /static {'file': 'gua.js'} 
12:44:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:44:04 path and query /static {'file': 'todo.js'} 
12:44:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:44:04 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:44:04 完整请求
12:44:04 请求结束
12:44:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:44:04 path and query /api/todo/all {} 
12:44:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419463,
    "id": 6,
    "title": "fd",
    "ct": 1489419463,
    "completed": false
  },
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  }
]
12:45:00 完整请求
12:45:00 请求结束
12:45:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:00 path and query /weibo {} 
12:45:00 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:45:05 完整请求
12:45:05 请求结束
12:45:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:05 path and query /weibo {} 
12:45:05 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:45:06 完整请求
12:45:06 请求结束
12:45:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:06 path and query / {} 
12:45:06 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:45:06 完整请求
12:45:06 请求结束
12:45:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:06 path and query /todo/index {} 
12:45:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:45:07 完整请求
12:45:07 请求结束
12:45:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:07 path and query /todo/index {} 
12:45:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:45:07 完整请求
12:45:07 请求结束
12:45:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:07 path and query /todo {} 
12:45:07 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:45:08 完整请求
12:45:08 请求结束
12:45:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:08 path and query /static {'file': 'gua.js'} 
12:45:08 完整请求
12:45:08 请求结束
12:45:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:08 path and query /static {'file': 'todo.js'} 
12:45:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:45:08 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:45:08 完整请求
12:45:08 请求结束
12:45:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:08 path and query /api/todo/all {} 
12:45:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419463,
    "id": 6,
    "title": "fd",
    "ct": 1489419463,
    "completed": false
  },
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  }
]
12:45:12 完整请求
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query / {} 
12:45:12 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:45:12 完整请求
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query /todo/index {} 
12:45:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:45:12 完整请求
12:45:12 完整请求
12:45:12 请求结束
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query /static {'file': 'gua.js'} 
12:45:12 path and query /static {'file': 'todo.js'} 
12:45:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:45:12 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:45:12 完整请求
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query /api/todo/all {} 
12:45:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419463,
    "id": 6,
    "title": "fd",
    "ct": 1489419463,
    "completed": false
  },
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  }
]
12:45:12 完整请求
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query / {} 
12:45:12 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:45:12 完整请求
12:45:12 请求结束
12:45:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:12 path and query /todo/index {} 
12:45:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:45:13 完整请求
12:45:13 完整请求
12:45:13 请求结束
12:45:13 请求结束
12:45:13 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:13 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:13 path and query /static {'file': 'gua.js'} 
12:45:13 path and query /static {'file': 'todo.js'} 
12:45:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:45:13 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:45:13 完整请求
12:45:13 请求结束
12:45:13 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:13 path and query /api/todo/all {} 
12:45:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419463,
    "id": 6,
    "title": "fd",
    "ct": 1489419463,
    "completed": false
  },
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  }
]
12:45:14 完整请求
12:45:14 请求结束
12:45:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:14 path and query /api/todo/delete {'id': '6'} 
12:45:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1489419463,
  "id": 6,
  "title": "fd",
  "ct": 1489419463,
  "completed": false
}
12:45:17 完整请求
12:45:17 请求结束
12:45:17 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:17 path and query /api/todo/add {} 
12:45:43 完整请求
12:45:43 请求结束
12:45:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:43 path and query /api/todo/add {} 
12:45:44 完整请求
12:45:44 请求结束
12:45:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:44 path and query /api/todo/add {} 
12:45:44 完整请求
12:45:44 请求结束
12:45:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:44 path and query /api/todo/add {} 
12:45:44 完整请求
12:45:44 请求结束
12:45:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:44 path and query /api/todo/add {} 
12:45:45 完整请求
12:45:45 请求结束
12:45:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:45 path and query /api/todo/add {} 
12:45:45 完整请求
12:45:45 请求结束
12:45:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:45 path and query /api/todo/add {} 
12:45:45 完整请求
12:45:45 请求结束
12:45:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:45 path and query /api/todo/add {} 
12:45:45 完整请求
12:45:45 请求结束
12:45:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:45 path and query /api/todo/add {} 
12:45:45 完整请求
12:45:45 请求结束
12:45:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:45 path and query /api/todo/add {} 
12:45:46 完整请求
12:45:46 请求结束
12:45:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:46 path and query /api/todo/add {} 
12:45:49 完整请求
12:45:49 请求结束
12:45:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:49 path and query /api/todo/add {} 
12:45:50 完整请求
12:45:50 请求结束
12:45:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:50 path and query /api/todo/add {} 
12:45:50 完整请求
12:45:50 请求结束
12:45:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:50 path and query /api/todo/add {} 
12:45:50 完整请求
12:45:50 请求结束
12:45:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:50 path and query /api/todo/add {} 
12:45:50 完整请求
12:45:50 请求结束
12:45:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:50 path and query /api/todo/add {} 
12:45:51 完整请求
12:45:51 请求结束
12:45:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:45:51 path and query /api/todo/add {} 
12:46:04 完整请求
12:46:04 请求结束
12:46:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:46:04 path and query /api/todo/update {} 
12:46:04 完整请求
12:46:04 请求结束
12:46:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:46:04 path and query /api/todo/update {} 
12:46:05 完整请求
12:46:05 请求结束
12:46:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:46:05 path and query /api/todo/update {} 
12:46:05 完整请求
12:46:05 请求结束
12:46:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:46:05 path and query /api/todo/update {} 
12:46:05 完整请求
12:46:05 请求结束
12:46:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
12:46:05 path and query /api/todo/update {} 
12:46:30 完整请求
12:46:30 请求结束
12:46:30 cookie ['']
12:46:30 path and query / {} 
12:46:30 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:46:30 完整请求
12:46:30 请求结束
12:46:30 cookie ['']
12:46:30 path and query /todo/index {} 
12:46:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:46:30 完整请求
12:46:30 完整请求
12:46:30 请求结束
12:46:30 请求结束
12:46:30 cookie ['']
12:46:30 cookie ['']
12:46:30 path and query /static {'file': 'gua.js'} 
12:46:30 path and query /static {'file': 'todo.js'} 
12:46:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:46:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:46:30 完整请求
12:46:30 请求结束
12:46:30 cookie ['']
12:46:30 path and query /api/todo/all {} 
12:46:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  }
]
12:46:31 完整请求
12:46:31 请求结束
12:46:31 cookie ['']
12:46:31 path and query /favicon.ico {} 
12:46:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:46:31 完整请求
12:46:31 请求结束
12:46:31 cookie ['']
12:46:31 path and query /favicon.ico {} 
12:46:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:46:34 完整请求
12:46:34 请求结束
12:46:34 cookie ['']
12:46:34 path and query /api/todo/add {} {"title":"甮㩐"}
12:46:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1492663594,
  "id": 12,
  "title": "甮㩐",
  "ct": 1492663594,
  "completed": false
}
12:46:36 完整请求
12:46:36 请求结束
12:46:36 cookie ['']
12:46:36 path and query /api/todo/add {} {"title":"甮㩐fdsf "}
12:46:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1492663596,
  "id": 13,
  "title": "甮㩐fdsf ",
  "ct": 1492663596,
  "completed": false
}
12:46:39 完整请求
12:46:39 请求结束
12:46:39 cookie ['']
12:46:39 path and query /api/todo/update {} {"id":"12","title":"fdsf"}
12:46:39 kwargs,  {'id': 12} <class 'dict'>
12:46:39 debug 5
12:46:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1492663599,
  "id": 12,
  "title": "fdsf",
  "ct": 1492663594,
  "completed": false
}
12:46:42 完整请求
12:46:42 请求结束
12:46:42 cookie ['']
12:46:42 path and query /api/todo/update {} {"id":"12","title":"fdsf甮懂"}
12:46:42 kwargs,  {'id': 12} <class 'dict'>
12:46:42 debug 5
12:46:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1492663602,
  "id": 12,
  "title": "fdsf甮懂",
  "ct": 1492663594,
  "completed": false
}
12:48:12 完整请求
12:48:12 请求结束
12:48:12 cookie ['']
12:48:12 path and query /weibo/index {} 
12:48:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:48:17 完整请求
12:48:17 请求结束
12:48:17 完整请求
12:48:17 请求结束
12:48:17 cookie ['']
12:48:17 cookie ['']
12:48:17 path and query /weibo/weibo.css {} 
12:48:17 path and query /static {'file': 'gua.js'} 
12:48:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:48:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:48:17 完整请求
12:48:17 请求结束
12:48:17 cookie ['']
12:48:17 path and query /static {'file': 'weibo.js'} 
12:48:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:48:17 完整请求
12:48:17 请求结束
12:48:17 cookie ['']
12:48:17 path and query /api/weibo/all {} 
12:48:17 kwargs,  {'weibo_id': 1} <class 'dict'>
12:48:17 kwargs,  {'weibo_id': 2} <class 'dict'>
12:48:17 kwargs,  {'weibo_id': 3} <class 'dict'>
12:48:17 kwargs,  {'weibo_id': 6} <class 'dict'>
12:48:17 kwargs,  {'weibo_id': 7} <class 'dict'>
12:48:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "ut": 1489475567,
    "content": "发送扥东发动"
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello"
      },
      {
        "id": 4,
        "weibo_id": 2,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 5,
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "id": 7,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "comments": [],
    "ut": 1489466799,
    "content": "粉丝扥东"
  }
]
12:48:30 完整请求
12:48:30 请求结束
12:48:30 cookie ['']
12:48:30 path and query /api/weibo/update {} {"id":"1","content":"dfsa "}
12:48:30 kwargs,  {'id': 1} <class 'dict'>
12:48:30 debug 0
12:48:30 kwargs,  {'weibo_id': 1} <class 'dict'>
12:48:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "comments": [
    {
      "id": 1,
      "weibo_id": 1,
      "user_id": 2,
      "content": "楼主说得对"
    },
    {
      "id": 2,
      "weibo_id": 1,
      "user_id": 1,
      "content": "lbvu is right"
    },
    {
      "id": 9,
      "weibo_id": 1,
      "content": "方森森"
    },
    {
      "id": 11,
      "weibo_id": 1,
      "content": "其他店的"
    },
    {
      "id": 13,
      "weibo_id": 1,
      "content": "范东方"
    },
    {
      "id": 14,
      "weibo_id": 1,
      "content": "323232"
    }
  ],
  "user_id": 1,
  "ut": 1492663710,
  "content": "dfsa "
}
12:48:32 完整请求
12:48:32 请求结束
12:48:32 cookie ['']
12:48:32 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:33 完整请求
12:48:33 请求结束
12:48:33 cookie ['']
12:48:33 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:35 完整请求
12:48:35 请求结束
12:48:35 cookie ['']
12:48:35 path and query /api/comment/delete {'id': 'undefined'} 
12:48:49 完整请求
12:48:49 请求结束
12:48:49 cookie ['']
12:48:49 path and query /api/weibo/add {} {"content":"fsafs f"}
12:48:49 kwargs,  {'weibo_id': 8} <class 'dict'>
12:48:49 return weibo: {'id': 8, 'comments': [], 'content': 'fsafs f'}
12:48:49 kwargs,  {'weibo_id': 8} <class 'dict'>
12:48:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "comments": [],
  "content": "fsafs f"
}
12:49:02 完整请求
12:49:02 请求结束
12:49:02 cookie ['']
12:49:02 path and query /weibo/login {} 
12:49:02 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:49:10 完整请求
12:49:10 请求结束
12:49:10 cookie ['']
12:49:10 path and query /login {} 
12:49:10 login, cookies {}
12:49:10 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
12:49:14 完整请求
12:49:14 请求结束
12:49:14 cookie ['']
12:49:14 path and query /login {} username=123&password=123
12:49:14 login, cookies {}
12:49:14 form debug ['username=123', 'password=123'] 2
12:49:14 kwargs,  {'username': '123'} <class 'dict'>
12:49:14 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
12:49:23 完整请求
12:49:23 请求结束
12:49:23 cookie ['']
12:49:23 path and query /register {} 
12:49:23 响应
 HTTP/1.1 210 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册页面</title>
</head>
<body>
    <h1>注册</h1>
    <form action="/register" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">注册</button>
    </form>
</body>
</html>
12:49:28 完整请求
12:49:28 请求结束
12:49:28 cookie ['']
12:49:28 path and query /register {} username=123&password=123
12:49:28 form debug ['username=123', 'password=123'] 2
12:49:28 kwargs,  {'username': '123'} <class 'dict'>
12:49:28 响应
 HTTP/1.1 302 VERY OK
Location: /login
Content-Type: text/html


12:49:28 完整请求
12:49:28 请求结束
12:49:28 cookie ['']
12:49:28 path and query /login {} 
12:49:28 login, cookies {}
12:49:28 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
12:49:33 完整请求
12:49:33 请求结束
12:49:33 cookie ['']
12:49:33 path and query /login {} username=123&password=123
12:49:33 login, cookies {}
12:49:33 form debug ['username=123', 'password=123'] 2
12:49:33 kwargs,  {'username': '123'} <class 'dict'>
12:49:33 kwargs,  {'username': '123'} <class 'dict'>
12:49:33 headers response {'Set-Cookie': 'user=ddskdkddskea3dl8', 'Content-Type': 'text/html'}
12:49:33 响应
 HTTP/1.1 302 VERY OK
Location: /
Set-Cookie: user=ddskdkddskea3dl8
Content-Type: text/html


12:49:33 完整请求
12:49:33 请求结束
12:49:33 cookie ['user=ddskdkddskea3dl8']
12:49:33 path and query / {} 
12:49:33 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


12:49:33 完整请求
12:49:33 请求结束
12:49:33 cookie ['user=ddskdkddskea3dl8']
12:49:33 path and query /todo/index {} 
12:49:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:49:33 完整请求
12:49:33 请求结束
12:49:33 完整请求
12:49:33 cookie ['user=ddskdkddskea3dl8']
12:49:33 请求结束
12:49:33 path and query /static {'file': 'gua.js'} 
12:49:33 cookie ['user=ddskdkddskea3dl8']
12:49:33 path and query /static {'file': 'todo.js'} 
12:49:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:49:33 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:49:33 完整请求
12:49:33 请求结束
12:49:33 cookie ['user=ddskdkddskea3dl8']
12:49:33 path and query /api/todo/all {} 
12:49:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1489419465,
    "id": 7,
    "title": "fddfdsf",
    "ct": 1489419465,
    "completed": false
  },
  {
    "ut": 1489460213,
    "id": 8,
    "title": "fdf",
    "ct": 1489460213,
    "completed": false
  },
  {
    "ut": 1489460379,
    "id": 9,
    "title": "fdf",
    "ct": 1489460379,
    "completed": false
  },
  {
    "ut": 1489462694,
    "id": 10,
    "title": "bbbbb",
    "ct": 1489462079,
    "completed": false
  },
  {
    "ut": 1492663380,
    "id": 11,
    "title": "大大",
    "ct": 1492663380,
    "completed": false
  },
  {
    "ut": 1492663602,
    "id": 12,
    "title": "fdsf甮懂",
    "ct": 1492663594,
    "completed": false
  },
  {
    "ut": 1492663596,
    "id": 13,
    "title": "甮㩐fdsf ",
    "ct": 1492663596,
    "completed": false
  }
]
12:53:36 完整请求
12:53:36 请求结束
12:53:36 cookie ['user=ddskdkddskea3dl8']
12:53:36 path and query /todo/weibo {} 
12:53:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:53:41 完整请求
12:53:41 请求结束
12:53:41 cookie ['user=ddskdkddskea3dl8']
12:53:41 path and query /todo/weibo/index {} 
12:53:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:53:44 完整请求
12:53:44 请求结束
12:53:44 cookie ['user=ddskdkddskea3dl8']
12:53:44 path and query /todo/weibo/index {} 
12:53:44 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:53:49 完整请求
12:53:49 请求结束
12:53:49 cookie ['user=ddskdkddskea3dl8']
12:53:49 path and query /weibo/index {} 
12:53:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:53:49 完整请求
12:53:49 请求结束
12:53:49 cookie ['user=ddskdkddskea3dl8']
12:53:49 path and query /weibo/weibo.css {} 
12:53:49 完整请求
12:53:49 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:53:49 请求结束
12:53:49 cookie ['user=ddskdkddskea3dl8']
12:53:49 path and query /static {'file': 'gua.js'} 
12:53:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:53:49 完整请求
12:53:49 请求结束
12:53:49 cookie ['user=ddskdkddskea3dl8']
12:53:49 path and query /static {'file': 'weibo.js'} 
12:53:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:53:49 完整请求
12:53:49 请求结束
12:53:49 cookie ['user=ddskdkddskea3dl8']
12:53:49 path and query /api/weibo/all {} 
12:53:49 kwargs,  {'weibo_id': 1} <class 'dict'>
12:53:49 kwargs,  {'weibo_id': 2} <class 'dict'>
12:53:49 kwargs,  {'weibo_id': 3} <class 'dict'>
12:53:49 kwargs,  {'weibo_id': 6} <class 'dict'>
12:53:49 kwargs,  {'weibo_id': 7} <class 'dict'>
12:53:49 kwargs,  {'weibo_id': 8} <class 'dict'>
12:53:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "ut": 1492663710,
    "content": "dfsa "
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello"
      },
      {
        "id": 4,
        "weibo_id": 2,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 5,
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "id": 7,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "comments": [],
    "ut": 1489466799,
    "content": "粉丝扥东"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fsafs f"
  }
]
12:54:00 完整请求
12:54:00 请求结束
12:54:00 cookie ['user=ddskdkddskea3dl8']
12:54:00 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:00 kwargs,  {'weibo_id': 9} <class 'dict'>
12:54:00 return weibo: {'id': 9, 'comments': [], 'content': '不想说话'}
12:54:00 kwargs,  {'weibo_id': 9} <class 'dict'>
12:54:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "comments": [],
  "content": "不想说话"
}
12:54:01 完整请求
12:54:01 请求结束
12:54:01 cookie ['user=ddskdkddskea3dl8']
12:54:01 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:01 kwargs,  {'weibo_id': 10} <class 'dict'>
12:54:01 return weibo: {'id': 10, 'comments': [], 'content': '不想说话'}
12:54:01 kwargs,  {'weibo_id': 10} <class 'dict'>
12:54:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "comments": [],
  "content": "不想说话"
}
12:54:02 完整请求
12:54:02 请求结束
12:54:02 cookie ['user=ddskdkddskea3dl8']
12:54:02 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:02 kwargs,  {'weibo_id': 11} <class 'dict'>
12:54:02 return weibo: {'id': 11, 'comments': [], 'content': '不想说话'}
12:54:02 kwargs,  {'weibo_id': 11} <class 'dict'>
12:54:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "comments": [],
  "content": "不想说话"
}
12:54:02 完整请求
12:54:02 请求结束
12:54:02 cookie ['user=ddskdkddskea3dl8']
12:54:02 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:02 kwargs,  {'weibo_id': 12} <class 'dict'>
12:54:02 return weibo: {'id': 12, 'comments': [], 'content': '不想说话'}
12:54:02 kwargs,  {'weibo_id': 12} <class 'dict'>
12:54:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "comments": [],
  "content": "不想说话"
}
12:54:38 完整请求
12:54:38 请求结束
12:54:38 cookie ['user=ddskdkddskea3dl8']
12:54:38 path and query /weibo/index {} 
12:54:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:54:38 完整请求
12:54:38 请求结束
12:54:38 cookie ['user=ddskdkddskea3dl8']
12:54:38 完整请求
12:54:38 path and query /weibo/weibo.css {} 
12:54:38 完整请求
12:54:38 请求结束
12:54:38 请求结束
12:54:38 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:54:38 cookie ['user=ddskdkddskea3dl8']
12:54:38 path and query /static {'file': 'gua.js'} 
12:54:38 cookie ['user=ddskdkddskea3dl8']
12:54:38 path and query /static {'file': 'weibo.js'} 
12:54:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:54:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:54:38 完整请求
12:54:38 请求结束
12:54:38 cookie ['user=ddskdkddskea3dl8']
12:54:38 path and query /api/weibo/all {} 
12:54:38 kwargs,  {'weibo_id': 1} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 2} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 3} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 6} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 7} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 8} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 9} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 10} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 11} <class 'dict'>
12:54:38 kwargs,  {'weibo_id': 12} <class 'dict'>
12:54:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1492663710,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "dfsa "
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "ut": 1489466799,
    "comments": [],
    "content": "粉丝扥东"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fsafs f"
  },
  {
    "id": 9,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 10,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 11,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 12,
    "comments": [],
    "content": "不想说话"
  }
]
12:54:40 完整请求
12:54:40 请求结束
12:54:40 cookie ['user=ddskdkddskea3dl8']
12:54:40 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:40 kwargs,  {'weibo_id': 13} <class 'dict'>
12:54:40 return weibo: {'id': 13, 'comments': [], 'content': '不想说话'}
12:54:40 kwargs,  {'weibo_id': 13} <class 'dict'>
12:54:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "comments": [],
  "content": "不想说话"
}
12:54:41 完整请求
12:54:41 请求结束
12:54:41 cookie ['user=ddskdkddskea3dl8']
12:54:41 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:41 kwargs,  {'weibo_id': 14} <class 'dict'>
12:54:41 return weibo: {'id': 14, 'comments': [], 'content': '不想说话'}
12:54:41 kwargs,  {'weibo_id': 14} <class 'dict'>
12:54:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "comments": [],
  "content": "不想说话"
}
12:54:41 完整请求
12:54:41 请求结束
12:54:41 cookie ['user=ddskdkddskea3dl8']
12:54:41 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:41 kwargs,  {'weibo_id': 15} <class 'dict'>
12:54:41 return weibo: {'id': 15, 'comments': [], 'content': '不想说话'}
12:54:41 kwargs,  {'weibo_id': 15} <class 'dict'>
12:54:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "comments": [],
  "content": "不想说话"
}
12:54:41 完整请求
12:54:41 请求结束
12:54:41 cookie ['user=ddskdkddskea3dl8']
12:54:41 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:41 kwargs,  {'weibo_id': 16} <class 'dict'>
12:54:41 return weibo: {'id': 16, 'comments': [], 'content': '不想说话'}
12:54:41 kwargs,  {'weibo_id': 16} <class 'dict'>
12:54:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "comments": [],
  "content": "不想说话"
}
12:54:42 完整请求
12:54:42 请求结束
12:54:42 cookie ['user=ddskdkddskea3dl8']
12:54:42 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:42 kwargs,  {'weibo_id': 17} <class 'dict'>
12:54:42 return weibo: {'id': 17, 'comments': [], 'content': '不想说话'}
12:54:42 kwargs,  {'weibo_id': 17} <class 'dict'>
12:54:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "comments": [],
  "content": "不想说话"
}
12:54:42 完整请求
12:54:42 请求结束
12:54:42 cookie ['user=ddskdkddskea3dl8']
12:54:42 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:42 kwargs,  {'weibo_id': 18} <class 'dict'>
12:54:42 return weibo: {'id': 18, 'comments': [], 'content': '不想说话'}
12:54:42 kwargs,  {'weibo_id': 18} <class 'dict'>
12:54:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "comments": [],
  "content": "不想说话"
}
12:54:42 完整请求
12:54:42 请求结束
12:54:42 cookie ['user=ddskdkddskea3dl8']
12:54:42 path and query /api/weibo/add {} {"content":"不想说话"}
12:54:42 kwargs,  {'weibo_id': 19} <class 'dict'>
12:54:42 return weibo: {'id': 19, 'comments': [], 'content': '不想说话'}
12:54:42 kwargs,  {'weibo_id': 19} <class 'dict'>
12:54:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "comments": [],
  "content": "不想说话"
}
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:48 完整请求
12:54:48 请求结束
12:54:48 cookie ['user=ddskdkddskea3dl8']
12:54:48 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:49 完整请求
12:54:49 请求结束
12:54:49 cookie ['user=ddskdkddskea3dl8']
12:54:49 path and query /api/comment/delete {'id': 'undefined'} 
12:54:50 完整请求
12:54:50 请求结束
12:54:50 cookie ['user=ddskdkddskea3dl8']
12:54:50 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:52 完整请求
12:54:52 请求结束
12:54:52 cookie ['user=ddskdkddskea3dl8']
12:54:52 path and query /api/comment/delete {'id': 'undefined'} 
12:54:53 完整请求
12:54:53 请求结束
12:54:53 cookie ['user=ddskdkddskea3dl8']
12:54:53 path and query /api/comment/delete {'id': 'undefined'} 
12:54:56 完整请求
12:54:56 请求结束
12:54:56 cookie ['user=ddskdkddskea3dl8']
12:54:56 path and query /weibo/index {} 
12:54:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:54:56 完整请求
12:54:56 请求结束
12:54:56 cookie ['user=ddskdkddskea3dl8']
12:54:56 path and query /weibo/weibo.css {} 
12:54:56 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:54:56 完整请求
12:54:56 请求结束
12:54:56 cookie ['user=ddskdkddskea3dl8']
12:54:56 path and query /static {'file': 'gua.js'} 
12:54:56 完整请求
12:54:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:54:56 请求结束
12:54:56 cookie ['user=ddskdkddskea3dl8']
12:54:56 path and query /static {'file': 'weibo.js'} 
12:54:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:54:56 完整请求
12:54:56 请求结束
12:54:56 cookie ['user=ddskdkddskea3dl8']
12:54:56 path and query /api/weibo/all {} 
12:54:56 kwargs,  {'weibo_id': 1} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 2} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 3} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 6} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 7} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 8} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 9} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 10} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 11} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 12} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 13} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 14} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 15} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 16} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 17} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 18} <class 'dict'>
12:54:56 kwargs,  {'weibo_id': 19} <class 'dict'>
12:54:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1492663710,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "dfsa "
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "ut": 1489466799,
    "comments": [],
    "content": "粉丝扥东"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fsafs f"
  },
  {
    "id": 9,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 10,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 11,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 12,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 13,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 14,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 15,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 16,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 17,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 18,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 19,
    "comments": [],
    "content": "不想说话"
  }
]
12:54:59 完整请求
12:54:59 请求结束
12:54:59 cookie ['user=ddskdkddskea3dl8']
12:54:59 path and query /api/comment/delete {'id': 'undefined'} 
12:54:59 完整请求
12:54:59 请求结束
12:54:59 cookie ['user=ddskdkddskea3dl8']
12:54:59 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:00 完整请求
12:55:00 请求结束
12:55:00 cookie ['user=ddskdkddskea3dl8']
12:55:00 path and query /api/comment/delete {'id': 'undefined'} 
12:55:01 完整请求
12:55:01 请求结束
12:55:01 cookie ['user=ddskdkddskea3dl8']
12:55:01 path and query /api/comment/delete {'id': 'undefined'} 
12:55:01 完整请求
12:55:01 请求结束
12:55:01 cookie ['user=ddskdkddskea3dl8']
12:55:01 path and query /api/comment/delete {'id': 'undefined'} 
12:55:01 完整请求
12:55:01 请求结束
12:55:01 cookie ['user=ddskdkddskea3dl8']
12:55:01 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:02 完整请求
12:55:02 请求结束
12:55:02 cookie ['user=ddskdkddskea3dl8']
12:55:02 path and query /api/comment/delete {'id': 'undefined'} 
12:55:14 完整请求
12:55:14 请求结束
12:55:14 cookie ['user=ddskdkddskea3dl8']
12:55:14 path and query /weibo/index {} 
12:55:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
12:55:14 完整请求
12:55:14 请求结束
12:55:14 cookie ['user=ddskdkddskea3dl8']
12:55:14 path and query /weibo/weibo.css {} 
12:55:14 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
12:55:14 完整请求
12:55:14 请求结束
12:55:14 完整请求
12:55:14 cookie ['user=ddskdkddskea3dl8']
12:55:14 path and query /static {'file': 'weibo.js'} 
12:55:14 请求结束
12:55:14 cookie ['user=ddskdkddskea3dl8']
12:55:14 path and query /static {'file': 'gua.js'} 
12:55:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:55:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

12:55:14 完整请求
12:55:14 请求结束
12:55:14 cookie ['user=ddskdkddskea3dl8']
12:55:14 path and query /api/weibo/all {} 
12:55:14 kwargs,  {'weibo_id': 1} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 2} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 3} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 6} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 7} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 8} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 9} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 10} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 11} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 12} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 13} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 14} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 15} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 16} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 17} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 18} <class 'dict'>
12:55:14 kwargs,  {'weibo_id': 19} <class 'dict'>
12:55:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1492663710,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "dfsa "
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "ut": 1489466799,
    "comments": [],
    "content": "粉丝扥东"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fsafs f"
  },
  {
    "id": 9,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 10,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 11,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 12,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 13,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 14,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 15,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 16,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 17,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 18,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 19,
    "comments": [],
    "content": "不想说话"
  }
]
12:55:20 完整请求
12:55:20 请求结束
12:56:27 完整请求
12:56:27 请求结束
12:56:27 cookie ['user=ddskdkddskea3dl8']
12:56:27 path and query / {} 
12:56:27 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


12:56:27 完整请求
12:56:27 请求结束
12:56:27 cookie ['user=ddskdkddskea3dl8']
12:56:27 path and query /todo/index {} 
12:56:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:56:27 完整请求
12:56:27 请求结束
12:56:27 cookie ['user=ddskdkddskea3dl8']
12:56:27 path and query /static {'file': 'gua.js'} 
12:56:27 完整请求
12:56:27 请求结束
12:56:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:56:27 cookie ['user=ddskdkddskea3dl8']
12:56:27 path and query /static {'file': 'todo.js'} 
12:56:27 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:56:27 完整请求
12:56:27 请求结束
12:56:27 cookie ['user=ddskdkddskea3dl8']
12:56:27 path and query /api/todo/all {} 
12:56:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 7,
    "ct": 1489419465,
    "ut": 1489419465,
    "completed": false,
    "title": "fddfdsf"
  },
  {
    "id": 8,
    "ct": 1489460213,
    "ut": 1489460213,
    "completed": false,
    "title": "fdf"
  },
  {
    "id": 9,
    "ct": 1489460379,
    "ut": 1489460379,
    "completed": false,
    "title": "fdf"
  },
  {
    "id": 10,
    "ct": 1489462079,
    "ut": 1489462694,
    "completed": false,
    "title": "bbbbb"
  },
  {
    "id": 11,
    "ct": 1492663380,
    "ut": 1492663380,
    "completed": false,
    "title": "大大"
  },
  {
    "id": 12,
    "ct": 1492663594,
    "ut": 1492663602,
    "completed": false,
    "title": "fdsf甮懂"
  },
  {
    "id": 13,
    "ct": 1492663596,
    "ut": 1492663596,
    "completed": false,
    "title": "甮㩐fdsf "
  }
]
12:56:29 完整请求
12:56:29 请求结束
12:56:29 cookie ['user=ddskdkddskea3dl8']
12:56:29 path and query /api/todo/delete {'id': '8'} 
12:56:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "ct": 1489460213,
  "ut": 1489460213,
  "completed": false,
  "title": "fdf"
}
12:56:30 完整请求
12:56:30 请求结束
12:56:30 cookie ['user=ddskdkddskea3dl8']
12:56:30 path and query /todo/index {} 
12:56:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
12:56:30 完整请求
12:56:30 请求结束
12:56:30 cookie ['user=ddskdkddskea3dl8']
12:56:30 path and query /static {'file': 'gua.js'} 
12:56:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
12:56:30 完整请求
12:56:30 请求结束
12:56:30 cookie ['user=ddskdkddskea3dl8']
12:56:30 path and query /static {'file': 'todo.js'} 
12:56:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
12:56:30 完整请求
12:56:30 请求结束
12:56:30 cookie ['user=ddskdkddskea3dl8']
12:56:30 path and query /api/todo/all {} 
12:56:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 7,
    "ct": 1489419465,
    "ut": 1489419465,
    "completed": false,
    "title": "fddfdsf"
  },
  {
    "id": 9,
    "ct": 1489460379,
    "ut": 1489460379,
    "completed": false,
    "title": "fdf"
  },
  {
    "id": 10,
    "ct": 1489462079,
    "ut": 1489462694,
    "completed": false,
    "title": "bbbbb"
  },
  {
    "id": 11,
    "ct": 1492663380,
    "ut": 1492663380,
    "completed": false,
    "title": "大大"
  },
  {
    "id": 12,
    "ct": 1492663594,
    "ut": 1492663602,
    "completed": false,
    "title": "fdsf甮懂"
  },
  {
    "id": 13,
    "ct": 1492663596,
    "ut": 1492663596,
    "completed": false,
    "title": "甮㩐fdsf "
  }
]
12:56:37 完整请求
12:56:37 请求结束
12:56:37 cookie ['user=ddskdkddskea3dl8']
12:56:37 path and query /api/todo/delete {'id': '11'} 
12:56:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "ct": 1492663380,
  "ut": 1492663380,
  "completed": false,
  "title": "大大"
}
12:56:38 完整请求
12:56:38 请求结束
12:56:38 cookie ['user=ddskdkddskea3dl8']
12:56:38 path and query /api/todo/delete {'id': '12'} 
12:56:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "ct": 1492663594,
  "ut": 1492663602,
  "completed": false,
  "title": "fdsf甮懂"
}
12:56:38 完整请求
12:56:38 请求结束
12:56:38 cookie ['user=ddskdkddskea3dl8']
12:56:38 path and query /api/todo/delete {'id': '13'} 
12:56:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "ct": 1492663596,
  "ut": 1492663596,
  "completed": false,
  "title": "甮㩐fdsf "
}
12:56:47 完整请求
12:56:47 请求结束
12:56:47 cookie ['user=ddskdkddskea3dl8']
12:56:47 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "ct": 1492664207,
  "ut": 1492664207,
  "completed": false,
  "title": "你说的对吗"
}
12:56:48 完整请求
12:56:48 请求结束
12:56:48 cookie ['user=ddskdkddskea3dl8']
12:56:48 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
12:56:48 完整请求
12:56:48 请求结束
12:56:48 cookie ['user=ddskdkddskea3dl8']
12:56:48 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
12:56:48 完整请求
12:56:48 请求结束
12:56:48 cookie ['user=ddskdkddskea3dl8']
12:56:48 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
12:56:48 完整请求
12:56:48 请求结束
12:56:48 cookie ['user=ddskdkddskea3dl8']
12:56:48 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
12:56:48 完整请求
12:56:48 请求结束
12:56:48 cookie ['user=ddskdkddskea3dl8']
12:56:48 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:49 完整请求
12:56:49 请求结束
12:56:49 cookie ['user=ddskdkddskea3dl8']
12:56:49 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:50 完整请求
12:56:50 请求结束
12:56:50 cookie ['user=ddskdkddskea3dl8']
12:56:50 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
12:56:51 完整请求
12:56:51 请求结束
12:56:51 cookie ['user=ddskdkddskea3dl8']
12:56:51 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
12:56:51 完整请求
12:56:51 请求结束
12:56:51 cookie ['user=ddskdkddskea3dl8']
12:56:51 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
12:56:51 完整请求
12:56:51 请求结束
12:56:51 cookie ['user=ddskdkddskea3dl8']
12:56:51 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
12:56:51 完整请求
12:56:51 请求结束
12:56:51 cookie ['user=ddskdkddskea3dl8']
12:56:51 path and query /api/todo/add {} {"title":"你说的对吗"}
12:56:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 32,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
13:04:11 完整请求
13:04:11 请求结束
13:04:11 cookie ['user=ddskdkddskea3dl8']
13:04:11 path and query /api/todo/delete {'id': '16'} 
13:04:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "ct": 1492664208,
  "ut": 1492664208,
  "completed": false,
  "title": "你说的对吗"
}
13:04:11 完整请求
13:04:11 请求结束
13:04:11 cookie ['user=ddskdkddskea3dl8']
13:04:11 path and query /api/todo/delete {'id': '17'} 
13:04:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '18'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '19'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '20'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '21'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '22'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "ct": 1492664209,
  "ut": 1492664209,
  "completed": false,
  "title": "你说的对吗"
}
13:04:12 完整请求
13:04:12 请求结束
13:04:12 cookie ['user=ddskdkddskea3dl8']
13:04:12 path and query /api/todo/delete {'id': '23'} 
13:04:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '24'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '25'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '26'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '27'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '28'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "ct": 1492664210,
  "ut": 1492664210,
  "completed": false,
  "title": "你说的对吗"
}
13:04:13 完整请求
13:04:13 请求结束
13:04:13 cookie ['user=ddskdkddskea3dl8']
13:04:13 path and query /api/todo/delete {'id': '29'} 
13:04:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
13:04:14 完整请求
13:04:14 请求结束
13:04:14 cookie ['user=ddskdkddskea3dl8']
13:04:14 path and query /api/todo/delete {'id': '30'} 
13:04:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
13:04:14 完整请求
13:04:14 请求结束
13:04:14 cookie ['user=ddskdkddskea3dl8']
13:04:14 path and query /api/todo/delete {'id': '31'} 
13:04:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
13:04:14 完整请求
13:04:14 请求结束
13:04:14 cookie ['user=ddskdkddskea3dl8']
13:04:14 path and query /api/todo/delete {'id': '32'} 
13:04:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 32,
  "ct": 1492664211,
  "ut": 1492664211,
  "completed": false,
  "title": "你说的对吗"
}
13:04:17 完整请求
13:04:17 请求结束
13:04:17 cookie ['user=ddskdkddskea3dl8']
13:04:17 path and query /todo/index {} 
13:04:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
13:04:17 完整请求
13:04:17 请求结束
13:04:17 完整请求
13:04:17 请求结束
13:04:17 cookie ['user=ddskdkddskea3dl8']
13:04:17 path and query /static {'file': 'gua.js'} 
13:04:17 cookie ['user=ddskdkddskea3dl8']
13:04:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:04:17 path and query /static {'file': 'todo.js'} 
13:04:17 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
13:04:17 完整请求
13:04:17 请求结束
13:04:17 cookie ['user=ddskdkddskea3dl8']
13:04:17 path and query /api/todo/all {} 
13:04:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 7,
    "ct": 1489419465,
    "ut": 1489419465,
    "completed": false,
    "title": "fddfdsf"
  },
  {
    "id": 9,
    "ct": 1489460379,
    "ut": 1489460379,
    "completed": false,
    "title": "fdf"
  },
  {
    "id": 10,
    "ct": 1489462079,
    "ut": 1489462694,
    "completed": false,
    "title": "bbbbb"
  },
  {
    "id": 11,
    "ct": 1492664207,
    "ut": 1492664207,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 12,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 13,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 14,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 15,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  }
]
13:04:19 完整请求
13:04:19 请求结束
13:04:19 cookie ['user=ddskdkddskea3dl8']
13:04:19 path and query /todo/index {} 
13:04:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
13:04:19 完整请求
13:04:19 请求结束
13:04:19 完整请求
13:04:19 cookie ['user=ddskdkddskea3dl8']
13:04:19 请求结束
13:04:19 path and query /static {'file': 'gua.js'} 
13:04:19 cookie ['user=ddskdkddskea3dl8']
13:04:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:04:19 path and query /static {'file': 'todo.js'} 
13:04:19 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
13:04:19 完整请求
13:04:19 请求结束
13:04:19 cookie ['user=ddskdkddskea3dl8']
13:04:19 path and query /api/todo/all {} 
13:04:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 7,
    "ct": 1489419465,
    "ut": 1489419465,
    "completed": false,
    "title": "fddfdsf"
  },
  {
    "id": 9,
    "ct": 1489460379,
    "ut": 1489460379,
    "completed": false,
    "title": "fdf"
  },
  {
    "id": 10,
    "ct": 1489462079,
    "ut": 1489462694,
    "completed": false,
    "title": "bbbbb"
  },
  {
    "id": 11,
    "ct": 1492664207,
    "ut": 1492664207,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 12,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 13,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 14,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  },
  {
    "id": 15,
    "ct": 1492664208,
    "ut": 1492664208,
    "completed": false,
    "title": "你说的对吗"
  }
]
13:04:28 完整请求
13:04:28 请求结束
13:04:28 cookie ['user=ddskdkddskea3dl8']
13:04:28 path and query /weibo {} 
13:04:28 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:04:33 完整请求
13:04:33 请求结束
13:04:33 cookie ['user=ddskdkddskea3dl8']
13:04:33 path and query /weibo/index {} 
13:04:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:04:33 完整请求
13:04:33 请求结束
13:04:33 cookie ['user=ddskdkddskea3dl8']
13:04:33 完整请求
13:04:33 请求结束
13:04:33 cookie ['user=ddskdkddskea3dl8']
13:04:33 path and query /weibo/weibo.css {} 
13:04:33 path and query /static {'file': 'gua.js'} 
13:04:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:04:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:04:33 完整请求
13:04:33 请求结束
13:04:33 cookie ['user=ddskdkddskea3dl8']
13:04:33 path and query /static {'file': 'weibo.js'} 
13:04:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:04:33 完整请求
13:04:33 请求结束
13:04:33 cookie ['user=ddskdkddskea3dl8']
13:04:33 path and query /api/weibo/all {} 
13:04:33 kwargs,  {'weibo_id': 1} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 2} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 3} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 6} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 7} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 8} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 9} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 10} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 11} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 12} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 13} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 14} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 15} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 16} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 17} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 18} <class 'dict'>
13:04:33 kwargs,  {'weibo_id': 19} <class 'dict'>
13:04:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "ut": 1492663710,
    "comments": [
      {
        "id": 1,
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right"
      },
      {
        "id": 9,
        "weibo_id": 1,
        "content": "方森森"
      },
      {
        "id": 11,
        "weibo_id": 1,
        "content": "其他店的"
      },
      {
        "id": 13,
        "weibo_id": 1,
        "content": "范东方"
      },
      {
        "id": 14,
        "weibo_id": 1,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "dfsa "
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "fsdfdsa"
  },
  {
    "id": 7,
    "ut": 1489466799,
    "comments": [],
    "content": "粉丝扥东"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fsafs f"
  },
  {
    "id": 9,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 10,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 11,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 12,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 13,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 14,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 15,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 16,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 17,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 18,
    "comments": [],
    "content": "不想说话"
  },
  {
    "id": 19,
    "comments": [],
    "content": "不想说话"
  }
]
13:04:35 完整请求
13:04:35 请求结束
13:04:35 cookie ['user=ddskdkddskea3dl8']
13:04:35 path and query /api/weibo/delete {'id': '1'} 
13:04:35 kwargs,  {'weibo_id': 1} <class 'dict'>
13:04:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "ut": 1492663710,
  "comments": [
    {
      "id": 1,
      "user_id": 2,
      "weibo_id": 1,
      "content": "楼主说得对"
    },
    {
      "id": 2,
      "user_id": 1,
      "weibo_id": 1,
      "content": "lbvu is right"
    },
    {
      "id": 9,
      "weibo_id": 1,
      "content": "方森森"
    },
    {
      "id": 11,
      "weibo_id": 1,
      "content": "其他店的"
    },
    {
      "id": 13,
      "weibo_id": 1,
      "content": "范东方"
    },
    {
      "id": 14,
      "weibo_id": 1,
      "content": "323232"
    }
  ],
  "user_id": 1,
  "content": "dfsa "
}
13:04:37 完整请求
13:04:37 请求结束
13:04:37 cookie ['user=ddskdkddskea3dl8']
13:04:37 path and query /api/weibo/delete {'id': '16'} 
13:04:37 kwargs,  {'weibo_id': 16} <class 'dict'>
13:04:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "comments": [],
  "content": "不想说话"
}
13:04:38 完整请求
13:04:38 请求结束
13:04:38 cookie ['user=ddskdkddskea3dl8']
13:04:38 path and query /api/weibo/delete {'id': '15'} 
13:04:38 kwargs,  {'weibo_id': 15} <class 'dict'>
13:04:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "comments": [],
  "content": "不想说话"
}
13:04:39 完整请求
13:04:39 请求结束
13:04:39 cookie ['user=ddskdkddskea3dl8']
13:04:39 path and query /api/weibo/delete {'id': '14'} 
13:04:39 kwargs,  {'weibo_id': 14} <class 'dict'>
13:04:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "comments": [],
  "content": "不想说话"
}
13:04:39 完整请求
13:04:39 请求结束
13:04:39 cookie ['user=ddskdkddskea3dl8']
13:04:39 path and query /api/weibo/delete {'id': '13'} 
13:04:39 kwargs,  {'weibo_id': 13} <class 'dict'>
13:04:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "comments": [],
  "content": "不想说话"
}
13:04:39 完整请求
13:04:39 请求结束
13:04:39 cookie ['user=ddskdkddskea3dl8']
13:04:39 path and query /api/weibo/delete {'id': '12'} 
13:04:39 kwargs,  {'weibo_id': 12} <class 'dict'>
13:04:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "comments": [],
  "content": "不想说话"
}
13:04:40 完整请求
13:04:40 请求结束
13:04:40 cookie ['user=ddskdkddskea3dl8']
13:04:40 path and query /api/weibo/delete {'id': '11'} 
13:04:40 kwargs,  {'weibo_id': 11} <class 'dict'>
13:04:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "comments": [],
  "content": "不想说话"
}
13:04:40 完整请求
13:04:40 请求结束
13:04:40 cookie ['user=ddskdkddskea3dl8']
13:04:40 path and query /api/weibo/delete {'id': '10'} 
13:04:40 kwargs,  {'weibo_id': 10} <class 'dict'>
13:04:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "comments": [],
  "content": "不想说话"
}
13:04:40 完整请求
13:04:40 请求结束
13:04:40 cookie ['user=ddskdkddskea3dl8']
13:04:40 path and query /api/weibo/delete {'id': '9'} 
13:04:40 kwargs,  {'weibo_id': 9} <class 'dict'>
13:04:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "comments": [],
  "content": "不想说话"
}
13:04:40 完整请求
13:04:40 请求结束
13:04:40 cookie ['user=ddskdkddskea3dl8']
13:04:40 path and query /api/weibo/delete {'id': '8'} 
13:04:40 kwargs,  {'weibo_id': 8} <class 'dict'>
13:04:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "comments": [],
  "content": "fsafs f"
}
13:04:41 完整请求
13:04:41 请求结束
13:04:41 cookie ['user=ddskdkddskea3dl8']
13:04:41 path and query /api/weibo/delete {'id': '7'} 
13:04:41 kwargs,  {'weibo_id': 7} <class 'dict'>
13:04:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "ut": 1489466799,
  "comments": [],
  "content": "粉丝扥东"
}
13:04:41 完整请求
13:04:41 请求结束
13:04:41 cookie ['user=ddskdkddskea3dl8']
13:04:41 path and query /api/weibo/delete {'id': '6'} 
13:04:41 kwargs,  {'weibo_id': 6} <class 'dict'>
13:04:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "comments": [],
  "content": "fsdfdsa"
}
13:04:42 完整请求
13:04:42 请求结束
13:04:42 cookie ['user=ddskdkddskea3dl8']
13:04:42 path and query /api/weibo/delete {'id': '17'} 
13:04:42 kwargs,  {'weibo_id': 17} <class 'dict'>
13:04:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "comments": [],
  "content": "不想说话"
}
13:04:43 完整请求
13:04:43 请求结束
13:04:43 cookie ['user=ddskdkddskea3dl8']
13:04:43 path and query /api/weibo/delete {'id': '18'} 
13:04:43 kwargs,  {'weibo_id': 18} <class 'dict'>
13:04:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "comments": [],
  "content": "不想说话"
}
13:04:46 完整请求
13:04:46 请求结束
13:04:46 cookie ['user=ddskdkddskea3dl8']
13:04:46 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 完整请求
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 请求结束
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 完整请求
13:04:47 请求结束
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:47 完整请求
13:04:47 请求结束
13:04:47 cookie ['user=ddskdkddskea3dl8']
13:04:47 path and query /api/comment/delete {'id': 'undefined'} 
13:04:48 完整请求
13:04:48 请求结束
13:04:48 cookie ['user=ddskdkddskea3dl8']
13:04:48 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 完整请求
13:04:49 请求结束
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 完整请求
13:04:49 请求结束
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 完整请求
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 完整请求
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 完整请求
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 请求结束
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 完整请求
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 完整请求
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 完整请求
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:49 请求结束
13:04:49 cookie ['user=ddskdkddskea3dl8']
13:04:49 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 完整请求
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 完整请求
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 请求结束
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 完整请求
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 完整请求
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 请求结束
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 完整请求
13:04:51 请求结束
13:04:51 完整请求
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 请求结束
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:04:51 cookie ['user=ddskdkddskea3dl8']
13:04:51 path and query /api/comment/delete {'id': 'undefined'} 
13:05:47 完整请求
13:05:47 请求结束
13:05:47 cookie ['user=ddskdkddskea3dl8']
13:05:47 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 完整请求
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 请求结束
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 完整请求
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 完整请求
13:05:48 请求结束
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 完整请求
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 完整请求
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:05:48 请求结束
13:05:48 cookie ['user=ddskdkddskea3dl8']
13:05:48 path and query /api/comment/delete {'id': 'undefined'} 
13:24:54 完整请求
13:24:54 请求结束
13:24:54 cookie ['user=ddskdkddskea3dl8']
13:24:54 path and query /weibo/index {} 
13:24:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:24:54 完整请求
13:24:54 请求结束
13:24:54 cookie ['user=ddskdkddskea3dl8']
13:24:54 path and query /weibo/weibo.css {} 
13:24:54 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:24:54 完整请求
13:24:54 请求结束
13:24:54 cookie ['user=ddskdkddskea3dl8']
13:24:54 完整请求
13:24:54 path and query /static {'file': 'gua.js'} 
13:24:54 请求结束
13:24:54 cookie ['user=ddskdkddskea3dl8']
13:24:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:24:54 path and query /static {'file': 'weibo.js'} 
13:24:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:24:54 完整请求
13:24:54 请求结束
13:24:54 cookie ['user=ddskdkddskea3dl8']
13:24:54 path and query /api/weibo/all {} 
13:24:54 kwargs,  {'weibo_id': 2} <class 'dict'>
13:24:54 kwargs,  {'weibo_id': 3} <class 'dict'>
13:24:54 kwargs,  {'weibo_id': 19} <class 'dict'>
13:24:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 5,
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "id": 7,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 19,
    "comments": [],
    "content": "不想说话"
  }
]
13:28:26 完整请求
13:28:26 请求结束
13:28:26 cookie ['user=ddskdkddskea3dl8']
13:28:26 path and query /weibo/index {} 
13:28:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:28:26 完整请求
13:28:26 请求结束
13:28:26 完整请求
13:28:26 cookie ['user=ddskdkddskea3dl8']
13:28:26 path and query /weibo/weibo.css {} 
13:28:26 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:28:26 请求结束
13:28:26 完整请求
13:28:26 cookie ['user=ddskdkddskea3dl8']
13:28:26 请求结束
13:28:26 path and query /static {'file': 'gua.js'} 
13:28:26 cookie ['user=ddskdkddskea3dl8']
13:28:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:28:26 path and query /static {'file': 'weibo.js'} 
13:28:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:28:26 完整请求
13:28:26 请求结束
13:28:26 cookie ['user=ddskdkddskea3dl8']
13:28:26 path and query /api/weibo/all {} 
13:28:26 kwargs,  {'weibo_id': 2} <class 'dict'>
13:28:26 kwargs,  {'weibo_id': 3} <class 'dict'>
13:28:26 kwargs,  {'weibo_id': 19} <class 'dict'>
13:28:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 2,
    "content": "你好",
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "content": "hello",
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "id": 4,
        "content": "123",
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "id": 5,
        "content": "asdf",
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "id": 7,
        "content": "说得好",
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "id": 8,
        "content": "说得好",
        "weibo_id": 2
      },
      {
        "id": 15,
        "content": "323232",
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "id": 3,
    "content": "hahaha",
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "content": "123",
        "weibo_id": 3
      },
      {
        "id": 16,
        "content": "323232",
        "weibo_id": 3
      },
      {
        "id": 17,
        "content": "323232",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 19,
    "content": "不想说话",
    "comments": []
  }
]
13:33:45 完整请求
13:33:45 请求结束
13:33:45 cookie ['user=ddskdkddskea3dl8']
13:33:45 path and query /weibo/index {} 
13:33:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:33:45 完整请求
13:33:45 请求结束
13:33:45 完整请求
13:33:45 cookie ['user=ddskdkddskea3dl8']
13:33:45 请求结束
13:33:45 cookie ['user=ddskdkddskea3dl8']
13:33:45 path and query /weibo/weibo.css {} 
13:33:45 完整请求
13:33:45 请求结束
13:33:45 cookie ['user=ddskdkddskea3dl8']
13:33:45 path and query /static {'file': 'weibo.js'} 
13:33:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            # <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apicommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apicommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:33:45 path and query /static {'file': 'gua.js'} 
13:33:45 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:33:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apicommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apicommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:33:45 完整请求
13:33:45 请求结束
13:33:45 cookie ['user=ddskdkddskea3dl8']
13:33:45 path and query /api/weibo/all {} 
13:33:45 kwargs,  {'weibo_id': 2} <class 'dict'>
13:33:45 kwargs,  {'weibo_id': 3} <class 'dict'>
13:33:45 kwargs,  {'weibo_id': 19} <class 'dict'>
13:33:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 3,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 4,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 5,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "id": 7,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "user_id": 2,
        "id": 8,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 15,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "id": 2,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "id": 6,
        "content": "123"
      },
      {
        "weibo_id": 3,
        "id": 16,
        "content": "323232"
      },
      {
        "weibo_id": 3,
        "id": 17,
        "content": "323232"
      }
    ],
    "user_id": 1,
    "id": 3,
    "content": "hahaha"
  },
  {
    "comments": [],
    "id": 19,
    "content": "不想说话"
  }
]
13:41:07 完整请求
13:41:07 请求结束
13:41:07 cookie ['user=ddskdkddskea3dl8']
13:41:07 path and query /weibo/index {} 
13:41:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:41:07 完整请求
13:41:07 请求结束
13:41:07 cookie ['user=ddskdkddskea3dl8']
13:41:07 完整请求
13:41:07 path and query /weibo/weibo.css {} 
13:41:07 请求结束
13:41:07 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:41:07 cookie ['user=ddskdkddskea3dl8']
13:41:07 完整请求
13:41:07 path and query /static {'file': 'gua.js'} 
13:41:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:41:07 请求结束
13:41:07 cookie ['user=ddskdkddskea3dl8']
13:41:07 path and query /static {'file': 'weibo.js'} 
13:41:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:41:07 完整请求
13:41:07 请求结束
13:41:07 cookie ['user=ddskdkddskea3dl8']
13:41:07 path and query /api/weibo/all {} 
13:41:07 kwargs,  {'weibo_id': 2} <class 'dict'>
13:41:07 kwargs,  {'weibo_id': 3} <class 'dict'>
13:41:07 kwargs,  {'weibo_id': 19} <class 'dict'>
13:41:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1,
        "id": 3
      },
      {
        "weibo_id": 2,
        "content": "123",
        "user_id": 1,
        "id": 4
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1,
        "id": 5
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 7
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "user_id": 1,
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  },
  {
    "content": "不想说话",
    "comments": [],
    "id": 19
  }
]
13:41:10 完整请求
13:41:10 请求结束
13:41:10 cookie ['user=ddskdkddskea3dl8']
13:41:10 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 完整请求
13:41:11 请求结束
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 完整请求
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 完整请求
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 完整请求
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:11 完整请求
13:41:11 请求结束
13:41:11 cookie ['user=ddskdkddskea3dl8']
13:41:11 path and query /api/comment/delete {'id': 'undefined'} 
13:41:35 完整请求
13:41:35 请求结束
13:41:35 cookie ['user=ddskdkddskea3dl8']
13:41:35 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 完整请求
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 请求结束
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 完整请求
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 请求结束
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 完整请求
13:41:38 请求结束
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 完整请求
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 完整请求
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 完整请求
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:41:38 完整请求
13:41:38 请求结束
13:41:38 cookie ['user=ddskdkddskea3dl8']
13:41:38 path and query /api/comment/delete {'id': 'undefined'} 
13:47:24 完整请求
13:47:24 请求结束
13:47:24 cookie ['user=ddskdkddskea3dl8']
13:47:24 path and query /weibo/index {} 
13:47:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:47:24 完整请求
13:47:24 请求结束
13:47:24 cookie ['user=ddskdkddskea3dl8']
13:47:24 path and query /weibo/weibo.css {} 
13:47:24 完整请求
13:47:24 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:47:24 请求结束
13:47:24 cookie ['user=ddskdkddskea3dl8']
13:47:24 path and query /static {'file': 'gua.js'} 
13:47:24 完整请求
13:47:24 请求结束
13:47:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:47:24 cookie ['user=ddskdkddskea3dl8']
13:47:24 path and query /static {'file': 'weibo.js'} 
13:47:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:47:24 完整请求
13:47:24 请求结束
13:47:24 cookie ['user=ddskdkddskea3dl8']
13:47:24 path and query /api/weibo/all {} 
13:47:24 kwargs,  {'weibo_id': 2} <class 'dict'>
13:47:24 kwargs,  {'weibo_id': 3} <class 'dict'>
13:47:24 kwargs,  {'weibo_id': 19} <class 'dict'>
13:47:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1,
        "id": 3
      },
      {
        "weibo_id": 2,
        "content": "123",
        "user_id": 1,
        "id": 4
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1,
        "id": 5
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 7
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "user_id": 1,
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  },
  {
    "content": "不想说话",
    "comments": [],
    "id": 19
  }
]
13:47:32 完整请求
13:47:32 请求结束
13:47:32 cookie ['user=ddskdkddskea3dl8']
13:47:32 path and query /api/weibo/add {} {"content":"ddd"}
13:47:32 kwargs,  {'weibo_id': 20} <class 'dict'>
13:47:32 return weibo: {'content': 'ddd', 'comments': [], 'id': 20}
13:47:32 kwargs,  {'weibo_id': 20} <class 'dict'>
13:47:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "ddd",
  "comments": [],
  "id": 20
}
13:47:34 完整请求
13:47:34 请求结束
13:47:34 cookie ['user=ddskdkddskea3dl8']
13:47:34 path and query /weibo/index {} 
13:47:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:47:34 完整请求
13:47:34 请求结束
13:47:34 完整请求
13:47:34 cookie ['user=ddskdkddskea3dl8']
13:47:34 请求结束
13:47:34 path and query /weibo/weibo.css {} 
13:47:34 cookie ['user=ddskdkddskea3dl8']
13:47:34 path and query /static {'file': 'gua.js'} 
13:47:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:47:34 完整请求
13:47:34 请求结束
13:47:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:47:34 cookie ['user=ddskdkddskea3dl8']
13:47:34 path and query /static {'file': 'weibo.js'} 
13:47:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:47:34 完整请求
13:47:34 请求结束
13:47:34 cookie ['user=ddskdkddskea3dl8']
13:47:34 path and query /api/weibo/all {} 
13:47:34 kwargs,  {'weibo_id': 2} <class 'dict'>
13:47:34 kwargs,  {'weibo_id': 3} <class 'dict'>
13:47:34 kwargs,  {'weibo_id': 19} <class 'dict'>
13:47:34 kwargs,  {'weibo_id': 20} <class 'dict'>
13:47:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1,
        "id": 3
      },
      {
        "weibo_id": 2,
        "content": "123",
        "user_id": 1,
        "id": 4
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1,
        "id": 5
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 7
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "user_id": 1,
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  },
  {
    "content": "不想说话",
    "comments": [],
    "id": 19
  },
  {
    "content": "ddd",
    "comments": [],
    "id": 20
  }
]
13:47:39 完整请求
13:47:39 请求结束
13:47:39 cookie ['user=ddskdkddskea3dl8']
13:47:39 path and query /api/comment/delete {'id': 'undefined'} 
13:47:43 完整请求
13:47:43 请求结束
13:47:43 cookie ['user=ddskdkddskea3dl8']
13:47:43 path and query /weibo/index {} 
13:47:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:47:43 完整请求
13:47:43 请求结束
13:47:43 cookie ['user=ddskdkddskea3dl8']
13:47:43 path and query /weibo/weibo.css {} 
13:47:43 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:47:43 完整请求
13:47:43 请求结束
13:47:43 cookie ['user=ddskdkddskea3dl8']
13:47:43 path and query /static {'file': 'gua.js'} 
13:47:43 完整请求
13:47:43 请求结束
13:47:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:47:43 cookie ['user=ddskdkddskea3dl8']
13:47:43 path and query /static {'file': 'weibo.js'} 
13:47:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:47:43 完整请求
13:47:43 请求结束
13:47:43 cookie ['user=ddskdkddskea3dl8']
13:47:43 path and query /api/weibo/all {} 
13:47:43 kwargs,  {'weibo_id': 2} <class 'dict'>
13:47:43 kwargs,  {'weibo_id': 3} <class 'dict'>
13:47:43 kwargs,  {'weibo_id': 19} <class 'dict'>
13:47:43 kwargs,  {'weibo_id': 20} <class 'dict'>
13:47:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "user_id": 1,
        "id": 3
      },
      {
        "weibo_id": 2,
        "content": "123",
        "user_id": 1,
        "id": 4
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "user_id": 1,
        "id": 5
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 7
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "user_id": 2,
        "id": 8
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "user_id": 1,
    "id": 2
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "user_id": 1,
        "id": 6
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "user_id": 1,
    "id": 3
  },
  {
    "content": "不想说话",
    "comments": [],
    "id": 19
  },
  {
    "content": "ddd",
    "comments": [],
    "id": 20
  }
]
13:47:46 完整请求
13:47:46 请求结束
13:47:46 cookie ['user=ddskdkddskea3dl8']
13:47:46 path and query /api/comment/delete {'id': 'undefined'} 
13:55:46 完整请求
13:55:46 请求结束
13:55:46 cookie ['user=ddskdkddskea3dl8']
13:55:46 path and query /weibo/index {} 
13:55:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
13:55:46 完整请求
13:55:46 请求结束
13:55:46 cookie ['user=ddskdkddskea3dl8']
13:55:46 path and query /weibo/weibo.css {} 
13:55:46 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:55:46 完整请求
13:55:46 完整请求
13:55:46 请求结束
13:55:46 请求结束
13:55:46 cookie ['user=ddskdkddskea3dl8']
13:55:46 cookie ['user=ddskdkddskea3dl8']
13:55:46 path and query /static {'file': 'gua.js'} 
13:55:46 path and query /static {'file': 'weibo.js'} 
13:55:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
13:55:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            console.log(Weibo_id)
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

13:55:46 完整请求
13:55:46 请求结束
13:55:46 cookie ['user=ddskdkddskea3dl8']
13:55:46 path and query /api/weibo/all {} 
13:55:46 kwargs,  {'weibo_id': 2} <class 'dict'>
13:55:46 kwargs,  {'weibo_id': 3} <class 'dict'>
13:55:46 kwargs,  {'weibo_id': 19} <class 'dict'>
13:55:46 kwargs,  {'weibo_id': 20} <class 'dict'>
13:55:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "123",
        "id": 4,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "asdf",
        "id": 5,
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "id": 7,
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "id": 6,
        "user_id": 1,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "id": 19,
    "content": "不想说话",
    "comments": []
  },
  {
    "id": 20,
    "content": "ddd",
    "comments": []
  }
]
13:55:52 完整请求
13:55:52 请求结束
13:55:54 完整请求
13:55:54 请求结束
13:55:54 cookie ['user=ddskdkddskea3dl8']
13:55:54 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 完整请求
13:56:02 请求结束
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
13:56:02 完整请求
13:56:02 请求结束
13:56:02 cookie ['user=ddskdkddskea3dl8']
13:56:02 path and query /api/comment/delete {'id': 'undefined'} 
14:00:02 完整请求
14:00:02 请求结束
14:00:02 cookie ['user=ddskdkddskea3dl8']
14:00:02 path and query /weibo/index {} 
14:00:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:00:02 完整请求
14:00:02 请求结束
14:00:02 cookie ['user=ddskdkddskea3dl8']
14:00:02 path and query /weibo/weibo.css {} 
14:00:02 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:00:02 完整请求
14:00:02 请求结束
14:00:02 完整请求
14:00:02 cookie ['user=ddskdkddskea3dl8']
14:00:02 path and query /static {'file': 'gua.js'} 
14:00:02 请求结束
14:00:02 cookie ['user=ddskdkddskea3dl8']
14:00:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:00:02 path and query /static {'file': 'weibo.js'} 
14:00:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:00:07 完整请求
14:00:07 完整请求
14:00:07 请求结束
14:00:07 请求结束
14:00:35 完整请求
14:00:35 请求结束
14:00:35 cookie ['user=ddskdkddskea3dl8']
14:00:35 path and query /weibo/index {} 
14:00:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:00:35 完整请求
14:00:35 请求结束
14:00:35 cookie ['user=ddskdkddskea3dl8']
14:00:35 path and query /weibo/weibo.css {} 
14:00:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:00:35 完整请求
14:00:35 完整请求
14:00:35 请求结束
14:00:35 请求结束
14:00:35 cookie ['user=ddskdkddskea3dl8']
14:00:35 cookie ['user=ddskdkddskea3dl8']
14:00:35 path and query /static {'file': 'gua.js'} 
14:00:35 path and query /static {'file': 'weibo.js'} 
14:00:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:00:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:00:41 完整请求
14:00:41 完整请求
14:00:41 请求结束
14:00:41 请求结束
14:01:17 完整请求
14:01:17 请求结束
14:01:17 cookie ['user=ddskdkddskea3dl8']
14:01:17 path and query /weibo/index {} 
14:01:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:01:17 完整请求
14:01:17 请求结束
14:01:17 cookie ['user=ddskdkddskea3dl8']
14:01:17 path and query /weibo/weibo.css {} 
14:01:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:01:17 完整请求
14:01:17 完整请求
14:01:17 请求结束
14:01:17 请求结束
14:01:17 cookie ['user=ddskdkddskea3dl8']
14:01:17 cookie ['user=ddskdkddskea3dl8']
14:01:17 path and query /static {'file': 'gua.js'} 
14:01:17 path and query /static {'file': 'weibo.js'} 
14:01:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:01:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:01:23 完整请求
14:01:23 完整请求
14:01:23 请求结束
14:01:23 请求结束
14:02:36 完整请求
14:02:36 请求结束
14:02:36 cookie ['user=ddskdkddskea3dl8']
14:02:36 path and query /weibo/index {} 
14:02:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:02:36 完整请求
14:02:36 请求结束
14:02:36 cookie ['user=ddskdkddskea3dl8']
14:02:36 path and query /weibo/weibo.css {} 
14:02:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:02:36 完整请求
14:02:36 完整请求
14:02:36 请求结束
14:02:36 请求结束
14:02:36 cookie ['user=ddskdkddskea3dl8']
14:02:36 cookie ['user=ddskdkddskea3dl8']
14:02:36 path and query /static {'file': 'gua.js'} 
14:02:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:02:36 path and query /static {'file': 'weibo.js'} 
14:02:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:02:36 完整请求
14:02:36 请求结束
14:02:36 cookie ['user=ddskdkddskea3dl8']
14:02:36 path and query /api/weibo/all {} 
14:02:36 kwargs,  {'weibo_id': 2} <class 'dict'>
14:02:36 kwargs,  {'weibo_id': 3} <class 'dict'>
14:02:36 kwargs,  {'weibo_id': 19} <class 'dict'>
14:02:36 kwargs,  {'weibo_id': 20} <class 'dict'>
14:02:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "323232",
        "id": 15
      }
    ],
    "content": "你好",
    "id": 2,
    "user_id": 1
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 16
      },
      {
        "weibo_id": 3,
        "content": "323232",
        "id": 17
      }
    ],
    "content": "hahaha",
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:02:42 完整请求
14:02:42 请求结束
14:03:45 完整请求
14:03:45 请求结束
14:03:45 cookie ['user=ddskdkddskea3dl8']
14:03:45 path and query /weibo/index {} 
14:03:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:03:45 完整请求
14:03:45 请求结束
14:03:45 cookie ['user=ddskdkddskea3dl8']
14:03:45 path and query /weibo/weibo.css {} 
14:03:45 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:03:45 完整请求
14:03:45 完整请求
14:03:45 请求结束
14:03:45 请求结束
14:03:45 cookie ['user=ddskdkddskea3dl8']
14:03:45 cookie ['user=ddskdkddskea3dl8']
14:03:45 path and query /static {'file': 'weibo.js'} 
14:03:45 path and query /static {'file': 'gua.js'} 
14:03:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:03:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:03:45 完整请求
14:03:45 请求结束
14:03:45 cookie ['user=ddskdkddskea3dl8']
14:03:45 path and query /api/weibo/all {} 
14:03:45 kwargs,  {'weibo_id': 2} <class 'dict'>
14:03:45 kwargs,  {'weibo_id': 3} <class 'dict'>
14:03:45 kwargs,  {'weibo_id': 19} <class 'dict'>
14:03:45 kwargs,  {'weibo_id': 20} <class 'dict'>
14:03:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:03:50 完整请求
14:03:50 请求结束
14:03:50 cookie ['user=ddskdkddskea3dl8']
14:03:50 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:03:51 完整请求
14:03:51 请求结束
14:03:51 cookie ['user=ddskdkddskea3dl8']
14:03:51 path and query /api/comment/delete {'id': 'undefined'} 
14:04:10 完整请求
14:04:10 请求结束
14:04:10 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:10 path and query /weibo/index {} 
14:04:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:04:10 完整请求
14:04:10 请求结束
14:04:10 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:10 完整请求
14:04:10 path and query /weibo/weibo.css {} 
14:04:10 请求结束
14:04:10 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:10 完整请求
14:04:10 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:04:10 path and query /static {'file': 'gua.js'} 
14:04:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:04:10 请求结束
14:04:10 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:10 path and query /static {'file': 'weibo.js'} 
14:04:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:04:10 完整请求
14:04:10 请求结束
14:04:10 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:10 path and query /api/weibo/all {} 
14:04:10 kwargs,  {'weibo_id': 2} <class 'dict'>
14:04:10 kwargs,  {'weibo_id': 3} <class 'dict'>
14:04:10 kwargs,  {'weibo_id': 19} <class 'dict'>
14:04:10 kwargs,  {'weibo_id': 20} <class 'dict'>
14:04:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:04:14 完整请求
14:04:14 完整请求
14:04:14 请求结束
14:04:14 请求结束
14:04:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:14 path and query /api/comment/delete {'id': 'undefined'} 
14:04:14 path and query /api/comment/add {} 
14:04:15 完整请求
14:04:15 请求结束
14:04:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:15 path and query /api/comment/add {} 
14:04:15 完整请求
14:04:15 请求结束
14:04:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:15 path and query /api/comment/delete {'id': 'undefined'} 
14:04:15 完整请求
14:04:15 请求结束
14:04:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:15 完整请求
14:04:15 path and query /api/comment/add {} 
14:04:15 请求结束
14:04:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:15 path and query /api/comment/delete {'id': 'undefined'} 
14:04:15 完整请求
14:04:15 请求结束
14:04:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:15 path and query /api/comment/add {} 
14:04:19 完整请求
14:04:19 请求结束
14:04:19 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:19 path and query /api/comment/add {} 
14:04:20 完整请求
14:04:20 请求结束
14:04:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:20 path and query /api/comment/add {} 
14:04:20 完整请求
14:04:20 请求结束
14:04:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:20 path and query /api/comment/add {} 
14:04:20 完整请求
14:04:20 请求结束
14:04:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:20 path and query /api/comment/add {} 
14:04:20 完整请求
14:04:20 请求结束
14:04:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:20 path and query /api/comment/add {} 
14:04:39 完整请求
14:04:39 请求结束
14:04:39 完整请求
14:04:39 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:39 请求结束
14:04:39 path and query /api/comment/add {} 
14:04:39 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:39 path and query /api/comment/delete {'id': 'undefined'} 
14:04:44 完整请求
14:04:44 请求结束
14:04:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:44 path and query /api/comment/add {} 
14:04:44 完整请求
14:04:44 请求结束
14:04:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:44 path and query /api/comment/delete {'id': 'undefined'} 
14:04:46 完整请求
14:04:46 请求结束
14:04:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:46 完整请求
14:04:46 请求结束
14:04:46 path and query /api/comment/add {} 
14:04:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:46 path and query /api/comment/delete {'id': 'undefined'} 
14:04:46 完整请求
14:04:46 请求结束
14:04:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:46 path and query /api/comment/add {} 
14:04:51 完整请求
14:04:51 请求结束
14:04:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:51 path and query /api/comment/delete {'id': 'undefined'} 
14:04:53 完整请求
14:04:53 请求结束
14:04:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:53 path and query /api/comment/add {} 
14:04:53 完整请求
14:04:53 请求结束
14:04:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:53 path and query /api/comment/delete {'id': 'undefined'} 
14:04:53 完整请求
14:04:53 请求结束
14:04:53 完整请求
14:04:53 请求结束
14:04:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:53 path and query /api/comment/add {} 
14:04:53 path and query /api/comment/delete {'id': 'undefined'} 
14:04:55 完整请求
14:04:55 请求结束
14:04:55 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:55 path and query /api/comment/add {} 
14:04:58 完整请求
14:04:58 请求结束
14:04:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:58 path and query /weibo/index {} 
14:04:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:04:58 完整请求
14:04:58 请求结束
14:04:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:58 path and query /weibo/weibo.css {} 
14:04:58 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:04:58 完整请求
14:04:58 完整请求
14:04:58 请求结束
14:04:58 请求结束
14:04:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:58 path and query /static {'file': 'weibo.js'} 
14:04:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:04:58 path and query /static {'file': 'gua.js'} 
14:04:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:04:58 完整请求
14:04:58 请求结束
14:04:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:04:58 path and query /api/weibo/all {} 
14:04:58 kwargs,  {'weibo_id': 2} <class 'dict'>
14:04:58 kwargs,  {'weibo_id': 3} <class 'dict'>
14:04:58 kwargs,  {'weibo_id': 19} <class 'dict'>
14:04:58 kwargs,  {'weibo_id': 20} <class 'dict'>
14:04:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:05:03 完整请求
14:05:03 请求结束
14:05:03 cookie ['user=ddskdkddskea3dl8']
14:05:03 path and query /weibo/index {} 
14:05:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:05:03 完整请求
14:05:03 请求结束
14:05:03 cookie ['user=ddskdkddskea3dl8']
14:05:03 path and query /weibo/weibo.css {} 
14:05:03 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:05:03 完整请求
14:05:03 完整请求
14:05:03 请求结束
14:05:03 请求结束
14:05:03 cookie ['user=ddskdkddskea3dl8']
14:05:03 path and query /static {'file': 'weibo.js'} 
14:05:03 cookie ['user=ddskdkddskea3dl8']
14:05:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:05:03 path and query /static {'file': 'gua.js'} 
14:05:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:05:03 完整请求
14:05:03 请求结束
14:05:03 cookie ['user=ddskdkddskea3dl8']
14:05:03 path and query /api/weibo/all {} 
14:05:03 kwargs,  {'weibo_id': 2} <class 'dict'>
14:05:03 kwargs,  {'weibo_id': 3} <class 'dict'>
14:05:03 kwargs,  {'weibo_id': 19} <class 'dict'>
14:05:03 kwargs,  {'weibo_id': 20} <class 'dict'>
14:05:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:05:09 完整请求
14:05:09 请求结束
14:07:55 完整请求
14:07:55 请求结束
14:07:55 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:07:55 path and query /api/comment/add {} 
14:07:58 完整请求
14:07:58 请求结束
14:07:58 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:07:58 path and query /api/comment/add {} 
14:08:57 完整请求
14:08:57 请求结束
14:08:57 cookie ['user=ddskdkddskea3dl8']
14:08:57 path and query /weibo/index {} 
14:08:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:08:57 完整请求
14:08:57 请求结束
14:08:57 cookie ['user=ddskdkddskea3dl8']
14:08:57 path and query /weibo/weibo.css {} 
14:08:57 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:08:57 完整请求
14:08:57 请求结束
14:08:57 cookie ['user=ddskdkddskea3dl8']
14:08:57 path and query /static {'file': 'gua.js'} 
14:08:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:08:57 完整请求
14:08:57 请求结束
14:08:57 cookie ['user=ddskdkddskea3dl8']
14:08:57 path and query /static {'file': 'weibo.js'} 
14:08:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:08:57 完整请求
14:08:57 请求结束
14:08:57 cookie ['user=ddskdkddskea3dl8']
14:08:57 path and query /api/weibo/all {} 
14:08:57 kwargs,  {'weibo_id': 2} <class 'dict'>
14:08:57 kwargs,  {'weibo_id': 3} <class 'dict'>
14:08:57 kwargs,  {'weibo_id': 19} <class 'dict'>
14:08:57 kwargs,  {'weibo_id': 20} <class 'dict'>
14:08:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:09:00 完整请求
14:09:00 请求结束
14:09:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:00 path and query /weibo/index {} 
14:09:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:09:01 完整请求
14:09:01 请求结束
14:09:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:01 完整请求
14:09:01 path and query /weibo/weibo.css {} 
14:09:01 请求结束
14:09:01 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:09:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:01 path and query /static {'file': 'gua.js'} 
14:09:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:09:01 完整请求
14:09:01 请求结束
14:09:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:01 path and query /static {'file': 'weibo.js'} 
14:09:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:09:01 完整请求
14:09:01 请求结束
14:09:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:01 path and query /api/weibo/all {} 
14:09:01 kwargs,  {'weibo_id': 2} <class 'dict'>
14:09:01 kwargs,  {'weibo_id': 3} <class 'dict'>
14:09:01 kwargs,  {'weibo_id': 19} <class 'dict'>
14:09:01 kwargs,  {'weibo_id': 20} <class 'dict'>
14:09:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  }
]
14:09:03 完整请求
14:09:03 请求结束
14:09:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:03 path and query /api/weibo/add {} {"content":"ddd"}
14:09:03 kwargs,  {'weibo_id': 21} <class 'dict'>
14:09:03 return weibo: {'comments': [], 'content': 'ddd', 'id': 21}
14:09:03 kwargs,  {'weibo_id': 21} <class 'dict'>
14:09:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "ddd",
  "id": 21
}
14:09:08 完整请求
14:09:08 请求结束
14:09:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:08 path and query /api/weibo/add {} 
14:09:11 完整请求
14:09:11 请求结束
14:09:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:11 path and query /api/weibo/add {} 
14:09:14 完整请求
14:09:14 请求结束
14:09:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:14 path and query /api/weibo/add {} 
14:09:14 完整请求
14:09:14 请求结束
14:09:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:14 path and query /api/weibo/add {} 
14:09:14 完整请求
14:09:14 请求结束
14:09:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:14 path and query /api/weibo/add {} 
14:09:15 完整请求
14:09:15 请求结束
14:09:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:15 path and query /api/weibo/add {} 
14:09:15 完整请求
14:09:15 请求结束
14:09:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:15 path and query /api/weibo/add {} {"content":"dddddd"}
14:09:15 kwargs,  {'weibo_id': 22} <class 'dict'>
14:09:15 return weibo: {'comments': [], 'content': 'dddddd', 'id': 22}
14:09:15 kwargs,  {'weibo_id': 22} <class 'dict'>
14:09:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "dddddd",
  "id": 22
}
14:09:15 完整请求
14:09:15 请求结束
14:09:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:15 path and query /api/weibo/add {} 
14:09:15 完整请求
14:09:15 请求结束
14:09:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:15 path and query /api/weibo/add {} 
14:09:15 完整请求
14:09:15 请求结束
14:09:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:15 path and query /api/weibo/add {} 
14:09:16 完整请求
14:09:16 请求结束
14:09:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:16 path and query /api/weibo/add {} 
14:09:16 完整请求
14:09:16 请求结束
14:09:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:16 path and query /api/weibo/add {} 
14:09:16 完整请求
14:09:16 请求结束
14:09:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:16 path and query /api/weibo/add {} 
14:09:19 完整请求
14:09:19 请求结束
14:09:19 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:19 path and query /api/weibo/add {} 
14:09:20 完整请求
14:09:20 请求结束
14:09:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:20 path and query /api/weibo/add {} 
14:09:23 完整请求
14:09:23 请求结束
14:09:23 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:23 path and query /api/weibo/add {} {"content":"dddddd"}
14:09:23 kwargs,  {'weibo_id': 23} <class 'dict'>
14:09:23 return weibo: {'comments': [], 'content': 'dddddd', 'id': 23}
14:09:23 kwargs,  {'weibo_id': 23} <class 'dict'>
14:09:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "dddddd",
  "id": 23
}
14:09:28 完整请求
14:09:28 请求结束
14:09:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:28 path and query /api/weibo/add {} 
14:09:31 完整请求
14:09:31 请求结束
14:09:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:31 path and query /weibo/index {} 
14:09:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:09:31 完整请求
14:09:31 请求结束
14:09:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:31 path and query /weibo/weibo.css {} 
14:09:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:09:31 完整请求
14:09:31 完整请求
14:09:31 请求结束
14:09:31 请求结束
14:09:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:31 path and query /static {'file': 'gua.js'} 
14:09:31 path and query /static {'file': 'weibo.js'} 
14:09:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:09:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:09:31 完整请求
14:09:31 请求结束
14:09:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:31 path and query /api/weibo/all {} 
14:09:31 kwargs,  {'weibo_id': 2} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 3} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 19} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 20} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 21} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 22} <class 'dict'>
14:09:31 kwargs,  {'weibo_id': 23} <class 'dict'>
14:09:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 21
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 22
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 23
  }
]
14:09:36 完整请求
14:09:36 请求结束
14:09:36 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:36 path and query /api/weibo/add {} 
14:09:39 完整请求
14:09:39 请求结束
14:09:39 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:39 path and query /api/weibo/add {} 
14:09:41 完整请求
14:09:41 请求结束
14:09:41 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:41 path and query /api/weibo/add {} 
14:09:44 完整请求
14:09:44 请求结束
14:09:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:44 path and query /api/weibo/add {} 
14:09:44 完整请求
14:09:44 请求结束
14:09:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:44 path and query /api/weibo/add {} 
14:09:44 完整请求
14:09:44 请求结束
14:09:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:44 path and query /api/weibo/add {} 
14:09:44 完整请求
14:09:44 请求结束
14:09:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:44 path and query /api/weibo/add {} 
14:09:46 完整请求
14:09:46 请求结束
14:09:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:46 path and query /api/weibo/add {} 
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} 
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} 
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} {"content":"溺爱"}
14:09:47 kwargs,  {'weibo_id': 24} <class 'dict'>
14:09:47 return weibo: {'comments': [], 'content': '溺爱', 'id': 24}
14:09:47 kwargs,  {'weibo_id': 24} <class 'dict'>
14:09:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "溺爱",
  "id": 24
}
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} 
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} 
14:09:47 完整请求
14:09:47 请求结束
14:09:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:09:47 path and query /api/weibo/add {} {"content":"溺爱"}
14:09:47 kwargs,  {'weibo_id': 25} <class 'dict'>
14:09:47 return weibo: {'comments': [], 'content': '溺爱', 'id': 25}
14:09:47 kwargs,  {'weibo_id': 25} <class 'dict'>
14:09:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "溺爱",
  "id": 25
}
14:10:08 完整请求
14:10:08 请求结束
14:10:08 cookie ['user=ddskdkddskea3dl8']
14:10:08 path and query /api/weibo/add {} {"content":"nidennfs"}
14:10:08 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:08 return weibo: {'comments': [], 'content': 'nidennfs', 'id': 26}
14:10:08 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "nidennfs",
  "id": 26
}
14:10:11 完整请求
14:10:11 请求结束
14:10:11 cookie ['user=ddskdkddskea3dl8']
14:10:11 path and query /weibo/index {} 
14:10:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:10:11 完整请求
14:10:11 请求结束
14:10:11 cookie ['user=ddskdkddskea3dl8']
14:10:11 path and query /weibo/weibo.css {} 
14:10:11 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:10:11 完整请求
14:10:11 请求结束
14:10:11 cookie ['user=ddskdkddskea3dl8']
14:10:11 path and query /static {'file': 'gua.js'} 
14:10:11 完整请求
14:10:11 请求结束
14:10:11 cookie ['user=ddskdkddskea3dl8']
14:10:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:10:11 path and query /static {'file': 'weibo.js'} 
14:10:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:10:11 完整请求
14:10:11 请求结束
14:10:11 cookie ['user=ddskdkddskea3dl8']
14:10:11 path and query /api/weibo/all {} 
14:10:11 kwargs,  {'weibo_id': 2} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 3} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 19} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 20} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 21} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 22} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 23} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 24} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 25} <class 'dict'>
14:10:11 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 21
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 22
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 23
  },
  {
    "comments": [],
    "content": "溺爱",
    "id": 24
  },
  {
    "comments": [],
    "content": "溺爱",
    "id": 25
  },
  {
    "comments": [],
    "content": "nidennfs",
    "id": 26
  }
]
14:10:22 完整请求
14:10:22 请求结束
14:10:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:22 path and query /weibo/index {} 
14:10:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:10:22 完整请求
14:10:22 请求结束
14:10:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:22 path and query /weibo/weibo.css {} 
14:10:22 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:10:22 完整请求
14:10:22 请求结束
14:10:22 完整请求
14:10:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:22 请求结束
14:10:22 path and query /static {'file': 'weibo.js'} 
14:10:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:22 path and query /static {'file': 'gua.js'} 
14:10:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:10:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:10:22 完整请求
14:10:22 请求结束
14:10:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:22 path and query /api/weibo/all {} 
14:10:22 kwargs,  {'weibo_id': 2} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 3} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 19} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 20} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 21} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 22} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 23} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 24} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 25} <class 'dict'>
14:10:22 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "不想说话",
    "id": 19
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 20
  },
  {
    "comments": [],
    "content": "ddd",
    "id": 21
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 22
  },
  {
    "comments": [],
    "content": "dddddd",
    "id": 23
  },
  {
    "comments": [],
    "content": "溺爱",
    "id": 24
  },
  {
    "comments": [],
    "content": "溺爱",
    "id": 25
  },
  {
    "comments": [],
    "content": "nidennfs",
    "id": 26
  }
]
14:10:28 完整请求
14:10:28 完整请求
14:10:28 请求结束
14:10:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:28 path and query /api/comment/add {} 
14:10:28 请求结束
14:10:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:28 path and query /api/weibo/delete {'id': '24'} 
14:10:28 kwargs,  {'weibo_id': 24} <class 'dict'>
14:10:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "溺爱",
  "id": 24
}
14:10:29 完整请求
14:10:29 请求结束
14:10:29 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:29 path and query /api/weibo/delete {'id': '23'} 
14:10:29 kwargs,  {'weibo_id': 23} <class 'dict'>
14:10:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "dddddd",
  "id": 23
}
14:10:30 完整请求
14:10:30 完整请求
14:10:30 请求结束
14:10:30 请求结束
14:10:30 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:30 path and query /api/weibo/delete {'id': '22'} 
14:10:30 kwargs,  {'weibo_id': 22} <class 'dict'>
14:10:30 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:30 path and query /api/comment/add {} 
14:10:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "dddddd",
  "id": 22
}
14:10:32 完整请求
14:10:32 请求结束
14:10:32 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:32 path and query /api/weibo/delete {'id': '25'} 
14:10:32 kwargs,  {'weibo_id': 25} <class 'dict'>
14:10:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "溺爱",
  "id": 25
}
14:10:33 完整请求
14:10:33 完整请求
14:10:33 请求结束
14:10:33 请求结束
14:10:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:33 path and query /api/comment/add {} 
14:10:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:33 path and query /api/weibo/delete {'id': '21'} 
14:10:33 kwargs,  {'weibo_id': 21} <class 'dict'>
14:10:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "ddd",
  "id": 21
}
14:10:34 完整请求
14:10:34 请求结束
14:10:34 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:34 path and query /api/weibo/delete {'id': '20'} 
14:10:34 kwargs,  {'weibo_id': 20} <class 'dict'>
14:10:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "ddd",
  "id": 20
}
14:10:34 完整请求
14:10:34 完整请求
14:10:34 请求结束
14:10:34 请求结束
14:10:34 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:34 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:34 path and query /api/comment/add {} 
14:10:34 path and query /api/weibo/delete {'id': '19'} 
14:10:34 kwargs,  {'weibo_id': 19} <class 'dict'>
14:10:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "不想说话",
  "id": 19
}
14:10:42 完整请求
14:10:42 请求结束
14:10:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:42 path and query /api/weibo/add {} 
14:10:44 完整请求
14:10:44 请求结束
14:10:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:44 path and query /api/weibo/add {} 
14:10:45 完整请求
14:10:45 请求结束
14:10:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:45 path and query /api/weibo/add {} 
14:10:45 完整请求
14:10:45 请求结束
14:10:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:45 path and query /api/weibo/add {} 
14:10:47 完整请求
14:10:47 请求结束
14:10:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:47 path and query /api/weibo/add {} 
14:10:47 完整请求
14:10:47 请求结束
14:10:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:47 path and query /api/weibo/add {} 
14:10:47 完整请求
14:10:47 请求结束
14:10:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:47 path and query /api/weibo/add {} 
14:10:47 完整请求
14:10:47 请求结束
14:10:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:47 path and query /api/weibo/add {} 
14:10:48 完整请求
14:10:48 请求结束
14:10:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:48 path and query /api/weibo/add {} 
14:10:48 完整请求
14:10:48 请求结束
14:10:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:48 path and query /api/weibo/add {} 
14:10:50 完整请求
14:10:50 请求结束
14:10:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:50 path and query /weibo/index {} 
14:10:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:10:50 完整请求
14:10:50 请求结束
14:10:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:50 path and query /weibo/weibo.css {} 
14:10:50 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:10:50 完整请求
14:10:50 完整请求
14:10:50 请求结束
14:10:50 请求结束
14:10:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:50 path and query /static {'file': 'gua.js'} 
14:10:50 path and query /static {'file': 'weibo.js'} 
14:10:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:10:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:10:50 完整请求
14:10:50 请求结束
14:10:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:10:50 path and query /api/weibo/all {} 
14:10:50 kwargs,  {'weibo_id': 2} <class 'dict'>
14:10:50 kwargs,  {'weibo_id': 3} <class 'dict'>
14:10:50 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "nidennfs",
    "id": 26
  }
]
14:10:58 完整请求
14:10:58 请求结束
14:10:58 cookie ['user=ddskdkddskea3dl8']
14:10:58 path and query /weibo/index {} 
14:10:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:10:58 完整请求
14:10:58 请求结束
14:10:58 cookie ['user=ddskdkddskea3dl8']
14:10:58 path and query /weibo/weibo.css {} 
14:10:58 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:10:58 完整请求
14:10:58 请求结束
14:10:58 完整请求
14:10:58 请求结束
14:10:58 cookie ['user=ddskdkddskea3dl8']
14:10:58 cookie ['user=ddskdkddskea3dl8']
14:10:58 path and query /static {'file': 'gua.js'} 
14:10:58 path and query /static {'file': 'weibo.js'} 
14:10:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:10:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:10:58 完整请求
14:10:58 请求结束
14:10:58 cookie ['user=ddskdkddskea3dl8']
14:10:58 path and query /api/weibo/all {} 
14:10:58 kwargs,  {'weibo_id': 2} <class 'dict'>
14:10:58 kwargs,  {'weibo_id': 3} <class 'dict'>
14:10:58 kwargs,  {'weibo_id': 26} <class 'dict'>
14:10:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "nidennfs",
    "id": 26
  }
]
14:11:05 完整请求
14:11:05 请求结束
14:11:05 cookie ['user=ddskdkddskea3dl8']
14:11:05 path and query /api/weibo/add {} {"content":"niuojsfdal"}
14:11:05 kwargs,  {'weibo_id': 27} <class 'dict'>
14:11:05 return weibo: {'comments': [], 'content': 'niuojsfdal', 'id': 27}
14:11:05 kwargs,  {'weibo_id': 27} <class 'dict'>
14:11:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "niuojsfdal",
  "id": 27
}
14:11:09 完整请求
14:11:09 请求结束
14:11:09 cookie ['user=ddskdkddskea3dl8']
14:11:09 path and query /api/weibo/delete {'id': '26'} 
14:11:09 kwargs,  {'weibo_id': 26} <class 'dict'>
14:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "nidennfs",
  "id": 26
}
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 完整请求
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 完整请求
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 完整请求
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 完整请求
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 完整请求
14:11:17 请求结束
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:17 完整请求
14:11:17 请求结束
14:11:17 cookie ['user=ddskdkddskea3dl8']
14:11:17 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 完整请求
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 完整请求
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 完整请求
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 完整请求
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:18 完整请求
14:11:18 请求结束
14:11:18 cookie ['user=ddskdkddskea3dl8']
14:11:18 path and query /api/comment/delete {'id': 'undefined'} 
14:11:21 完整请求
14:11:21 请求结束
14:11:21 cookie ['user=ddskdkddskea3dl8']
14:11:21 path and query /weibo/index {} 
14:11:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:11:21 完整请求
14:11:21 请求结束
14:11:21 cookie ['user=ddskdkddskea3dl8']
14:11:21 path and query /weibo/weibo.css {} 
14:11:21 完整请求
14:11:21 完整请求
14:11:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:11:21 请求结束
14:11:21 请求结束
14:11:21 cookie ['user=ddskdkddskea3dl8']
14:11:21 cookie ['user=ddskdkddskea3dl8']
14:11:21 path and query /static {'file': 'gua.js'} 
14:11:21 path and query /static {'file': 'weibo.js'} 
14:11:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:11:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:11:21 完整请求
14:11:21 请求结束
14:11:21 cookie ['user=ddskdkddskea3dl8']
14:11:21 path and query /api/weibo/all {} 
14:11:21 kwargs,  {'weibo_id': 2} <class 'dict'>
14:11:21 kwargs,  {'weibo_id': 3} <class 'dict'>
14:11:21 kwargs,  {'weibo_id': 27} <class 'dict'>
14:11:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1,
        "id": 5
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2,
        "id": 8
      },
      {
        "content": "323232",
        "weibo_id": 2,
        "id": 15
      }
    ],
    "id": 2,
    "user_id": 1
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 16
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      }
    ],
    "id": 3,
    "user_id": 1
  },
  {
    "comments": [],
    "content": "niuojsfdal",
    "id": 27
  }
]
14:14:50 完整请求
14:14:50 请求结束
14:14:50 cookie ['user=ddskdkddskea3dl8']
14:14:50 path and query /weibo/index {} 
14:14:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:14:50 完整请求
14:14:50 请求结束
14:14:50 完整请求
14:14:50 cookie ['user=ddskdkddskea3dl8']
14:14:50 path and query /weibo/weibo.css {} 
14:14:50 完整请求
14:14:50 请求结束
14:14:50 cookie ['user=ddskdkddskea3dl8']
14:14:50 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:14:50 path and query /static {'file': 'gua.js'} 
14:14:50 请求结束
14:14:50 cookie ['user=ddskdkddskea3dl8']
14:14:50 path and query /static {'file': 'weibo.js'} 
14:14:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:14:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:14:50 完整请求
14:14:50 请求结束
14:14:50 cookie ['user=ddskdkddskea3dl8']
14:14:50 path and query /api/weibo/all {} 
14:14:50 kwargs,  {'weibo_id': 2} <class 'dict'>
14:14:50 kwargs,  {'weibo_id': 3} <class 'dict'>
14:14:50 kwargs,  {'weibo_id': 27} <class 'dict'>
14:14:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "id": 3,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "123",
        "id": 4,
        "weibo_id": 2
      },
      {
        "user_id": 1,
        "content": "asdf",
        "id": 5,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 7,
        "weibo_id": 2
      },
      {
        "user_id": 2,
        "content": "说得好",
        "id": 8,
        "weibo_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ]
  },
  {
    "user_id": 1,
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "id": 6,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ]
  },
  {
    "comments": [],
    "content": "niuojsfdal",
    "id": 27
  }
]
14:15:30 完整请求
14:15:30 请求结束
14:15:30 cookie ['user=ddskdkddskea3dl8']
14:15:30 path and query /weibo/index {} 
14:15:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:15:30 完整请求
14:15:30 请求结束
14:15:30 cookie ['user=ddskdkddskea3dl8']
14:15:30 path and query /weibo/weibo.css {} 
14:15:30 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:15:30 完整请求
14:15:30 完整请求
14:15:30 请求结束
14:15:30 cookie ['user=ddskdkddskea3dl8']
14:15:30 path and query /static {'file': 'weibo.js'} 
14:15:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:15:30 请求结束
14:15:30 cookie ['user=ddskdkddskea3dl8']
14:15:30 path and query /static {'file': 'gua.js'} 
14:15:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:15:30 完整请求
14:15:30 请求结束
14:15:30 cookie ['user=ddskdkddskea3dl8']
14:15:30 path and query /api/weibo/all {} 
14:15:30 kwargs,  {'weibo_id': 2} <class 'dict'>
14:15:30 kwargs,  {'weibo_id': 3} <class 'dict'>
14:15:30 kwargs,  {'weibo_id': 27} <class 'dict'>
14:15:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "user_id": 1,
        "id": 5,
        "weibo_id": 2,
        "content": "asdf"
      },
      {
        "user_id": 2,
        "id": 7,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "user_id": 2,
        "id": 8,
        "weibo_id": 2,
        "content": "说得好"
      },
      {
        "id": 15,
        "weibo_id": 2,
        "content": "323232"
      }
    ],
    "id": 2,
    "content": "你好"
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 16,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "id": 3,
    "content": "hahaha"
  },
  {
    "comments": [],
    "content": "niuojsfdal",
    "id": 27
  }
]
14:15:32 完整请求
14:15:32 请求结束
14:15:32 cookie ['user=ddskdkddskea3dl8']
14:15:32 path and query /api/weibo/add {} {"content":"niuojsfdal"}
14:15:32 kwargs,  {'weibo_id': 28} <class 'dict'>
14:15:32 return weibo: {'comments': [], 'content': 'niuojsfdal', 'id': 28}
14:15:32 kwargs,  {'weibo_id': 28} <class 'dict'>
14:15:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "niuojsfdal",
  "id": 28
}
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:15:36 完整请求
14:15:36 请求结束
14:15:36 cookie ['user=ddskdkddskea3dl8']
14:15:36 path and query /api/comment/delete {'id': 'undefined'} 
14:16:49 完整请求
14:16:49 请求结束
14:16:49 cookie ['user=ddskdkddskea3dl8']
14:16:49 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:16:50 完整请求
14:16:50 请求结束
14:16:50 cookie ['user=ddskdkddskea3dl8']
14:16:50 path and query /api/comment/delete {'id': 'undefined'} 
14:19:24 完整请求
14:19:24 请求结束
14:19:24 cookie ['user=ddskdkddskea3dl8']
14:19:24 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 完整请求
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 完整请求
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 请求结束
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 完整请求
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 完整请求
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:19:25 完整请求
14:19:25 请求结束
14:19:25 cookie ['user=ddskdkddskea3dl8']
14:19:25 path and query /api/comment/delete {'id': 'undefined'} 
14:20:52 完整请求
14:20:52 请求结束
14:20:52 cookie ['user=ddskdkddskea3dl8']
14:20:52 path and query /weibo/index {} 
14:20:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:20:52 完整请求
14:20:52 请求结束
14:20:52 cookie ['user=ddskdkddskea3dl8']
14:20:52 path and query /weibo/weibo.css {} 
14:20:52 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:20:52 完整请求
14:20:52 请求结束
14:20:52 完整请求
14:20:52 cookie ['user=ddskdkddskea3dl8']
14:20:52 请求结束
14:20:52 path and query /static {'file': 'gua.js'} 
14:20:52 cookie ['user=ddskdkddskea3dl8']
14:20:52 path and query /static {'file': 'weibo.js'} 
14:20:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:20:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:20:52 完整请求
14:20:52 请求结束
14:20:52 cookie ['user=ddskdkddskea3dl8']
14:20:52 path and query /api/weibo/all {} 
14:20:52 kwargs,  {'weibo_id': 2} <class 'dict'>
14:20:52 kwargs,  {'weibo_id': 3} <class 'dict'>
14:20:52 kwargs,  {'weibo_id': 27} <class 'dict'>
14:20:52 kwargs,  {'weibo_id': 28} <class 'dict'>
14:20:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:20:58 完整请求
14:20:58 请求结束
14:21:04 完整请求
14:21:04 请求结束
14:21:04 cookie ['user=ddskdkddskea3dl8']
14:21:04 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:07 完整请求
14:22:07 请求结束
14:22:07 cookie ['user=ddskdkddskea3dl8']
14:22:07 path and query /api/comment/delete {'id': 'undefined'} 
14:22:11 完整请求
14:22:11 请求结束
14:22:11 cookie ['user=ddskdkddskea3dl8']
14:22:11 path and query /api/comment/delete {'id': 'undefined'} 
14:22:21 完整请求
14:22:21 请求结束
14:22:21 cookie ['user=ddskdkddskea3dl8']
14:22:21 path and query /weibo/index {} 
14:22:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:22:21 完整请求
14:22:21 请求结束
14:22:21 cookie ['user=ddskdkddskea3dl8']
14:22:21 path and query /weibo/weibo.css {} 
14:22:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:22:21 完整请求
14:22:21 完整请求
14:22:21 请求结束
14:22:21 请求结束
14:22:21 cookie ['user=ddskdkddskea3dl8']
14:22:21 cookie ['user=ddskdkddskea3dl8']
14:22:21 path and query /static {'file': 'weibo.js'} 
14:22:21 path and query /static {'file': 'gua.js'} 
14:22:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('self is', self)
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:22:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:22:21 完整请求
14:22:21 请求结束
14:22:21 cookie ['user=ddskdkddskea3dl8']
14:22:21 path and query /api/weibo/all {} 
14:22:21 kwargs,  {'weibo_id': 2} <class 'dict'>
14:22:21 kwargs,  {'weibo_id': 3} <class 'dict'>
14:22:21 kwargs,  {'weibo_id': 27} <class 'dict'>
14:22:21 kwargs,  {'weibo_id': 28} <class 'dict'>
14:22:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:24 完整请求
14:22:24 请求结束
14:22:24 cookie ['user=ddskdkddskea3dl8']
14:22:24 path and query /api/comment/delete {'id': 'undefined'} 
14:22:54 完整请求
14:22:54 请求结束
14:22:54 cookie ['user=ddskdkddskea3dl8']
14:22:54 path and query /weibo/index {} 
14:22:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:22:54 完整请求
14:22:54 请求结束
14:22:54 cookie ['user=ddskdkddskea3dl8']
14:22:54 path and query /weibo/weibo.css {} 
14:22:54 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:22:54 完整请求
14:22:54 请求结束
14:22:54 cookie ['user=ddskdkddskea3dl8']
14:22:54 完整请求
14:22:54 path and query /static {'file': 'weibo.js'} 
14:22:54 请求结束
14:22:54 cookie ['user=ddskdkddskea3dl8']
14:22:54 path and query /static {'file': 'gua.js'} 
14:22:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('self is', self)
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement
            var comment = self.parentElement
            var comment_id = comment.dataset.id
            log('comment is', comment)
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:22:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:22:54 完整请求
14:22:54 请求结束
14:22:54 cookie ['user=ddskdkddskea3dl8']
14:22:54 path and query /api/weibo/all {} 
14:22:54 kwargs,  {'weibo_id': 2} <class 'dict'>
14:22:54 kwargs,  {'weibo_id': 3} <class 'dict'>
14:22:54 kwargs,  {'weibo_id': 27} <class 'dict'>
14:22:54 kwargs,  {'weibo_id': 28} <class 'dict'>
14:22:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:22:55 完整请求
14:22:55 请求结束
14:22:55 cookie ['user=ddskdkddskea3dl8']
14:22:55 path and query /api/comment/delete {'id': 'undefined'} 
14:24:17 完整请求
14:24:17 请求结束
14:24:17 cookie ['user=ddskdkddskea3dl8']
14:24:17 path and query /weibo/index {} 
14:24:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:24:17 完整请求
14:24:17 请求结束
14:24:17 cookie ['user=ddskdkddskea3dl8']
14:24:17 path and query /weibo/weibo.css {} 
14:24:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:24:17 完整请求
14:24:17 请求结束
14:24:17 cookie ['user=ddskdkddskea3dl8']
14:24:17 path and query /static {'file': 'gua.js'} 
14:24:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:24:17 完整请求
14:24:17 请求结束
14:24:17 cookie ['user=ddskdkddskea3dl8']
14:24:17 path and query /static {'file': 'weibo.js'} 
14:24:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('self is', self)
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment is', comment)
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:24:17 完整请求
14:24:17 请求结束
14:24:17 cookie ['user=ddskdkddskea3dl8']
14:24:17 path and query /api/weibo/all {} 
14:24:17 kwargs,  {'weibo_id': 2} <class 'dict'>
14:24:17 kwargs,  {'weibo_id': 3} <class 'dict'>
14:24:17 kwargs,  {'weibo_id': 27} <class 'dict'>
14:24:17 kwargs,  {'weibo_id': 28} <class 'dict'>
14:24:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "323232",
        "id": 15,
        "weibo_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:24:20 完整请求
14:24:20 请求结束
14:24:20 cookie ['user=ddskdkddskea3dl8']
14:24:20 path and query /api/comment/delete {'id': '15'} 
14:24:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "323232",
  "id": 15,
  "weibo_id": 2
}
14:24:22 完整请求
14:24:22 请求结束
14:24:22 cookie ['user=ddskdkddskea3dl8']
14:24:22 path and query /api/comment/delete {'id': '8'} 
14:24:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "说得好",
  "id": 8,
  "weibo_id": 2,
  "user_id": 2
}
14:26:00 完整请求
14:26:00 请求结束
14:26:00 cookie ['user=ddskdkddskea3dl8']
14:26:00 path and query /weibo/index {} 
14:26:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:26:00 完整请求
14:26:00 请求结束
14:26:00 完整请求
14:26:00 请求结束
14:26:00 cookie ['user=ddskdkddskea3dl8']
14:26:00 cookie ['user=ddskdkddskea3dl8']
14:26:00 path and query /weibo/weibo.css {} 
14:26:00 path and query /static {'file': 'gua.js'} 
14:26:00 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:26:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:26:00 完整请求
14:26:00 请求结束
14:26:00 cookie ['user=ddskdkddskea3dl8']
14:26:00 path and query /static {'file': 'weibo.js'} 
14:26:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', comment)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        log('self is', self)
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:26:00 完整请求
14:26:00 请求结束
14:26:00 cookie ['user=ddskdkddskea3dl8']
14:26:00 path and query /api/weibo/all {} 
14:26:00 kwargs,  {'weibo_id': 2} <class 'dict'>
14:26:00 kwargs,  {'weibo_id': 3} <class 'dict'>
14:26:00 kwargs,  {'weibo_id': 27} <class 'dict'>
14:26:00 kwargs,  {'weibo_id': 28} <class 'dict'>
14:26:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:26:03 完整请求
14:26:03 请求结束
14:26:03 cookie ['user=ddskdkddskea3dl8']
14:26:03 path and query /api/comment/delete {'id': '7'} 
14:26:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "说得好",
  "id": 7,
  "weibo_id": 2,
  "user_id": 2
}
14:26:38 完整请求
14:26:38 请求结束
14:26:38 cookie ['user=ddskdkddskea3dl8']
14:26:38 path and query /weibo/index {} 
14:26:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:26:38 完整请求
14:26:38 请求结束
14:26:38 完整请求
14:26:38 cookie ['user=ddskdkddskea3dl8']
14:26:38 请求结束
14:26:38 path and query /weibo/weibo.css {} 
14:26:38 cookie ['user=ddskdkddskea3dl8']
14:26:38 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:26:38 path and query /static {'file': 'gua.js'} 
14:26:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:26:38 完整请求
14:26:38 请求结束
14:26:38 cookie ['user=ddskdkddskea3dl8']
14:26:38 path and query /static {'file': 'weibo.js'} 
14:26:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', comment)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:26:39 完整请求
14:26:39 请求结束
14:26:39 cookie ['user=ddskdkddskea3dl8']
14:26:39 path and query /api/weibo/all {} 
14:26:39 kwargs,  {'weibo_id': 2} <class 'dict'>
14:26:39 kwargs,  {'weibo_id': 3} <class 'dict'>
14:26:39 kwargs,  {'weibo_id': 27} <class 'dict'>
14:26:39 kwargs,  {'weibo_id': 28} <class 'dict'>
14:26:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:32:05 完整请求
14:32:05 请求结束
14:32:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:05 path and query / {} 
14:32:05 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


14:32:05 完整请求
14:32:05 请求结束
14:32:05 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:05 path and query /todo/index {} 
14:32:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
14:32:06 完整请求
14:32:06 完整请求
14:32:06 请求结束
14:32:06 请求结束
14:32:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:06 path and query /static {'file': 'gua.js'} 
14:32:06 path and query /static {'file': 'todo.js'} 
14:32:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:32:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
14:32:06 完整请求
14:32:06 请求结束
14:32:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:06 path and query /api/todo/all {} 
14:32:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 7,
    "title": "fddfdsf",
    "ut": 1489419465,
    "ct": 1489419465,
    "completed": false
  },
  {
    "id": 9,
    "title": "fdf",
    "ut": 1489460379,
    "ct": 1489460379,
    "completed": false
  },
  {
    "id": 10,
    "title": "bbbbb",
    "ut": 1489462694,
    "ct": 1489462079,
    "completed": false
  },
  {
    "id": 11,
    "title": "你说的对吗",
    "ut": 1492664207,
    "ct": 1492664207,
    "completed": false
  },
  {
    "id": 12,
    "title": "你说的对吗",
    "ut": 1492664208,
    "ct": 1492664208,
    "completed": false
  },
  {
    "id": 13,
    "title": "你说的对吗",
    "ut": 1492664208,
    "ct": 1492664208,
    "completed": false
  },
  {
    "id": 14,
    "title": "你说的对吗",
    "ut": 1492664208,
    "ct": 1492664208,
    "completed": false
  },
  {
    "id": 15,
    "title": "你说的对吗",
    "ut": 1492664208,
    "ct": 1492664208,
    "completed": false
  }
]
14:32:11 完整请求
14:32:11 请求结束
14:32:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:11 path and query /weibo/index {} 
14:32:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:32:11 完整请求
14:32:11 请求结束
14:32:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:11 path and query /weibo/weibo.css {} 
14:32:11 完整请求
14:32:11 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:32:11 完整请求
14:32:11 请求结束
14:32:11 请求结束
14:32:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:11 path and query /static {'file': 'weibo.js'} 
14:32:11 path and query /static {'file': 'gua.js'} 
14:32:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:32:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', comment)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:32:11 完整请求
14:32:11 请求结束
14:32:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:11 path and query /api/weibo/all {} 
14:32:11 kwargs,  {'weibo_id': 2} <class 'dict'>
14:32:11 kwargs,  {'weibo_id': 3} <class 'dict'>
14:32:11 kwargs,  {'weibo_id': 27} <class 'dict'>
14:32:11 kwargs,  {'weibo_id': 28} <class 'dict'>
14:32:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:32:12 完整请求
14:32:12 请求结束
14:32:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:12 path and query /weibo {} 
14:32:12 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:32:15 完整请求
14:32:15 请求结束
14:32:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:15 path and query /weibo/index {} 
14:32:15 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:32:15 完整请求
14:32:15 请求结束
14:32:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:15 完整请求
14:32:15 完整请求
14:32:15 path and query /weibo/weibo.css {} 
14:32:15 请求结束
14:32:15 请求结束
14:32:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:32:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:15 path and query /static {'file': 'gua.js'} 
14:32:15 path and query /static {'file': 'weibo.js'} 
14:32:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:32:15 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', comment)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:32:15 完整请求
14:32:15 请求结束
14:32:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:15 path and query /api/weibo/all {} 
14:32:15 kwargs,  {'weibo_id': 2} <class 'dict'>
14:32:15 kwargs,  {'weibo_id': 3} <class 'dict'>
14:32:15 kwargs,  {'weibo_id': 27} <class 'dict'>
14:32:15 kwargs,  {'weibo_id': 28} <class 'dict'>
14:32:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:32:16 完整请求
14:32:16 请求结束
14:32:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:16 path and query /weibo/index {} 
14:32:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:32:16 完整请求
14:32:16 请求结束
14:32:16 完整请求
14:32:16 完整请求
14:32:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:16 请求结束
14:32:16 请求结束
14:32:16 path and query /weibo/weibo.css {} 
14:32:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:16 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:32:16 path and query /static {'file': 'weibo.js'} 
14:32:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', comment)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:32:16 path and query /static {'file': 'gua.js'} 
14:32:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:32:16 完整请求
14:32:16 请求结束
14:32:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:16 path and query /api/weibo/all {} 
14:32:16 kwargs,  {'weibo_id': 2} <class 'dict'>
14:32:16 kwargs,  {'weibo_id': 3} <class 'dict'>
14:32:16 kwargs,  {'weibo_id': 27} <class 'dict'>
14:32:16 kwargs,  {'weibo_id': 28} <class 'dict'>
14:32:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  }
]
14:32:20 完整请求
14:32:20 请求结束
14:32:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:20 path and query /api/weibo/add {} 
14:32:22 完整请求
14:32:22 请求结束
14:32:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:22 path and query /api/weibo/add {} 
14:32:30 完整请求
14:32:30 请求结束
14:32:30 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:30 path and query /api/weibo/add {} {"content":"dddd"}
14:32:30 kwargs,  {'weibo_id': 29} <class 'dict'>
14:32:30 return weibo: {'content': 'dddd', 'comments': [], 'id': 29}
14:32:30 kwargs,  {'weibo_id': 29} <class 'dict'>
14:32:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "dddd",
  "comments": [],
  "id": 29
}
14:32:48 完整请求
14:32:48 请求结束
14:32:48 完整请求
14:32:48 请求结束
14:32:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:48 path and query /api/comment/add {} 
14:32:48 path and query /api/comment/delete {'id': '5'} 
14:32:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "asdf",
  "id": 5,
  "weibo_id": 2,
  "user_id": 1
}
14:32:50 完整请求
14:32:50 请求结束
14:32:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:32:50 path and query /api/comment/add {} 
14:33:21 完整请求
14:33:21 请求结束
14:33:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:21 path and query /weibo/index {} 
14:33:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:33:21 完整请求
14:33:21 请求结束
14:33:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:21 path and query /weibo/weibo.css {} 
14:33:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:33:21 完整请求
14:33:21 完整请求
14:33:21 请求结束
14:33:21 请求结束
14:33:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:21 path and query /static {'file': 'weibo.js'} 
14:33:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:33:21 path and query /static {'file': 'gua.js'} 
14:33:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:33:21 完整请求
14:33:21 请求结束
14:33:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:21 path and query /api/weibo/all {} 
14:33:21 kwargs,  {'weibo_id': 2} <class 'dict'>
14:33:21 kwargs,  {'weibo_id': 3} <class 'dict'>
14:33:21 kwargs,  {'weibo_id': 27} <class 'dict'>
14:33:21 kwargs,  {'weibo_id': 28} <class 'dict'>
14:33:21 kwargs,  {'weibo_id': 29} <class 'dict'>
14:33:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "content": "323232",
        "id": 16,
        "weibo_id": 3
      },
      {
        "content": "323232",
        "id": 17,
        "weibo_id": 3
      }
    ],
    "user_id": 1
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 27
  },
  {
    "content": "niuojsfdal",
    "comments": [],
    "id": 28
  },
  {
    "content": "dddd",
    "comments": [],
    "id": 29
  }
]
14:33:23 完整请求
14:33:23 请求结束
14:33:23 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:23 path and query /api/comment/add {} 
14:33:25 完整请求
14:33:25 请求结束
14:33:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:25 path and query /api/comment/add {} 
14:33:30 完整请求
14:33:30 请求结束
14:33:30 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:30 path and query /api/comment/add {} 
14:33:31 完整请求
14:33:31 请求结束
14:33:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:33:31 path and query /api/comment/add {} 
14:35:16 完整请求
14:35:16 请求结束
14:35:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:16 path and query /weibo/index {} 
14:35:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:35:16 完整请求
14:35:16 请求结束
14:35:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:16 path and query /weibo/weibo.css {} 
14:35:16 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:35:16 完整请求
14:35:16 完整请求
14:35:16 请求结束
14:35:16 请求结束
14:35:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:16 path and query /static {'file': 'gua.js'} 
14:35:16 path and query /static {'file': 'weibo.js'} 
14:35:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:35:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:35:16 完整请求
14:35:16 请求结束
14:35:16 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:16 path and query /api/weibo/all {} 
14:35:16 kwargs,  {'weibo_id': 2} <class 'dict'>
14:35:16 kwargs,  {'weibo_id': 3} <class 'dict'>
14:35:16 kwargs,  {'weibo_id': 27} <class 'dict'>
14:35:16 kwargs,  {'weibo_id': 28} <class 'dict'>
14:35:16 kwargs,  {'weibo_id': 29} <class 'dict'>
14:35:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      },
      {
        "id": 16,
        "content": "323232",
        "weibo_id": 3
      },
      {
        "id": 17,
        "content": "323232",
        "weibo_id": 3
      }
    ]
  },
  {
    "comments": [],
    "id": 27,
    "content": "niuojsfdal"
  },
  {
    "comments": [],
    "id": 28,
    "content": "niuojsfdal"
  },
  {
    "comments": [],
    "id": 29,
    "content": "dddd"
  }
]
14:35:26 完整请求
14:35:26 请求结束
14:35:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:26 path and query /api/comment/add {} 
14:35:27 完整请求
14:35:27 请求结束
14:35:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:27 path and query /api/comment/add {} {"content":"sdfafa","weibo_id":"2"}
14:35:27 return weibo: {'id': 18, 'content': 'sdfafa', 'weibo_id': 2}
14:35:27 < Comment
id: (18)
content: (sdfafa)
weibo_id: (2) 
>

14:35:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "content": "sdfafa",
  "weibo_id": 2
}
14:35:30 完整请求
14:35:30 请求结束
14:35:30 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:30 path and query /api/comment/add {} 
14:35:31 完整请求
14:35:31 请求结束
14:35:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:31 path and query /api/comment/add {} 
14:35:34 完整请求
14:35:34 请求结束
14:35:34 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:35:34 path and query /api/comment/add {} 
14:36:19 完整请求
14:36:19 请求结束
14:36:19 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:19 完整请求
14:36:19 path and query /api/comment/add {} 
14:36:19 请求结束
14:36:19 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:19 path and query /api/comment/delete {'id': '18'} 
14:36:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "content": "sdfafa",
  "weibo_id": 2
}
14:36:28 完整请求
14:36:28 完整请求
14:36:28 请求结束
14:36:28 请求结束
14:36:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:28 path and query /api/comment/add {} 
14:36:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:28 path and query /api/comment/delete {'id': '16'} 
14:36:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "content": "323232",
  "weibo_id": 3
}
14:36:48 完整请求
14:36:48 请求结束
14:36:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:48 path and query /api/comment/add {} {"content":"懂aff","weibo_id":"2"}
14:36:48 return weibo: {'id': 18, 'content': '懂aff', 'weibo_id': 2}
14:36:48 < Comment
id: (18)
content: (懂aff)
weibo_id: (2) 
>

14:36:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "content": "懂aff",
  "weibo_id": 2
}
14:36:50 完整请求
14:36:50 请求结束
14:36:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:50 path and query /api/comment/add {} 
14:36:50 完整请求
14:36:50 请求结束
14:36:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:50 path and query /api/comment/add {} 
14:36:54 完整请求
14:36:54 请求结束
14:36:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:54 path and query /api/comment/add {} 
14:36:57 完整请求
14:36:57 请求结束
14:36:57 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:36:57 path and query /api/comment/add {} 
14:37:21 完整请求
14:37:21 请求结束
14:37:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:21 path and query /weibo/index {} 
14:37:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:37:22 完整请求
14:37:22 完整请求
14:37:22 请求结束
14:37:22 完整请求
14:37:22 请求结束
14:37:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:22 请求结束
14:37:22 path and query /static {'file': 'gua.js'} 
14:37:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:22 path and query /static {'file': 'weibo.js'} 
14:37:22 path and query /weibo/weibo.css {} 
14:37:22 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:37:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:37:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:37:22 完整请求
14:37:22 请求结束
14:37:22 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:22 path and query /api/weibo/all {} 
14:37:22 kwargs,  {'weibo_id': 2} <class 'dict'>
14:37:22 kwargs,  {'weibo_id': 3} <class 'dict'>
14:37:22 kwargs,  {'weibo_id': 27} <class 'dict'>
14:37:22 kwargs,  {'weibo_id': 28} <class 'dict'>
14:37:22 kwargs,  {'weibo_id': 29} <class 'dict'>
14:37:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 18,
        "content": "懂aff",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      },
      {
        "id": 17,
        "content": "323232",
        "weibo_id": 3
      }
    ]
  },
  {
    "comments": [],
    "id": 27,
    "content": "niuojsfdal"
  },
  {
    "comments": [],
    "id": 28,
    "content": "niuojsfdal"
  },
  {
    "comments": [],
    "id": 29,
    "content": "dddd"
  }
]
14:37:23 完整请求
14:37:23 请求结束
14:37:23 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:23 path and query /api/comment/add {} 
14:37:43 完整请求
14:37:43 请求结束
14:37:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:43 path and query /api/comment/add {} 
14:37:44 完整请求
14:37:44 请求结束
14:37:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:44 path and query /api/comment/add {} 
14:37:44 完整请求
14:37:44 请求结束
14:37:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:44 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:45 完整请求
14:37:45 请求结束
14:37:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:45 path and query /api/comment/add {} 
14:37:46 完整请求
14:37:46 请求结束
14:37:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:46 path and query /api/comment/add {} 
14:37:46 完整请求
14:37:46 请求结束
14:37:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:46 path and query /api/comment/add {} 
14:37:46 完整请求
14:37:46 请求结束
14:37:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:46 path and query /api/comment/add {} 
14:37:46 完整请求
14:37:46 请求结束
14:37:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:37:46 path and query /api/comment/add {} 
14:38:03 完整请求
14:38:03 请求结束
14:38:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:38:03 path and query /api/comment/add {} 
14:38:17 完整请求
14:38:17 请求结束
14:38:17 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:38:17 path and query /api/weibo/add {} 
14:38:27 完整请求
14:38:27 请求结束
14:38:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:38:27 path and query /api/weibo/add {} {"content":"你是的"}
14:38:27 kwargs,  {'weibo_id': 30} <class 'dict'>
14:38:27 return weibo: {'comments': [], 'id': 30, 'content': '你是的'}
14:38:27 kwargs,  {'weibo_id': 30} <class 'dict'>
14:38:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "id": 30,
  "content": "你是的"
}
14:39:09 完整请求
14:39:09 请求结束
14:39:09 完整请求
14:39:09 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:39:09 path and query /api/weibo/delete {'id': '28'} 
14:39:09 请求结束
14:39:09 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:39:09 path and query /api/comment/add {} 
14:39:09 kwargs,  {'weibo_id': 28} <class 'dict'>
14:39:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "id": 28,
  "content": "niuojsfdal"
}
14:40:21 完整请求
14:40:21 请求结束
14:40:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:40:21 path and query /weibo/index {} 
14:40:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:40:21 完整请求
14:40:21 请求结束
14:40:21 完整请求
14:40:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:40:21 请求结束
14:40:21 完整请求
14:40:21 path and query /weibo/weibo.css {} 
14:40:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:40:21 请求结束
14:40:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:40:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:40:21 path and query /static {'file': 'weibo.js'} 
14:40:21 path and query /static {'file': 'gua.js'} 
14:40:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:40:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:40:21 完整请求
14:40:21 请求结束
14:40:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:40:21 path and query /api/weibo/all {} 
14:40:21 kwargs,  {'weibo_id': 2} <class 'dict'>
14:40:21 kwargs,  {'weibo_id': 3} <class 'dict'>
14:40:21 kwargs,  {'weibo_id': 27} <class 'dict'>
14:40:21 kwargs,  {'weibo_id': 29} <class 'dict'>
14:40:21 kwargs,  {'weibo_id': 30} <class 'dict'>
14:40:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "content": "hahaha"
  },
  {
    "id": 27,
    "comments": [],
    "content": "niuojsfdal"
  },
  {
    "id": 29,
    "comments": [],
    "content": "dddd"
  },
  {
    "id": 30,
    "comments": [],
    "content": "你是的"
  }
]
14:43:45 完整请求
14:43:45 请求结束
14:43:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:45 path and query /weibo/index {} 
14:43:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:43:45 完整请求
14:43:45 请求结束
14:43:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:45 path and query /weibo/weibo.css {} 
14:43:45 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:43:45 完整请求
14:43:45 请求结束
14:43:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:45 path and query /static {'file': 'gua.js'} 
14:43:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:43:45 完整请求
14:43:45 请求结束
14:43:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:45 path and query /static {'file': 'weibo.js'} 
14:43:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:43:45 完整请求
14:43:45 请求结束
14:43:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:45 path and query /api/weibo/all {} 
14:43:45 kwargs,  {'weibo_id': 2} <class 'dict'>
14:43:45 kwargs,  {'weibo_id': 3} <class 'dict'>
14:43:45 kwargs,  {'weibo_id': 27} <class 'dict'>
14:43:45 kwargs,  {'weibo_id': 29} <class 'dict'>
14:43:45 kwargs,  {'weibo_id': 30} <class 'dict'>
14:43:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      }
    ],
    "content": "你好"
  },
  {
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "content": "hahaha"
  },
  {
    "id": 27,
    "comments": [],
    "content": "niuojsfdal"
  },
  {
    "id": 29,
    "comments": [],
    "content": "dddd"
  },
  {
    "id": 30,
    "comments": [],
    "content": "你是的"
  }
]
14:43:47 完整请求
14:43:47 请求结束
14:43:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:47 path and query /api/comment/add {} 
14:43:49 完整请求
14:43:49 请求结束
14:43:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:43:49 path and query /api/comment/add {} 
14:44:02 完整请求
14:44:02 请求结束
14:44:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:44:02 path and query /api/comment/add {} 
14:47:54 完整请求
14:47:54 请求结束
14:47:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:47:54 path and query /weibo/index {} 
14:47:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:47:54 完整请求
14:47:54 完整请求
14:47:54 完整请求
14:47:54 请求结束
14:47:54 请求结束
14:47:54 请求结束
14:47:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:47:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:47:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:47:54 path and query /weibo/weibo.css {} 
14:47:54 path and query /static {'file': 'gua.js'} 
14:47:54 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:47:54 path and query /static {'file': 'weibo.js'} 
14:47:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:47:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:47:54 完整请求
14:47:54 请求结束
14:47:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:47:54 path and query /api/weibo/all {} 
14:47:54 kwargs,  {'weibo_id': 2} <class 'dict'>
14:47:54 kwargs,  {'weibo_id': 3} <class 'dict'>
14:47:54 kwargs,  {'weibo_id': 27} <class 'dict'>
14:47:54 kwargs,  {'weibo_id': 29} <class 'dict'>
14:47:54 kwargs,  {'weibo_id': 30} <class 'dict'>
14:47:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "content": "hahaha"
  },
  {
    "comments": [],
    "content": "niuojsfdal",
    "id": 27
  },
  {
    "comments": [],
    "content": "dddd",
    "id": 29
  },
  {
    "comments": [],
    "content": "你是的",
    "id": 30
  }
]
14:48:09 完整请求
14:48:09 请求结束
14:48:09 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:48:09 path and query /api/comment/add {} 
14:48:09 add
14:48:14 完整请求
14:48:14 请求结束
14:48:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:48:14 path and query /api/comment/add {} {"content":"ddd ","weibo_id":"2"}
14:48:14 add
14:48:14 return comment: {'id': 19, 'weibo_id': 2, 'content': 'ddd '}
14:48:14 *********** < Comment
id: (19)
weibo_id: (2)
content: (ddd ) 
>

14:48:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "weibo_id": 2,
  "content": "ddd "
}
14:48:21 完整请求
14:48:21 请求结束
14:48:21 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:48:21 path and query /api/comment/add {} 
14:48:21 add
14:48:31 完整请求
14:48:31 请求结束
14:48:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:48:31 path and query /api/comment/add {} 
14:48:31 add
14:49:39 完整请求
14:49:39 请求结束
14:49:39 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:49:39 path and query /api/comment/add {} 
14:49:39 add
14:49:42 完整请求
14:49:42 请求结束
14:49:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:49:42 path and query /api/comment/add {} 
14:49:42 add
14:49:42 完整请求
14:49:42 请求结束
14:49:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:49:42 path and query /api/comment/add {} 
14:49:42 add
14:49:43 完整请求
14:49:43 请求结束
14:49:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:49:43 path and query /api/comment/add {} 
14:49:43 add
14:49:48 完整请求
14:49:48 请求结束
14:49:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:49:48 path and query /api/comment/add {} 
14:49:48 add
14:51:02 完整请求
14:51:02 请求结束
14:51:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:02 path and query /api/comment/add {} 
14:51:02 add
14:51:08 完整请求
14:51:08 请求结束
14:51:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:08 path and query /api/comment/add {} 
14:51:08 add
14:51:12 完整请求
14:51:12 请求结束
14:51:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:12 path and query /api/comment/add {} 
14:51:12 add
14:51:13 完整请求
14:51:13 请求结束
14:51:13 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:13 path and query /api/comment/add {} 
14:51:13 add
14:51:14 完整请求
14:51:14 请求结束
14:51:14 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:14 path and query /api/comment/add {} 
14:51:14 add
14:51:19 完整请求
14:51:19 请求结束
14:51:19 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:19 path and query /api/weibo/delete {'id': '29'} 
14:51:19 删除微博 29
14:51:19 kwargs,  {'weibo_id': 29} <class 'dict'>
14:51:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "dddd",
  "id": 29
}
14:51:20 完整请求
14:51:20 请求结束
14:51:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:20 path and query /api/weibo/delete {'id': '27'} 
14:51:20 删除微博 27
14:51:20 kwargs,  {'weibo_id': 27} <class 'dict'>
14:51:20 完整请求
14:51:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "comments": [],
  "content": "niuojsfdal",
  "id": 27
}
14:51:20 请求结束
14:51:20 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:51:20 path and query /api/comment/add {} 
14:51:20 add
14:53:15 完整请求
14:53:15 请求结束
14:53:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:15 path and query /api/comment/add {} 
14:53:15 add
14:53:26 完整请求
14:53:26 请求结束
14:53:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:26 path and query /weibo/index {} 
14:53:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:53:27 完整请求
14:53:27 请求结束
14:53:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:27 path and query /weibo/weibo.css {} 
14:53:27 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:53:27 完整请求
14:53:27 完整请求
14:53:27 请求结束
14:53:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:27 path and query /static {'file': 'weibo.js'} 
14:53:27 请求结束
14:53:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:53:27 path and query /static {'file': 'gua.js'} 
14:53:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:53:27 完整请求
14:53:27 请求结束
14:53:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:27 path and query /api/weibo/all {} 
14:53:27 kwargs,  {'weibo_id': 2} <class 'dict'>
14:53:27 kwargs,  {'weibo_id': 3} <class 'dict'>
14:53:27 kwargs,  {'weibo_id': 30} <class 'dict'>
14:53:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "content": "hahaha"
  },
  {
    "comments": [],
    "content": "你是的",
    "id": 30
  }
]
14:53:32 完整请求
14:53:32 请求结束
14:53:32 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:32 path and query /api/comment/add {} 
14:53:32 add
14:53:40 完整请求
14:53:40 请求结束
14:53:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:53:40 path and query /api/comment/add {} 
14:53:40 add
14:54:25 完整请求
14:54:25 请求结束
14:54:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:25 path and query /weibo/index {} 
14:54:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:54:25 完整请求
14:54:25 请求结束
14:54:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:25 完整请求
14:54:25 完整请求
14:54:25 path and query /weibo/weibo.css {} 
14:54:25 请求结束
14:54:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:25 请求结束
14:54:25 path and query /static {'file': 'gua.js'} 
14:54:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:25 path and query /static {'file': 'weibo.js'} 
14:54:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = e('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:54:25 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:54:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:54:25 完整请求
14:54:25 请求结束
14:54:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:25 path and query /api/weibo/all {} 
14:54:25 kwargs,  {'weibo_id': 2} <class 'dict'>
14:54:25 kwargs,  {'weibo_id': 3} <class 'dict'>
14:54:25 kwargs,  {'weibo_id': 30} <class 'dict'>
14:54:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "user_id": 1,
        "id": 3,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "user_id": 1,
        "id": 4,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ],
    "content": "你好"
  },
  {
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "user_id": 1,
        "id": 6,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      }
    ],
    "content": "hahaha"
  },
  {
    "comments": [],
    "content": "你是的",
    "id": 30
  }
]
14:54:28 完整请求
14:54:28 请求结束
14:54:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:28 path and query /api/comment/add {} 
14:54:28 add
14:54:31 完整请求
14:54:31 请求结束
14:54:31 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:31 path and query /api/comment/add {} {"content":"","weibo_id":"3"}
14:54:31 add
14:54:31 return comment: {'id': 20, 'weibo_id': 3, 'content': ''}
14:54:31 *********** < Comment
id: (20)
weibo_id: (3)
content: () 
>

14:54:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "weibo_id": 3,
  "content": ""
}
14:54:50 完整请求
14:54:50 请求结束
14:54:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:54:50 path and query /api/comment/add {} 
14:54:50 add
14:57:00 完整请求
14:57:00 请求结束
14:57:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:00 path and query /weibo/index {} 
14:57:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:57:00 完整请求
14:57:00 请求结束
14:57:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:00 path and query /weibo/weibo.css {} 
14:57:00 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:57:00 完整请求
14:57:00 请求结束
14:57:00 完整请求
14:57:00 请求结束
14:57:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:00 path and query /static {'file': 'gua.js'} 
14:57:00 path and query /static {'file': 'weibo.js'} 
14:57:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:57:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parent.querySelector('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:57:00 完整请求
14:57:00 请求结束
14:57:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:00 path and query /api/weibo/all {} 
14:57:00 kwargs,  {'weibo_id': 2} <class 'dict'>
14:57:00 kwargs,  {'weibo_id': 3} <class 'dict'>
14:57:00 kwargs,  {'weibo_id': 30} <class 'dict'>
14:57:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 20,
        "weibo_id": 3,
        "content": ""
      }
    ]
  },
  {
    "content": "你是的",
    "comments": [],
    "id": 30
  }
]
14:57:02 完整请求
14:57:02 请求结束
14:57:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:02 path and query /api/comment/add {} 
14:57:02 add
14:57:33 完整请求
14:57:33 请求结束
14:57:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:33 path and query /weibo/index {} 
14:57:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:57:33 完整请求
14:57:33 请求结束
14:57:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:33 path and query /weibo/weibo.css {} 
14:57:33 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:57:33 完整请求
14:57:33 请求结束
14:57:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:33 path and query /static {'file': 'gua.js'} 
14:57:33 完整请求
14:57:33 请求结束
14:57:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:57:33 path and query /static {'file': 'weibo.js'} 
14:57:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:57:33 完整请求
14:57:33 请求结束
14:57:33 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:33 path and query /api/weibo/all {} 
14:57:33 kwargs,  {'weibo_id': 2} <class 'dict'>
14:57:33 kwargs,  {'weibo_id': 3} <class 'dict'>
14:57:33 kwargs,  {'weibo_id': 30} <class 'dict'>
14:57:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 20,
        "weibo_id": 3,
        "content": ""
      }
    ]
  },
  {
    "content": "你是的",
    "comments": [],
    "id": 30
  }
]
14:57:35 完整请求
14:57:35 请求结束
14:57:35 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:35 path and query /api/comment/add {} 
14:57:35 add
14:57:43 完整请求
14:57:43 请求结束
14:57:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:43 path and query /api/comment/add {} 
14:57:43 add
14:57:51 完整请求
14:57:51 请求结束
14:57:51 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:57:51 path and query /api/comment/add {} 
14:57:51 add
14:58:28 完整请求
14:58:28 请求结束
14:58:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:28 path and query /weibo/index {} 
14:58:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:58:28 完整请求
14:58:28 请求结束
14:58:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:28 path and query /weibo/weibo.css {} 
14:58:28 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:58:28 完整请求
14:58:28 完整请求
14:58:28 请求结束
14:58:28 请求结束
14:58:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:28 path and query /static {'file': 'weibo.js'} 
14:58:28 path and query /static {'file': 'gua.js'} 
14:58:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content'
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:58:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:58:40 完整请求
14:58:40 请求结束
14:58:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:40 path and query /weibo/index {} 
14:58:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:58:40 完整请求
14:58:40 请求结束
14:58:40 完整请求
14:58:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:40 path and query /weibo/weibo.css {} 
14:58:40 请求结束
14:58:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:40 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
14:58:40 path and query /static {'file': 'gua.js'} 
14:58:40 完整请求
14:58:40 请求结束
14:58:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
14:58:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:40 path and query /static {'file': 'weibo.js'} 
14:58:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:58:40 完整请求
14:58:40 请求结束
14:58:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:40 path and query /api/weibo/all {} 
14:58:40 kwargs,  {'weibo_id': 2} <class 'dict'>
14:58:40 kwargs,  {'weibo_id': 3} <class 'dict'>
14:58:40 kwargs,  {'weibo_id': 30} <class 'dict'>
14:58:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 20,
        "weibo_id": 3,
        "content": ""
      }
    ]
  },
  {
    "content": "你是的",
    "comments": [],
    "id": 30
  }
]
14:58:43 完整请求
14:58:43 请求结束
14:58:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:43 path and query /api/comment/add {} 
14:58:43 add
14:58:45 完整请求
14:58:45 请求结束
14:58:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
14:58:45 path and query /api/comment/add {} 
14:58:45 add
15:01:11 完整请求
15:01:11 请求结束
15:01:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:11 path and query /weibo/index {} 
15:01:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:01:11 完整请求
15:01:11 请求结束
15:01:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:11 path and query /weibo/weibo.css {} 
15:01:11 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:01:11 完整请求
15:01:11 完整请求
15:01:11 请求结束
15:01:11 请求结束
15:01:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:11 path and query /static {'file': 'gua.js'} 
15:01:11 path and query /static {'file': 'weibo.js'} 
15:01:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
15:01:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:01:11 完整请求
15:01:11 请求结束
15:01:11 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:11 path and query /api/weibo/all {} 
15:01:11 kwargs,  {'weibo_id': 2} <class 'dict'>
15:01:11 kwargs,  {'weibo_id': 3} <class 'dict'>
15:01:11 kwargs,  {'weibo_id': 30} <class 'dict'>
15:01:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 20,
        "weibo_id": 3,
        "content": ""
      }
    ]
  },
  {
    "content": "你是的",
    "comments": [],
    "id": 30
  }
]
15:01:12 完整请求
15:01:12 请求结束
15:01:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:12 path and query /api/comment/add {} 
15:01:12 add
15:01:17 完整请求
15:01:17 请求结束
15:01:17 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:17 path and query /api/comment/add {} 
15:01:17 add
15:01:56 完整请求
15:01:56 请求结束
15:01:56 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:01:56 path and query /api/weibo/add {} 
15:02:04 完整请求
15:02:04 请求结束
15:02:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:04 path and query /api/weibo/add {} {"content":"fdsfa"}
15:02:04 kwargs,  {'weibo_id': 31} <class 'dict'>
15:02:04 return weibo: {'content': 'fdsfa', 'comments': [], 'id': 31}
15:02:04 kwargs,  {'weibo_id': 31} <class 'dict'>
15:02:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fdsfa",
  "comments": [],
  "id": 31
}
15:02:12 完整请求
15:02:12 请求结束
15:02:12 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:12 path and query /api/weibo/add {} 
15:02:15 完整请求
15:02:15 请求结束
15:02:15 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:15 path and query /api/weibo/add {} 
15:02:24 完整请求
15:02:24 请求结束
15:02:24 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:24 path and query /api/weibo/add {} 
15:02:24 完整请求
15:02:24 请求结束
15:02:24 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:24 path and query /api/weibo/add {} 
15:02:25 完整请求
15:02:25 请求结束
15:02:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:25 path and query /api/weibo/add {} 
15:02:25 完整请求
15:02:25 请求结束
15:02:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:25 path and query /api/weibo/add {} 
15:02:25 完整请求
15:02:25 请求结束
15:02:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:25 path and query /api/weibo/add {} 
15:02:25 完整请求
15:02:25 请求结束
15:02:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:25 path and query /api/weibo/add {} 
15:02:25 完整请求
15:02:25 请求结束
15:02:25 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:25 path and query /api/weibo/add {} 
15:02:26 完整请求
15:02:26 请求结束
15:02:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:26 path and query /api/weibo/add {} 
15:02:26 完整请求
15:02:26 请求结束
15:02:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:26 path and query /api/weibo/add {} 
15:02:26 完整请求
15:02:26 请求结束
15:02:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:26 path and query /api/weibo/add {} 
15:02:26 完整请求
15:02:26 请求结束
15:02:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:26 path and query /api/weibo/add {} 
15:02:26 完整请求
15:02:26 请求结束
15:02:26 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:26 path and query /api/weibo/add {} 
15:02:27 完整请求
15:02:27 请求结束
15:02:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:27 path and query /api/weibo/add {} {"content":"fdsfa"}
15:02:27 kwargs,  {'weibo_id': 32} <class 'dict'>
15:02:27 return weibo: {'content': 'fdsfa', 'comments': [], 'id': 32}
15:02:27 kwargs,  {'weibo_id': 32} <class 'dict'>
15:02:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fdsfa",
  "comments": [],
  "id": 32
}
15:02:27 完整请求
15:02:27 请求结束
15:02:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:27 path and query /api/weibo/add {} 
15:02:27 完整请求
15:02:27 请求结束
15:02:27 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:27 path and query /api/weibo/add {} 
15:02:28 完整请求
15:02:28 请求结束
15:02:28 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:28 path and query /api/weibo/add {} 
15:02:32 完整请求
15:02:32 请求结束
15:02:32 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:32 path and query /api/weibo/add {} 
15:02:37 完整请求
15:02:37 完整请求
15:02:37 请求结束
15:02:37 请求结束
15:02:37 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:37 path and query /api/comment/add {} 
15:02:37 add
15:02:37 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:37 path and query /api/weibo/delete {'id': '30'} 
15:02:37 删除微博 30
15:02:37 kwargs,  {'weibo_id': 30} <class 'dict'>
15:02:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "你是的",
  "comments": [],
  "id": 30
}
15:02:38 完整请求
15:02:38 请求结束
15:02:38 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:38 path and query /api/weibo/delete {'id': '31'} 
15:02:38 删除微博 31
15:02:38 kwargs,  {'weibo_id': 31} <class 'dict'>
15:02:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fdsfa",
  "comments": [],
  "id": 31
}
15:02:40 完整请求
15:02:40 请求结束
15:02:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:40 path and query /api/weibo/delete {'id': '32'} 
15:02:40 完整请求
15:02:40 删除微博 32
15:02:40 请求结束
15:02:40 kwargs,  {'weibo_id': 32} <class 'dict'>
15:02:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fdsfa",
  "comments": [],
  "id": 32
}
15:02:40 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:40 path and query /api/comment/add {} 
15:02:40 add
15:02:41 完整请求
15:02:41 请求结束
15:02:41 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:41 path and query /api/weibo/add {} 
15:02:41 完整请求
15:02:41 请求结束
15:02:41 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:41 path and query /api/weibo/add {} 
15:02:42 完整请求
15:02:42 请求结束
15:02:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:42 path and query /api/weibo/add {} 
15:02:42 完整请求
15:02:42 请求结束
15:02:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:42 path and query /api/weibo/add {} 
15:02:42 完整请求
15:02:42 请求结束
15:02:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:42 path and query /api/weibo/add {} 
15:02:42 完整请求
15:02:42 请求结束
15:02:42 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:42 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:43 完整请求
15:02:43 请求结束
15:02:43 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:43 path and query /api/weibo/add {} 
15:02:44 完整请求
15:02:44 请求结束
15:02:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:44 path and query /api/weibo/add {} 
15:02:44 完整请求
15:02:44 请求结束
15:02:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:44 path and query /api/weibo/add {} 
15:02:44 完整请求
15:02:44 请求结束
15:02:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:44 path and query /api/weibo/add {} 
15:02:44 完整请求
15:02:44 请求结束
15:02:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:44 path and query /api/weibo/add {} 
15:02:44 完整请求
15:02:44 请求结束
15:02:44 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:44 path and query /api/weibo/add {} 
15:02:45 完整请求
15:02:45 请求结束
15:02:45 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:45 path and query /api/comment/add {} 
15:02:45 add
15:02:46 完整请求
15:02:46 请求结束
15:02:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:46 path and query /weibo/index {} 
15:02:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:02:46 完整请求
15:02:46 请求结束
15:02:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:46 path and query /weibo/weibo.css {} 
15:02:46 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:02:46 完整请求
15:02:46 请求结束
15:02:46 完整请求
15:02:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:46 path and query /static {'file': 'gua.js'} 
15:02:46 请求结束
15:02:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:46 path and query /static {'file': 'weibo.js'} 
15:02:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
15:02:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:02:46 完整请求
15:02:46 请求结束
15:02:46 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:46 path and query /api/weibo/all {} 
15:02:46 kwargs,  {'weibo_id': 2} <class 'dict'>
15:02:46 kwargs,  {'weibo_id': 3} <class 'dict'>
15:02:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "user_id": 1,
    "content": "你好",
    "comments": [
      {
        "id": 3,
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello"
      },
      {
        "id": 4,
        "user_id": 1,
        "weibo_id": 2,
        "content": "123"
      },
      {
        "id": 18,
        "weibo_id": 2,
        "content": "懂aff"
      },
      {
        "id": 19,
        "weibo_id": 2,
        "content": "ddd "
      }
    ]
  },
  {
    "id": 3,
    "user_id": 1,
    "content": "hahaha",
    "comments": [
      {
        "id": 6,
        "user_id": 1,
        "weibo_id": 3,
        "content": "123"
      },
      {
        "id": 17,
        "weibo_id": 3,
        "content": "323232"
      },
      {
        "id": 20,
        "weibo_id": 3,
        "content": ""
      }
    ]
  }
]
15:02:48 完整请求
15:02:48 请求结束
15:02:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:48 path and query /api/weibo/add {} 
15:02:48 完整请求
15:02:48 请求结束
15:02:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:48 path and query /api/weibo/add {} 
15:02:48 完整请求
15:02:48 请求结束
15:02:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:48 path and query /api/weibo/add {} 
15:02:48 完整请求
15:02:48 请求结束
15:02:48 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:48 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:49 完整请求
15:02:49 请求结束
15:02:49 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:49 path and query /api/weibo/add {} 
15:02:50 完整请求
15:02:50 请求结束
15:02:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:50 path and query /api/weibo/add {} 
15:02:50 完整请求
15:02:50 请求结束
15:02:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:50 path and query /api/weibo/add {} 
15:02:59 完整请求
15:02:59 请求结束
15:02:59 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:59 path and query /api/weibo/add {} 
15:02:59 完整请求
15:02:59 请求结束
15:02:59 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:59 path and query /api/weibo/add {} 
15:02:59 完整请求
15:02:59 请求结束
15:02:59 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:59 path and query /api/weibo/add {} {"content":""}
15:02:59 kwargs,  {'weibo_id': 4} <class 'dict'>
15:02:59 return weibo: {'content': '', 'comments': [], 'id': 4}
15:02:59 kwargs,  {'weibo_id': 4} <class 'dict'>
15:02:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "",
  "comments": [],
  "id": 4
}
15:02:59 完整请求
15:02:59 请求结束
15:02:59 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:02:59 path and query /api/weibo/add {} 
15:03:00 完整请求
15:03:00 请求结束
15:03:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:00 path and query /api/weibo/add {} {"content":""}
15:03:00 kwargs,  {'weibo_id': 5} <class 'dict'>
15:03:00 return weibo: {'content': '', 'comments': [], 'id': 5}
15:03:00 kwargs,  {'weibo_id': 5} <class 'dict'>
15:03:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "",
  "comments": [],
  "id": 5
}
15:03:00 完整请求
15:03:00 请求结束
15:03:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:00 path and query /api/weibo/add {} 
15:03:00 完整请求
15:03:00 请求结束
15:03:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:00 path and query /api/weibo/add {} 
15:03:00 完整请求
15:03:00 请求结束
15:03:00 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:00 path and query /api/weibo/add {} 
15:03:01 完整请求
15:03:01 请求结束
15:03:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:01 path and query /api/weibo/add {} 
15:03:01 完整请求
15:03:01 请求结束
15:03:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:01 path and query /api/weibo/add {} 
15:03:01 完整请求
15:03:01 请求结束
15:03:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:03:01 path and query /api/weibo/add {} 
15:08:02 完整请求
15:08:02 请求结束
15:08:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:02 path and query /weibo/index {} 
15:08:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:08:02 完整请求
15:08:02 请求结束
15:08:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:02 path and query /weibo/weibo.css {} 
15:08:02 完整请求
15:08:02 完整请求
15:08:02 请求结束
15:08:02 请求结束
15:08:02 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:08:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:02 path and query /static {'file': 'gua.js'} 
15:08:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
15:08:02 path and query /static {'file': 'weibo.js'} 
15:08:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('afterbegin', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var content = input.value
        log('click add', title)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:08:02 完整请求
15:08:02 请求结束
15:08:02 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:02 path and query /api/weibo/all {} 
15:08:02 kwargs,  {'weibo_id': 2} <class 'dict'>
15:08:02 kwargs,  {'weibo_id': 3} <class 'dict'>
15:08:02 kwargs,  {'weibo_id': 4} <class 'dict'>
15:08:02 kwargs,  {'weibo_id': 5} <class 'dict'>
15:08:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 3,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 4,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 18,
        "content": "懂aff"
      },
      {
        "weibo_id": 2,
        "id": 19,
        "content": "ddd "
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "id": 6,
        "content": "123"
      },
      {
        "weibo_id": 3,
        "id": 17,
        "content": "323232"
      },
      {
        "weibo_id": 3,
        "id": 20,
        "content": ""
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  }
]
15:08:47 完整请求
15:08:47 请求结束
15:08:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:47 path and query /weibo/index {} 
15:08:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:08:47 完整请求
15:08:47 完整请求
15:08:47 请求结束
15:08:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:47 请求结束
15:08:47 path and query /static {'file': 'gua.js'} 
15:08:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:47 完整请求
15:08:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
15:08:47 path and query /weibo/weibo.css {} 
15:08:47 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:08:47 请求结束
15:08:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:47 path and query /static {'file': 'weibo.js'} 
15:08:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('afterbegin', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:08:47 完整请求
15:08:47 请求结束
15:08:47 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:47 path and query /api/weibo/all {} 
15:08:47 kwargs,  {'weibo_id': 2} <class 'dict'>
15:08:47 kwargs,  {'weibo_id': 3} <class 'dict'>
15:08:47 kwargs,  {'weibo_id': 4} <class 'dict'>
15:08:47 kwargs,  {'weibo_id': 5} <class 'dict'>
15:08:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 3,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 4,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 18,
        "content": "懂aff"
      },
      {
        "weibo_id": 2,
        "id": 19,
        "content": "ddd "
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "id": 6,
        "content": "123"
      },
      {
        "weibo_id": 3,
        "id": 17,
        "content": "323232"
      },
      {
        "weibo_id": 3,
        "id": 20,
        "content": ""
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  }
]
15:08:50 完整请求
15:08:50 请求结束
15:08:50 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:50 path and query /api/weibo/add {} {"content":"甮大幅"}
15:08:50 kwargs,  {'weibo_id': 6} <class 'dict'>
15:08:50 return weibo: {'content': '甮大幅', 'id': 6, 'comments': []}
15:08:50 kwargs,  {'weibo_id': 6} <class 'dict'>
15:08:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮大幅",
  "id": 6,
  "comments": []
}
15:08:52 完整请求
15:08:52 请求结束
15:08:52 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:52 path and query /api/weibo/add {} 
15:08:52 完整请求
15:08:52 请求结束
15:08:52 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:52 path and query /api/weibo/add {} 
15:08:53 完整请求
15:08:53 请求结束
15:08:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:53 path and query /api/weibo/add {} 
15:08:53 完整请求
15:08:53 请求结束
15:08:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:53 path and query /api/weibo/add {} 
15:08:53 完整请求
15:08:53 请求结束
15:08:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:53 path and query /api/weibo/add {} 
15:08:53 完整请求
15:08:53 请求结束
15:08:53 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:53 path and query /api/weibo/add {} 
15:08:54 完整请求
15:08:54 请求结束
15:08:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:54 path and query /api/weibo/add {} 
15:08:54 完整请求
15:08:54 请求结束
15:08:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:54 path and query /api/weibo/add {} 
15:08:54 完整请求
15:08:54 请求结束
15:08:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:54 path and query /api/weibo/add {} 
15:08:54 完整请求
15:08:54 请求结束
15:08:54 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:08:54 path and query /api/weibo/add {} 
15:09:01 完整请求
15:09:01 请求结束
15:09:01 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:01 path and query /api/comment/add {} 
15:09:01 add
15:09:03 完整请求
15:09:03 请求结束
15:09:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:03 path and query /api/comment/add {} 
15:09:03 add
15:09:03 完整请求
15:09:03 请求结束
15:09:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:03 path and query /api/comment/add {} 
15:09:03 add
15:09:03 完整请求
15:09:03 请求结束
15:09:03 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:03 path and query /api/comment/add {} 
15:09:03 add
15:09:04 完整请求
15:09:04 请求结束
15:09:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:04 path and query /api/comment/add {} 
15:09:04 add
15:09:04 完整请求
15:09:04 请求结束
15:09:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:04 path and query /api/comment/add {} {"content":"发动法","weibo_id":"6"}
15:09:04 add
15:09:04 return comment: {'weibo_id': 6, 'id': 21, 'content': '发动法'}
15:09:04 *********** < Comment
weibo_id: (6)
id: (21)
content: (发动法) 
>

15:09:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "weibo_id": 6,
  "id": 21,
  "content": "发动法"
}
15:09:04 完整请求
15:09:04 请求结束
15:09:04 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:04 path and query /api/comment/add {} 
15:09:04 add
15:09:06 完整请求
15:09:06 请求结束
15:09:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:06 path and query /api/comment/add {} 
15:09:06 add
15:09:06 完整请求
15:09:06 请求结束
15:09:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:06 path and query /api/comment/add {} 
15:09:06 add
15:09:06 完整请求
15:09:06 请求结束
15:09:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:06 path and query /api/comment/add {} 
15:09:06 add
15:09:06 完整请求
15:09:06 请求结束
15:09:06 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:06 path and query /api/comment/add {} 
15:09:06 add
15:09:07 完整请求
15:09:07 请求结束
15:09:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:07 path and query /api/comment/add {} 
15:09:07 add
15:09:07 完整请求
15:09:07 请求结束
15:09:07 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:07 path and query /api/comment/add {} 
15:09:07 add
15:09:08 完整请求
15:09:08 请求结束
15:09:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:08 path and query /api/comment/add {} 
15:09:08 add
15:09:08 完整请求
15:09:08 请求结束
15:09:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:08 path and query /api/comment/add {} 
15:09:08 add
15:09:08 完整请求
15:09:08 请求结束
15:09:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:08 path and query /api/comment/add {} 
15:09:08 add
15:09:08 完整请求
15:09:08 请求结束
15:09:08 cookie ['session=eyJ1c2VyX2lkIjozfQ.C9hpcg.DVGDwowi7DqBCARpMbO9pRxltYY', 'cookie_name=GUA']
15:09:08 path and query /api/comment/add {} 
15:09:08 add
15:09:29 完整请求
15:09:29 请求结束
15:09:29 cookie ['']
15:09:29 path and query /weibo/index {} 
15:09:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:09:34 完整请求
15:09:34 完整请求
15:09:34 完整请求
15:09:34 请求结束
15:09:34 请求结束
15:09:34 cookie ['']
15:09:34 请求结束
15:09:34 cookie ['']
15:09:34 cookie ['']
15:09:34 path and query /static {'file': 'weibo.js'} 
15:09:34 path and query /static {'file': 'gua.js'} 
15:09:34 path and query /weibo/weibo.css {} 
15:09:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
15:09:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('afterbegin', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:09:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:09:34 完整请求
15:09:34 请求结束
15:09:34 cookie ['']
15:09:34 path and query /api/weibo/all {} 
15:09:34 kwargs,  {'weibo_id': 2} <class 'dict'>
15:09:34 kwargs,  {'weibo_id': 3} <class 'dict'>
15:09:34 kwargs,  {'weibo_id': 4} <class 'dict'>
15:09:34 kwargs,  {'weibo_id': 5} <class 'dict'>
15:09:34 kwargs,  {'weibo_id': 6} <class 'dict'>
15:09:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 3,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "user_id": 1,
        "id": 4,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 18,
        "content": "懂aff"
      },
      {
        "weibo_id": 2,
        "id": 19,
        "content": "ddd "
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "weibo_id": 3,
        "user_id": 1,
        "id": 6,
        "content": "123"
      },
      {
        "weibo_id": 3,
        "id": 17,
        "content": "323232"
      },
      {
        "weibo_id": 3,
        "id": 20,
        "content": ""
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "content": "",
    "id": 4,
    "comments": []
  },
  {
    "content": "",
    "id": 5,
    "comments": []
  },
  {
    "content": "甮大幅",
    "id": 6,
    "comments": [
      {
        "weibo_id": 6,
        "id": 21,
        "content": "发动法"
      }
    ]
  }
]
15:09:34 完整请求
15:09:34 请求结束
15:09:34 cookie ['']
15:09:34 path and query /favicon.ico {} 
15:09:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
15:11:40 完整请求
15:11:40 请求结束
15:11:40 cookie ['']
15:11:40 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:40 kwargs,  {'weibo_id': 7} <class 'dict'>
15:11:40 return weibo: {'content': '甮㩐懂', 'id': 7, 'comments': []}
15:11:40 kwargs,  {'weibo_id': 7} <class 'dict'>
15:11:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 7,
  "comments": []
}
15:11:40 完整请求
15:11:40 请求结束
15:11:40 cookie ['']
15:11:40 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:40 kwargs,  {'weibo_id': 8} <class 'dict'>
15:11:40 return weibo: {'content': '甮㩐懂', 'id': 8, 'comments': []}
15:11:40 kwargs,  {'weibo_id': 8} <class 'dict'>
15:11:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 8,
  "comments": []
}
15:11:41 完整请求
15:11:41 请求结束
15:11:41 cookie ['']
15:11:41 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:41 kwargs,  {'weibo_id': 9} <class 'dict'>
15:11:41 return weibo: {'content': '甮㩐懂', 'id': 9, 'comments': []}
15:11:41 kwargs,  {'weibo_id': 9} <class 'dict'>
15:11:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 9,
  "comments": []
}
15:11:41 完整请求
15:11:41 请求结束
15:11:41 cookie ['']
15:11:41 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:41 kwargs,  {'weibo_id': 10} <class 'dict'>
15:11:41 return weibo: {'content': '甮㩐懂', 'id': 10, 'comments': []}
15:11:41 kwargs,  {'weibo_id': 10} <class 'dict'>
15:11:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 10,
  "comments": []
}
15:11:41 完整请求
15:11:41 请求结束
15:11:41 cookie ['']
15:11:41 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:41 kwargs,  {'weibo_id': 11} <class 'dict'>
15:11:41 return weibo: {'content': '甮㩐懂', 'id': 11, 'comments': []}
15:11:41 kwargs,  {'weibo_id': 11} <class 'dict'>
15:11:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 11,
  "comments": []
}
15:11:42 完整请求
15:11:42 请求结束
15:11:42 cookie ['']
15:11:42 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:42 kwargs,  {'weibo_id': 12} <class 'dict'>
15:11:42 return weibo: {'content': '甮㩐懂', 'id': 12, 'comments': []}
15:11:42 kwargs,  {'weibo_id': 12} <class 'dict'>
15:11:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 12,
  "comments": []
}
15:11:42 完整请求
15:11:42 请求结束
15:11:42 cookie ['']
15:11:42 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:42 kwargs,  {'weibo_id': 13} <class 'dict'>
15:11:42 return weibo: {'content': '甮㩐懂', 'id': 13, 'comments': []}
15:11:42 kwargs,  {'weibo_id': 13} <class 'dict'>
15:11:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 13,
  "comments": []
}
15:11:47 完整请求
15:11:47 请求结束
15:11:47 cookie ['']
15:11:47 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:47 kwargs,  {'weibo_id': 14} <class 'dict'>
15:11:47 return weibo: {'content': '甮㩐懂', 'id': 14, 'comments': []}
15:11:47 kwargs,  {'weibo_id': 14} <class 'dict'>
15:11:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 14,
  "comments": []
}
15:11:47 完整请求
15:11:47 请求结束
15:11:47 cookie ['']
15:11:47 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:47 kwargs,  {'weibo_id': 15} <class 'dict'>
15:11:47 return weibo: {'content': '甮㩐懂', 'id': 15, 'comments': []}
15:11:47 kwargs,  {'weibo_id': 15} <class 'dict'>
15:11:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 15,
  "comments": []
}
15:11:47 完整请求
15:11:47 请求结束
15:11:47 cookie ['']
15:11:47 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:47 kwargs,  {'weibo_id': 16} <class 'dict'>
15:11:47 return weibo: {'content': '甮㩐懂', 'id': 16, 'comments': []}
15:11:47 kwargs,  {'weibo_id': 16} <class 'dict'>
15:11:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 16,
  "comments": []
}
15:11:47 完整请求
15:11:47 请求结束
15:11:47 cookie ['']
15:11:47 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:47 kwargs,  {'weibo_id': 17} <class 'dict'>
15:11:47 return weibo: {'content': '甮㩐懂', 'id': 17, 'comments': []}
15:11:47 kwargs,  {'weibo_id': 17} <class 'dict'>
15:11:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 17,
  "comments": []
}
15:11:47 完整请求
15:11:47 请求结束
15:11:47 cookie ['']
15:11:47 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:47 kwargs,  {'weibo_id': 18} <class 'dict'>
15:11:47 return weibo: {'content': '甮㩐懂', 'id': 18, 'comments': []}
15:11:47 kwargs,  {'weibo_id': 18} <class 'dict'>
15:11:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 18,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 19} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 19, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 19} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 19,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 20} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 20, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 20} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 20,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 21} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 21, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 21} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 21,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 22} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 22, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 22} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 22,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 23} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 23, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 23} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 23,
  "comments": []
}
15:11:48 完整请求
15:11:48 请求结束
15:11:48 cookie ['']
15:11:48 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:48 kwargs,  {'weibo_id': 24} <class 'dict'>
15:11:48 return weibo: {'content': '甮㩐懂', 'id': 24, 'comments': []}
15:11:48 kwargs,  {'weibo_id': 24} <class 'dict'>
15:11:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 24,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 25} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 25, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 25} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 25,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 26} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 26, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 26} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 26,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 27} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 27, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 27} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 27,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 28} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 28, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 28} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 28,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 29} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 29, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 29} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 29,
  "comments": []
}
15:11:49 完整请求
15:11:49 请求结束
15:11:49 cookie ['']
15:11:49 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:49 kwargs,  {'weibo_id': 30} <class 'dict'>
15:11:49 return weibo: {'content': '甮㩐懂', 'id': 30, 'comments': []}
15:11:49 kwargs,  {'weibo_id': 30} <class 'dict'>
15:11:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 30,
  "comments": []
}
15:11:50 完整请求
15:11:50 请求结束
15:11:50 cookie ['']
15:11:50 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:50 kwargs,  {'weibo_id': 31} <class 'dict'>
15:11:50 return weibo: {'content': '甮㩐懂', 'id': 31, 'comments': []}
15:11:50 kwargs,  {'weibo_id': 31} <class 'dict'>
15:11:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 31,
  "comments": []
}
15:11:50 完整请求
15:11:50 请求结束
15:11:50 cookie ['']
15:11:50 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:50 kwargs,  {'weibo_id': 32} <class 'dict'>
15:11:50 return weibo: {'content': '甮㩐懂', 'id': 32, 'comments': []}
15:11:50 kwargs,  {'weibo_id': 32} <class 'dict'>
15:11:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 32,
  "comments": []
}
15:11:50 完整请求
15:11:50 请求结束
15:11:50 cookie ['']
15:11:50 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:50 kwargs,  {'weibo_id': 33} <class 'dict'>
15:11:50 return weibo: {'content': '甮㩐懂', 'id': 33, 'comments': []}
15:11:50 kwargs,  {'weibo_id': 33} <class 'dict'>
15:11:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 33,
  "comments": []
}
15:11:50 完整请求
15:11:50 请求结束
15:11:50 cookie ['']
15:11:50 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:50 kwargs,  {'weibo_id': 34} <class 'dict'>
15:11:50 return weibo: {'content': '甮㩐懂', 'id': 34, 'comments': []}
15:11:50 kwargs,  {'weibo_id': 34} <class 'dict'>
15:11:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 34,
  "comments": []
}
15:11:50 完整请求
15:11:50 请求结束
15:11:50 cookie ['']
15:11:50 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:50 kwargs,  {'weibo_id': 35} <class 'dict'>
15:11:50 return weibo: {'content': '甮㩐懂', 'id': 35, 'comments': []}
15:11:50 kwargs,  {'weibo_id': 35} <class 'dict'>
15:11:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 35,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 36} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 36, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 36} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 36,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 37} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 37, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 37} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 37,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 38} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 38, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 38} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 38,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 39} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 39, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 39} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 39,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 40} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 40, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 40} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 40,
  "comments": []
}
15:11:51 完整请求
15:11:51 请求结束
15:11:51 cookie ['']
15:11:51 path and query /api/weibo/add {} {"content":"甮㩐懂"}
15:11:51 kwargs,  {'weibo_id': 41} <class 'dict'>
15:11:51 return weibo: {'content': '甮㩐懂', 'id': 41, 'comments': []}
15:11:51 kwargs,  {'weibo_id': 41} <class 'dict'>
15:11:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 41,
  "comments": []
}
15:11:52 完整请求
15:11:52 请求结束
15:11:52 cookie ['']
15:11:52 path and query /api/weibo/delete {'id': '41'} 
15:11:52 删除微博 41
15:11:52 kwargs,  {'weibo_id': 41} <class 'dict'>
15:11:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 41,
  "comments": []
}
15:11:52 完整请求
15:11:52 请求结束
15:11:52 cookie ['']
15:11:52 path and query /api/weibo/delete {'id': '40'} 
15:11:52 删除微博 40
15:11:52 kwargs,  {'weibo_id': 40} <class 'dict'>
15:11:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 40,
  "comments": []
}
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['']
15:11:53 path and query /api/weibo/delete {'id': '39'} 
15:11:53 删除微博 39
15:11:53 kwargs,  {'weibo_id': 39} <class 'dict'>
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 39,
  "comments": []
}
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['']
15:11:53 path and query /api/weibo/delete {'id': '38'} 
15:11:53 删除微博 38
15:11:53 kwargs,  {'weibo_id': 38} <class 'dict'>
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 38,
  "comments": []
}
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['']
15:11:53 path and query /api/weibo/delete {'id': '37'} 
15:11:53 删除微博 37
15:11:53 kwargs,  {'weibo_id': 37} <class 'dict'>
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 37,
  "comments": []
}
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['']
15:11:53 path and query /api/weibo/delete {'id': '36'} 
15:11:53 删除微博 36
15:11:53 kwargs,  {'weibo_id': 36} <class 'dict'>
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 36,
  "comments": []
}
15:11:53 完整请求
15:11:53 请求结束
15:11:53 cookie ['']
15:11:53 path and query /api/weibo/delete {'id': '35'} 
15:11:53 删除微博 35
15:11:53 kwargs,  {'weibo_id': 35} <class 'dict'>
15:11:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 35,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '34'} 
15:11:54 删除微博 34
15:11:54 kwargs,  {'weibo_id': 34} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 34,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '33'} 
15:11:54 删除微博 33
15:11:54 kwargs,  {'weibo_id': 33} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 33,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '32'} 
15:11:54 删除微博 32
15:11:54 kwargs,  {'weibo_id': 32} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 32,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '31'} 
15:11:54 删除微博 31
15:11:54 kwargs,  {'weibo_id': 31} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 31,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '30'} 
15:11:54 删除微博 30
15:11:54 kwargs,  {'weibo_id': 30} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 30,
  "comments": []
}
15:11:54 完整请求
15:11:54 请求结束
15:11:54 cookie ['']
15:11:54 path and query /api/weibo/delete {'id': '29'} 
15:11:54 删除微博 29
15:11:54 kwargs,  {'weibo_id': 29} <class 'dict'>
15:11:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 29,
  "comments": []
}
15:11:55 完整请求
15:11:55 请求结束
15:11:55 cookie ['']
15:11:55 path and query /api/weibo/delete {'id': '28'} 
15:11:55 删除微博 28
15:11:55 kwargs,  {'weibo_id': 28} <class 'dict'>
15:11:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 28,
  "comments": []
}
15:11:55 完整请求
15:11:55 请求结束
15:11:55 cookie ['']
15:11:55 path and query /api/weibo/delete {'id': '27'} 
15:11:55 删除微博 27
15:11:55 kwargs,  {'weibo_id': 27} <class 'dict'>
15:11:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 27,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '26'} 
15:11:56 删除微博 26
15:11:56 kwargs,  {'weibo_id': 26} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 26,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '25'} 
15:11:56 删除微博 25
15:11:56 kwargs,  {'weibo_id': 25} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 25,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '24'} 
15:11:56 删除微博 24
15:11:56 kwargs,  {'weibo_id': 24} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 24,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '23'} 
15:11:56 删除微博 23
15:11:56 kwargs,  {'weibo_id': 23} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 23,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '22'} 
15:11:56 删除微博 22
15:11:56 kwargs,  {'weibo_id': 22} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 22,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '21'} 
15:11:56 删除微博 21
15:11:56 kwargs,  {'weibo_id': 21} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 21,
  "comments": []
}
15:11:56 完整请求
15:11:56 请求结束
15:11:56 cookie ['']
15:11:56 path and query /api/weibo/delete {'id': '20'} 
15:11:56 删除微博 20
15:11:56 kwargs,  {'weibo_id': 20} <class 'dict'>
15:11:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 20,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '19'} 
15:11:57 删除微博 19
15:11:57 kwargs,  {'weibo_id': 19} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 19,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '18'} 
15:11:57 删除微博 18
15:11:57 kwargs,  {'weibo_id': 18} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 18,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '17'} 
15:11:57 删除微博 17
15:11:57 kwargs,  {'weibo_id': 17} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 17,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '16'} 
15:11:57 删除微博 16
15:11:57 kwargs,  {'weibo_id': 16} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 16,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '15'} 
15:11:57 删除微博 15
15:11:57 kwargs,  {'weibo_id': 15} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 15,
  "comments": []
}
15:11:57 完整请求
15:11:57 请求结束
15:11:57 cookie ['']
15:11:57 path and query /api/weibo/delete {'id': '14'} 
15:11:57 删除微博 14
15:11:57 kwargs,  {'weibo_id': 14} <class 'dict'>
15:11:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 14,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '13'} 
15:11:58 删除微博 13
15:11:58 kwargs,  {'weibo_id': 13} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 13,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '12'} 
15:11:58 删除微博 12
15:11:58 kwargs,  {'weibo_id': 12} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 12,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '11'} 
15:11:58 删除微博 11
15:11:58 kwargs,  {'weibo_id': 11} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 11,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '10'} 
15:11:58 删除微博 10
15:11:58 kwargs,  {'weibo_id': 10} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 10,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '9'} 
15:11:58 删除微博 9
15:11:58 kwargs,  {'weibo_id': 9} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 9,
  "comments": []
}
15:11:58 完整请求
15:11:58 请求结束
15:11:58 cookie ['']
15:11:58 path and query /api/weibo/delete {'id': '8'} 
15:11:58 删除微博 8
15:11:58 kwargs,  {'weibo_id': 8} <class 'dict'>
15:11:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 8,
  "comments": []
}
15:11:59 完整请求
15:11:59 请求结束
15:11:59 cookie ['']
15:11:59 path and query /api/weibo/delete {'id': '7'} 
15:11:59 删除微博 7
15:11:59 kwargs,  {'weibo_id': 7} <class 'dict'>
15:11:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "甮㩐懂",
  "id": 7,
  "comments": []
}
16:51:18 完整请求
16:51:18 请求结束
16:51:18 cookie ['']
16:51:18 path and query / {} 
16:51:18 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


16:51:18 完整请求
16:51:18 请求结束
16:51:18 cookie ['']
16:51:18 path and query /todo/index {} 
16:51:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:51:18 完整请求
16:51:18 完整请求
16:51:18 请求结束
16:51:18 请求结束
16:51:18 cookie ['']
16:51:18 cookie ['']
16:51:18 path and query /static {'file': 'gua.js'} 
16:51:18 path and query /static {'file': 'todo.js'} 
16:51:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:51:18 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:51:18 完整请求
16:51:18 请求结束
16:51:18 cookie ['']
16:51:18 path and query /api/todo/all {} 
16:51:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "title": "fddfdsf",
    "completed": false,
    "ct": 1489419465,
    "ut": 1489419465,
    "id": 7
  },
  {
    "title": "fdf",
    "completed": false,
    "ct": 1489460379,
    "ut": 1489460379,
    "id": 9
  },
  {
    "title": "bbbbb",
    "completed": false,
    "ct": 1489462079,
    "ut": 1489462694,
    "id": 10
  },
  {
    "title": "你说的对吗",
    "completed": false,
    "ct": 1492664207,
    "ut": 1492664207,
    "id": 11
  },
  {
    "title": "你说的对吗",
    "completed": false,
    "ct": 1492664208,
    "ut": 1492664208,
    "id": 12
  },
  {
    "title": "你说的对吗",
    "completed": false,
    "ct": 1492664208,
    "ut": 1492664208,
    "id": 13
  },
  {
    "title": "你说的对吗",
    "completed": false,
    "ct": 1492664208,
    "ut": 1492664208,
    "id": 14
  },
  {
    "title": "你说的对吗",
    "completed": false,
    "ct": 1492664208,
    "ut": 1492664208,
    "id": 15
  }
]
16:51:20 完整请求
16:51:20 请求结束
16:51:20 cookie ['']
16:51:20 path and query /api/todo/delete {'id': '7'} 
16:51:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "fddfdsf",
  "completed": false,
  "ct": 1489419465,
  "ut": 1489419465,
  "id": 7
}
16:51:20 完整请求
16:51:20 请求结束
16:51:20 cookie ['']
16:51:20 path and query /api/todo/delete {'id': '9'} 
16:51:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "fdf",
  "completed": false,
  "ct": 1489460379,
  "ut": 1489460379,
  "id": 9
}
16:51:23 完整请求
16:51:23 请求结束
16:51:23 cookie ['']
16:51:23 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678283,
  "ut": 1492678283,
  "id": 16
}
16:51:24 完整请求
16:51:24 请求结束
16:51:24 cookie ['']
16:51:24 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678284,
  "ut": 1492678284,
  "id": 17
}
16:51:24 完整请求
16:51:24 请求结束
16:51:24 cookie ['']
16:51:24 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678284,
  "ut": 1492678284,
  "id": 18
}
16:51:24 完整请求
16:51:24 请求结束
16:51:24 cookie ['']
16:51:24 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678284,
  "ut": 1492678284,
  "id": 19
}
16:51:24 完整请求
16:51:24 请求结束
16:51:24 cookie ['']
16:51:24 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678284,
  "ut": 1492678284,
  "id": 20
}
16:51:25 完整请求
16:51:25 请求结束
16:51:25 cookie ['']
16:51:25 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678285,
  "ut": 1492678285,
  "id": 21
}
16:51:25 完整请求
16:51:25 请求结束
16:51:25 cookie ['']
16:51:25 path and query /api/todo/add {} {"title":"㩐撒法"}
16:51:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "㩐撒法",
  "completed": false,
  "ct": 1492678285,
  "ut": 1492678285,
  "id": 22
}
16:51:36 完整请求
16:51:36 请求结束
16:51:36 cookie ['']
16:51:36 path and query /weibo/index {} 
16:51:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <link href="weibo.css" rel="stylesheet" type="text/css" />
    <style>
        .input {
            text-align: center;
            margin-bottom: 20px;
            background-color: #111;
            padding: 20px;
        }
        .comment {
            border: 1px red solid;
        }
        .Weibo-cell {
            width: 400px;
            margin: 20px auto;
            background-color: #abb;
        }
        .Weibo-content {
            padding: 10px;
        }
        .comment-cell {
            background-color: white;
            color: #222;
            padding: 0 30px;
            background-color: inherit;
        }
        .comment-delete {
            float: right;
        }

    </style>
</head>
<body>
    <div class="input">
        <input id="id-input-Weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:51:36 完整请求
16:51:36 完整请求
16:51:36 请求结束
16:51:36 完整请求
16:51:36 cookie ['']
16:51:36 请求结束
16:51:36 请求结束
16:51:36 cookie ['']
16:51:36 cookie ['']
16:51:36 path and query /static {'file': 'weibo.js'} 
16:51:36 path and query /weibo/weibo.css {} 
16:51:36 path and query /static {'file': 'gua.js'} 
16:51:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('r.response:', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    log('data', data)
    log('r:', r)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}


// TODO weibo api
// load Weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 Weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

//删除一个 Weibo
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 Weibo
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// 增加一个 comment
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    log('form:', form)
    ajax('POST', path, form, callback)
}

//删除一个 comment
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    console.log('path is ', path)
    ajax('GET', path, '', callback)
    //    get(path, callback)
}
16:51:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:51:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var id = c.id
        var t = `
            <div class='comment-cell' data-id=${id}>
                    <p>${c.content}<button class='comment-delete'>删除</button></p>
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var weibo_id = 'Weibo-' + Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div id=${weibo_id}  class='Weibo-cell' data-id=${id}>
            <div class="Weibo-content">
                [WEIBO]: ${content}
            </div>
            <button class="Weibo-edit">编辑</button>
            <button class="Weibo-delete">删除</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="comment" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('afterbegin', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            log('Weibo_id', Weibo_id)
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 弹出更新编辑框
            var WeiboCell = self.parentElement
            var content = e('.Weibo-content')
            content.remove()
            insertEditForm(WeiboCell)
        }
    })
}

var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var editForm = e('.Weibo-edit-form')
                editForm.remove()
                var content = `
                        <div class="Weibo-content">
                            [WEIBO]: ${Weibo.content}
                        </div>
                `
                WeiboCell.insertAdjacentHTML('afterbegin', content)


//                WeiboCell.remove()
            })
        }
    })
}


var insertComment = function(comment, cell) {
    // 插入 comment
    id = comment.id
    content = comment.content
    var comment = `
        <div class='comment-cell' data-id=${id}>
            <p>${content}<button class='comment-delete'>删除</button></p>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', comment)
}

var bindEventCommentAdd = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(){
        var self = event.target
        log('self is', self)
        if (self.classList.contains('comment-add')) {
            var WeiboCell = self.parentElement.parentElement
            log('weibo is', WeiboCell)
            var commentList = WeiboCell.querySelector('.comment-list')
            var input = self.parentElement.querySelector('.comment-content')
            log('input', input)
            var content = input.value
            var Weibo_id = WeiboCell.dataset.id
            log('click add', content)
            log('weibo_id', Weibo_id)
            var form = {
            'content': content,
            'weibo_id': Weibo_id,
            }
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var comment = JSON.parse(r)
            insertComment(comment, commentList)
        })
    })
}

var bindEventCommentDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            // 删除这个 Comment
            var WeiboCell = self.parentElement.parentElement.parentElement.parentElement
            var comment = self.parentElement.parentElement
            var comment_id = comment.dataset.id
            log('comment_id', comment_id)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                comment.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:51:36 完整请求
16:51:36 请求结束
16:51:36 cookie ['']
16:51:36 path and query /api/weibo/all {} 
16:51:36 kwargs,  {'weibo_id': 2} <class 'dict'>
16:51:36 kwargs,  {'weibo_id': 3} <class 'dict'>
16:51:36 kwargs,  {'weibo_id': 4} <class 'dict'>
16:51:36 kwargs,  {'weibo_id': 5} <class 'dict'>
16:51:36 kwargs,  {'weibo_id': 6} <class 'dict'>
16:51:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "你好",
    "comments": [
      {
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1,
        "id": 3
      },
      {
        "content": "123",
        "weibo_id": 2,
        "user_id": 1,
        "id": 4
      },
      {
        "content": "懂aff",
        "weibo_id": 2,
        "id": 18
      },
      {
        "content": "ddd ",
        "weibo_id": 2,
        "id": 19
      }
    ],
    "user_id": 1,
    "id": 2
  },
  {
    "content": "hahaha",
    "comments": [
      {
        "content": "123",
        "weibo_id": 3,
        "user_id": 1,
        "id": 6
      },
      {
        "content": "323232",
        "weibo_id": 3,
        "id": 17
      },
      {
        "content": "",
        "weibo_id": 3,
        "id": 20
      }
    ],
    "user_id": 1,
    "id": 3
  },
  {
    "content": "",
    "comments": [],
    "id": 4
  },
  {
    "content": "",
    "comments": [],
    "id": 5
  },
  {
    "content": "甮大幅",
    "comments": [
      {
        "content": "发动法",
        "weibo_id": 6,
        "id": 21
      }
    ],
    "id": 6
  }
]
16:51:38 完整请求
16:51:38 请求结束
16:51:38 cookie ['']
16:51:38 path and query /api/comment/add {} 
16:51:38 add
16:51:40 完整请求
16:51:40 请求结束
16:51:40 完整请求
16:51:40 cookie ['']
16:51:40 path and query /api/comment/add {} {"content":"懂法sdf","weibo_id":"6"}
16:51:40 add
16:51:40 return comment: {'content': '懂法sdf', 'weibo_id': 6, 'id': 22}
16:51:40 *********** < Comment
content: (懂法sdf)
weibo_id: (6)
id: (22) 
>

16:51:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdf",
  "weibo_id": 6,
  "id": 22
}
16:51:40 请求结束
16:51:40 cookie ['']
16:51:40 path and query /api/comment/add {} 
16:51:40 add
16:51:41 完整请求
16:51:41 请求结束
16:51:41 cookie ['']
16:51:41 path and query /api/comment/add {} {"content":"懂法sdf","weibo_id":"6"}
16:51:41 add
16:51:41 return comment: {'content': '懂法sdf', 'weibo_id': 6, 'id': 23}
16:51:41 *********** < Comment
content: (懂法sdf)
weibo_id: (6)
id: (23) 
>

16:51:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdf",
  "weibo_id": 6,
  "id": 23
}
16:51:45 完整请求
16:51:45 请求结束
16:51:45 cookie ['']
16:51:45 path and query /api/weibo/add {} {"content":"懂法sdfniui懂法sdfniuiosafdjoosafdjo"}
16:51:45 kwargs,  {'weibo_id': 7} <class 'dict'>
16:51:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdfniui懂法sdfniuiosafdjoosafdjo",
  "comments": [],
  "id": 7
}
16:51:46 完整请求
16:51:46 请求结束
16:51:46 cookie ['']
16:51:46 path and query /api/weibo/add {} {"content":"懂法sdfniui懂法sdfniuiosafdjoosafdjo"}
16:51:46 kwargs,  {'weibo_id': 8} <class 'dict'>
16:51:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdfniui懂法sdfniuiosafdjoosafdjo",
  "comments": [],
  "id": 8
}
16:51:46 完整请求
16:51:46 请求结束
16:51:46 cookie ['']
16:51:46 path and query /api/weibo/add {} {"content":"懂法sdfniui懂法sdfniuiosafdjoosafdjo"}
16:51:46 kwargs,  {'weibo_id': 9} <class 'dict'>
16:51:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdfniui懂法sdfniuiosafdjoosafdjo",
  "comments": [],
  "id": 9
}
16:51:46 完整请求
16:51:46 请求结束
16:51:46 cookie ['']
16:51:46 path and query /api/weibo/add {} {"content":"懂法sdfniui懂法sdfniuiosafdjoosafdjo"}
16:51:46 kwargs,  {'weibo_id': 10} <class 'dict'>
16:51:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdfniui懂法sdfniuiosafdjoosafdjo",
  "comments": [],
  "id": 10
}
16:51:47 完整请求
16:51:47 请求结束
16:51:47 cookie ['']
16:51:47 path and query /api/weibo/add {} {"content":"懂法sdfniui懂法sdfniuiosafdjoosafdjo"}
16:51:47 kwargs,  {'weibo_id': 11} <class 'dict'>
16:51:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "懂法sdfniui懂法sdfniuiosafdjoosafdjo",
  "comments": [],
  "id": 11
}
16:51:47 完整请求
16:51:47 请求结束
16:51:47 cookie ['']
16:51:47 path and query /api/comment/add {} 
16:51:47 add
